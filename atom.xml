<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESY</title>
  
  <subtitle>miao</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://esyyes.github.io/"/>
  <updated>2020-08-24T07:56:27.000Z</updated>
  <id>https://esyyes.github.io/</id>
  
  <author>
    <name>esy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于AHI和seff不同的分类别</title>
    <link href="https://esyyes.github.io/2020/08/24/%E5%9F%BA%E4%BA%8EAHI%E5%92%8Cseff%E4%B8%8D%E5%90%8C%E7%9A%84%E5%88%86%E7%B1%BB%E5%88%AB/"/>
    <id>https://esyyes.github.io/2020/08/24/%E5%9F%BA%E4%BA%8EAHI%E5%92%8Cseff%E4%B8%8D%E5%90%8C%E7%9A%84%E5%88%86%E7%B1%BB%E5%88%AB/</id>
    <published>2020-08-24T07:56:27.000Z</published>
    <updated>2020-08-24T07:56:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>查看单独数据下的准确率</title>
    <link href="https://esyyes.github.io/2020/08/24/sleep%20apnea%20and%20sleep%20stage/%E6%9F%A5%E7%9C%8B%E5%8D%95%E7%8B%AC%E6%95%B0%E6%8D%AE%E4%B8%8B%E7%9A%84%E5%87%86%E7%A1%AE%E7%8E%87/"/>
    <id>https://esyyes.github.io/2020/08/24/sleep%20apnea%20and%20sleep%20stage/%E6%9F%A5%E7%9C%8B%E5%8D%95%E7%8B%AC%E6%95%B0%E6%8D%AE%E4%B8%8B%E7%9A%84%E5%87%86%E7%A1%AE%E7%8E%87/</id>
    <published>2020-08-24T00:58:44.000Z</published>
    <updated>2020-08-24T00:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看单独数据下的准确率"><a href="#查看单独数据下的准确率" class="headerlink" title="查看单独数据下的准确率"></a>查看单独数据下的准确率</h1><p>查看每个分期下的特征重要度，并选取均值，然后取18个数据的均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/24</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将2345期的组合放到1个list中</span></span><br><span class="line">slpdb_stage = []</span><br><span class="line">key_word = []</span><br><span class="line"><span class="comment"># 读取2345期的睡眠结果</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">    df = pd.read_excel(<span class="string">'E:/8-23 feature section and importance/slpdb_feature_mean_stage'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>)</span><br><span class="line">    key_word = df.keys()[<span class="number">1</span>:]</span><br><span class="line">    data = np.array(df)</span><br><span class="line">    all_feature = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">103</span>):</span><br><span class="line">        feature_mean = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">            feature_mean.append(data[j][i])</span><br><span class="line">        all_feature.append(np.array(feature_mean).mean())</span><br><span class="line">    slpdb_stage.append(all_feature)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/24</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将2345期的组合放到1个list中</span></span><br><span class="line">slpdb_stage = []</span><br><span class="line">key_word = []</span><br><span class="line"><span class="comment"># 读取2345期的睡眠结果</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">    df = pd.read_excel(<span class="string">'E:/8-23 feature section and importance/slpdb_feature_mean_stage'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>)</span><br><span class="line">    key_word = df.keys()[<span class="number">1</span>:]</span><br><span class="line">    data = np.array(df)</span><br><span class="line">    all_feature = [np.array([data[j][i] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">18</span>)]).mean() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">103</span>)]</span><br><span class="line">    slpdb_stage.append(all_feature)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feature_name = []</span><br><span class="line"><span class="keyword">for</span> i_x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    dict_data = dict(zip(key_word, slpdb_stage[i_x]))</span><br><span class="line">    <span class="comment"># 将字典中的值按照降序排序</span></span><br><span class="line">    <span class="comment"># sorted, reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）,降序排列</span></span><br><span class="line">    sort_score = sorted(zip(dict_data.values(), dict_data.keys()), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 得到30个特征的关键词</span></span><br><span class="line">    F1_keys = [sort_score[i][<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>)]</span><br><span class="line">    feature_name.append(F1_keys)</span><br><span class="line"></span><br><span class="line">feature_names = pd.DataFrame(feature_name, index=[<span class="string">'stage_2'</span>, <span class="string">'stage_3'</span>, <span class="string">'stage_4'</span>, <span class="string">'stage_5'</span>], columns=np.arange(<span class="number">1</span>, <span class="number">31</span>)).T</span><br><span class="line">feature_names.to_excel(<span class="string">'slpdb的特征贡献度特征排序.xlsx'</span>)</span><br></pre></td></tr></table></figure><h1 id="查看两个数据库的单人情况"><a href="#查看两个数据库的单人情况" class="headerlink" title="查看两个数据库的单人情况"></a>查看两个数据库的单人情况</h1><p>首先生成对应的特征组合数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取2345期的睡眠结果</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">    df = pd.read_excel(<span class="string">'E:/8-23 feature section and importance/slpdb_feature_acr_stage'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>).T</span><br><span class="line">    <span class="comment"># 读取18个数据的平均准确率</span></span><br><span class="line">    F_mean = [[np.array([eval(df[k][i])[num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">25</span>)] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">18</span>)]</span><br><span class="line">    slpdb_singel = pd.DataFrame(F_mean)</span><br><span class="line">    slpdb_singel.to_excel(<span class="string">'slpdb_stage_'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>查看生成的4个阶段，在同一个数据库中，差距变化并不大</p><p>因此现在选择初始的5个特征作为比较，看每个数据在不同周期下的情况</p><table><thead><tr><th></th><th><strong>stage_2</strong></th><th><strong>stage_3</strong></th><th><strong>stage_4</strong></th><th><strong>stage_5</strong></th><th><strong>AHI</strong></th><th><strong>Seff(%)</strong></th></tr></thead><tbody><tr><td>slp01a</td><td>97.59%</td><td>95.80%</td><td>83.88%</td><td>82.55%</td><td>17.0</td><td>97.82</td></tr><tr><td>slp01b</td><td>86.95%</td><td>80.95%</td><td>81.58%</td><td>76.67%</td><td>22.3</td><td>48.42</td></tr><tr><td>slp02a</td><td>94.27%</td><td>89.12%</td><td>85.77%</td><td>83.47%</td><td>34.0</td><td>85.10</td></tr><tr><td>slp02b</td><td>89.15%</td><td>85.10%</td><td>85.79%</td><td>84.00%</td><td>22.2</td><td>60.62</td></tr><tr><td>slp03</td><td>88.86%</td><td>81.59%</td><td>77.32%</td><td>70.04%</td><td>43.0</td><td>83.19</td></tr><tr><td>slp04</td><td>91.11%</td><td>89.93%</td><td>85.92%</td><td>83.01%</td><td>59.8</td><td>78.14</td></tr><tr><td>slp14</td><td>81.29%</td><td>79.86%</td><td>79.11%</td><td>65.33%</td><td>30.7</td><td>55.05</td></tr><tr><td>slp16</td><td>84.72%</td><td>83.80%</td><td>82.58%</td><td>80.89%</td><td>53.1</td><td>55.20</td></tr><tr><td>slp32</td><td>92.84%</td><td>92.63%</td><td>81.66%</td><td>80.86%</td><td>22.1</td><td>39.11</td></tr><tr><td>slp37</td><td>94.72%</td><td>94.23%</td><td>94.07%</td><td>92.42%</td><td>100.8</td><td>89.37</td></tr><tr><td>slp41</td><td>83.87%</td><td>80.64%</td><td>80.39%</td><td>62.35%</td><td>60 [2]</td><td>71.65</td></tr><tr><td>slp45</td><td>92.92%</td><td>88.30%</td><td>80.58%</td><td>76.06%</td><td>5 [2]</td><td>85.05</td></tr><tr><td>slp48</td><td>90.36%</td><td>88.83%</td><td>89.14%</td><td>66.04%</td><td>46.8</td><td>72.10</td></tr><tr><td>slp59</td><td>86.49%</td><td>84.24%</td><td>77.87%</td><td>72.43%</td><td>55.3</td><td>69.80</td></tr><tr><td>slp60</td><td>87.78%</td><td>84.57%</td><td>85.07%</td><td>78.56%</td><td>59.2</td><td>59.23</td></tr><tr><td>slp61</td><td>89.54%</td><td>87.57%</td><td>80.29%</td><td>73.15%</td><td>41.2</td><td>83.22</td></tr><tr><td>slp66</td><td>87.94%</td><td>88.20%</td><td>87.04%</td><td>73.16%</td><td>65.5</td><td>61.07</td></tr><tr><td><strong>slp67x</strong></td><td><strong>79.95%</strong></td><td><strong>79.44%</strong></td><td><strong>80.09%</strong></td><td><strong>69.72%</strong></td><td>0.7</td><td>54.55</td></tr></tbody></table><table><thead><tr><th></th><th><strong>stage_2</strong></th><th><strong>stage_3</strong></th><th><strong>stage_4</strong></th><th><strong>stage_5</strong></th><th>PSG AHI</th><th>Seff (%)</th></tr></thead><tbody><tr><td>UCDDB002</td><td>90.15%</td><td>84.77%</td><td>76.27%</td><td>66.92%</td><td>23</td><td>84.96</td></tr><tr><td>UCDDB003</td><td>95.50%</td><td>91.20%</td><td>85.08%</td><td>80.12%</td><td>51</td><td>81.97</td></tr><tr><td>UCDDB005</td><td>87.31%</td><td>82.83%</td><td>81.25%</td><td>73.46%</td><td>13</td><td>65.86</td></tr><tr><td>UCDDB006</td><td>95.00%</td><td>90.21%</td><td>82.68%</td><td>77.42%</td><td>31</td><td>92.79</td></tr><tr><td>UCDDB007</td><td>92.66%</td><td>87.80%</td><td>81.70%</td><td>76.85%</td><td>12</td><td>90.52</td></tr><tr><td>UCDDB008</td><td>88.47%</td><td>85.11%</td><td>80.01%</td><td>71.42%</td><td>5</td><td>73.83</td></tr><tr><td>UCDDB009</td><td>86.84%</td><td>86.61%</td><td>76.91%</td><td>70.63%</td><td>12</td><td>79.98</td></tr><tr><td>UCDDB010</td><td>93.61%</td><td>86.52%</td><td>82.15%</td><td>76.10%</td><td>34</td><td>92.52</td></tr><tr><td>UCDDB011</td><td>91.37%</td><td>88.07%</td><td>80.90%</td><td>78.05%</td><td>8</td><td>61.12</td></tr><tr><td>UCDDB012</td><td>91.60%</td><td>84.68%</td><td>80.43%</td><td>75.52%</td><td>25</td><td>86.05</td></tr><tr><td>UCDDB013</td><td>88.38%</td><td>85.77%</td><td>84.61%</td><td>81.25%</td><td>16</td><td>61.75</td></tr><tr><td>UCDDB014</td><td>87.39%</td><td>84.66%</td><td>85.00%</td><td>74.87%</td><td>36</td><td>79.82</td></tr><tr><td>UCDDB015</td><td>83.48%</td><td>79.19%</td><td>78.02%</td><td>70.76%</td><td>6</td><td>80.25</td></tr><tr><td>UCDDB017</td><td>93.46%</td><td>88.16%</td><td>81.74%</td><td>80.11%</td><td>12</td><td>88.17</td></tr><tr><td><strong>UCDDB018</strong></td><td><strong>92.25%</strong></td><td><strong>89.76%</strong></td><td><strong>90.24%</strong></td><td><strong>87.82%</strong></td><td>2</td><td>60.91</td></tr><tr><td>UCDDB019</td><td>94.89%</td><td>84.90%</td><td>82.22%</td><td>80.19%</td><td>16</td><td>92.74</td></tr><tr><td>UCDDB020</td><td>84.75%</td><td>82.27%</td><td>80.90%</td><td>75.78%</td><td>15</td><td>78.14</td></tr><tr><td>UCDDB021</td><td>91.93%</td><td>87.16%</td><td>83.76%</td><td>79.42%</td><td>13</td><td>84.77</td></tr><tr><td>UCDDB022</td><td>87.14%</td><td>86.52%</td><td>85.84%</td><td>84.08%</td><td>7</td><td>59.20</td></tr><tr><td>UCDDB023</td><td>81.09%</td><td>79.60%</td><td>76.65%</td><td>64.41%</td><td>39</td><td>66.19</td></tr><tr><td>UCDDB024</td><td>91.32%</td><td>86.76%</td><td>83.42%</td><td>79.03%</td><td>24</td><td>83.50</td></tr><tr><td>UCDDB025</td><td>78.15%</td><td>75.19%</td><td>74.87%</td><td>58.10%</td><td>91</td><td>78.00</td></tr><tr><td>UCDDB026</td><td>95.52%</td><td>85.37%</td><td>79.05%</td><td>74.18%</td><td>14</td><td>87.30</td></tr><tr><td>UCDDB027</td><td>92.88%</td><td>85.71%</td><td>86.15%</td><td>80.86%</td><td>55</td><td>86.85</td></tr><tr><td>UCDDB028</td><td>73.49%</td><td>64.52%</td><td>62.79%</td><td>55.63%</td><td>46</td><td>69.20</td></tr></tbody></table><p>利用AHI和SEFF进行分类别，看下平均的</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1598265807368&di=de5fc4ce35b04ffbc8ea8699648516a7&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2Ff19c090f678c8e472ad62affb63457d976163339.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查看单独数据下的准确率&quot;&gt;&lt;a href=&quot;#查看单独数据下的准确率&quot; class=&quot;headerlink&quot; title=&quot;查看单独数据下的准确率&quot;&gt;&lt;/a&gt;查看单独数据下的准确率&lt;/h1&gt;&lt;p&gt;查看每个分期下的特征重要度，并选取均值，然后取18个数据的均值&lt;/p
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>绘制特征选择结果图</title>
    <link href="https://esyyes.github.io/2020/08/23/sleep%20apnea%20and%20sleep%20stage/%E7%BB%98%E5%88%B6%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%9C%E5%9B%BE/"/>
    <id>https://esyyes.github.io/2020/08/23/sleep%20apnea%20and%20sleep%20stage/%E7%BB%98%E5%88%B6%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%9C%E5%9B%BE/</id>
    <published>2020-08-23T08:39:46.000Z</published>
    <updated>2020-08-23T08:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制特征选择结果图"><a href="#绘制特征选择结果图" class="headerlink" title="绘制特征选择结果图"></a>绘制特征选择结果图</h1><ol><li>利用RFE-RF生成的数据特征准确率数据去判定最佳的特征数目</li><li>比较不同组合下的特征之间的数目和区别</li></ol><h2 id="slpdb库中的全部数据下的特征选择结果图"><a href="#slpdb库中的全部数据下的特征选择结果图" class="headerlink" title="slpdb库中的全部数据下的特征选择结果图"></a>slpdb库中的全部数据下的特征选择结果图</h2><p>先读取出slpdb中2期的分期准确率结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取2345期的睡眠结果</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    data = pd.read_excel(<span class="string">'E:/8-23 feature section and importance/slpdb_feature_acr_stage'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>)</span><br><span class="line">    df = data.T</span><br><span class="line">    <span class="comment"># 读取18个数据的平均准确率</span></span><br><span class="line">    F_mean = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        <span class="comment"># 读取25个特征子集组合的特征平均准确率</span></span><br><span class="line">        feature_num_mean = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">25</span>):</span><br><span class="line">            <span class="comment"># 读取第一个数据的前面准确率结果</span></span><br><span class="line">            <span class="comment"># 特征对应的准确率</span></span><br><span class="line">            feature_acr = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">                feature_acr.append(eval(df[k][i])[num])</span><br><span class="line">            <span class="comment"># 将50准确率求平均值</span></span><br><span class="line">            feature_mean = np.array(feature_acr).mean()</span><br><span class="line">            feature_num_mean.append(feature_mean)</span><br><span class="line">        F_mean.append(feature_num_mean)</span><br></pre></td></tr></table></figure><p>进行化简，F_mean暂时留着吧，也没啥用，到时直接读取数据的量就行了去针对性的读取，还是留着吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取2345期的睡眠结果</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    df = pd.read_excel(<span class="string">'E:/8-23 feature section and importance/slpdb_feature_acr_stage'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>).T</span><br><span class="line">    <span class="comment"># 读取18个数据的平均准确率</span></span><br><span class="line">    F_mean = [[np.array([eval(df[k][i])[num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">25</span>)] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">18</span>)]</span><br><span class="line">    <span class="comment"># 对应特征求一个平均准确率，先用整体的来计算</span></span><br><span class="line">    <span class="comment"># 总共有25个特征组合</span></span><br><span class="line">    feature_total = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>):</span><br><span class="line">        acr = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(F_mean)):</span><br><span class="line">            acr.append(F_mean[i][j])</span><br><span class="line">        <span class="comment"># 转换为百分数，乘以100</span></span><br><span class="line">        all_mean = np.array(acr).mean()*<span class="number">100</span></span><br><span class="line">        feature_total.append(all_mean)</span><br></pre></td></tr></table></figure><p>这儿对应的25个特征组合，在18个数据下的平均准确率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/23</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将2345期的组合放到1个list中</span></span><br><span class="line">slpdb_stage = []</span><br><span class="line"><span class="comment"># 读取2345期的睡眠结果</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">    df = pd.read_excel(<span class="string">'E:/8-23 feature section and importance/slpdb_feature_acr_stage'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>).T</span><br><span class="line">    <span class="comment"># 读取18个数据的平均准确率</span></span><br><span class="line">    F_mean = [[np.array([eval(df[k][i])[num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">25</span>)] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">18</span>)]</span><br><span class="line">    <span class="comment"># 总共有25个特征组合</span></span><br><span class="line">    feature_total = [np.array([F_mean[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(F_mean))]).mean()*<span class="number">100</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>)]</span><br><span class="line">    slpdb_stage.append(feature_total)</span><br></pre></td></tr></table></figure><h2 id="slpdb全部数据的绘制"><a href="#slpdb全部数据的绘制" class="headerlink" title="slpdb全部数据的绘制"></a>slpdb全部数据的绘制</h2><p>将其进行绘制</p><p> <a href="https://blog.csdn.net/Poul_henry/article/details/82590392?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-82590392.nonecase&utm_term=python改横坐标" target="_blank" rel="noopener">https://blog.csdn.net/Poul_henry/article/details/82590392?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2<del>all</del>first_rank_v2~rank_v25-1-82590392.nonecase&amp;utm_term=python%E6%94%B9%E6%A8%AA%E5%9D%90%E6%A0%87</a> </p><p>横纵坐标的更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将2345期的组合放到1个list中</span></span><br><span class="line">slpdb_stage = []</span><br><span class="line"><span class="comment"># 读取2345期的睡眠结果</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">    df = pd.read_excel(<span class="string">'E:/8-23 feature section and importance/slpdb_feature_acr_stage'</span> + <span class="string">'%d'</span> % index + <span class="string">'.xlsx'</span>).T</span><br><span class="line">    <span class="comment"># 读取18个数据的平均准确率</span></span><br><span class="line">    F_mean = [[np.array([eval(df[k][i])[num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">25</span>)] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">18</span>)]</span><br><span class="line">    <span class="comment"># 总共有25个特征组合</span></span><br><span class="line">    feature_total = [np.array([F_mean[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(F_mean))]).mean()*<span class="number">100</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>)]</span><br><span class="line">    slpdb_stage.append(feature_total)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">26</span>)</span><br><span class="line">x1 = np.arange(<span class="number">5</span>, <span class="number">31</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># 显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line"><span class="comment"># x轴重命名</span></span><br><span class="line">plt.xticks(x, x1)</span><br><span class="line">plt.plot(x, slpdb_stage[<span class="number">0</span>], <span class="string">"k*--"</span>, linewidth=<span class="number">1</span>, label=<span class="string">'class_2'</span>)</span><br><span class="line">plt.plot(x, slpdb_stage[<span class="number">1</span>], <span class="string">"b*--"</span>, linewidth=<span class="number">1</span>, label=<span class="string">'class_3'</span>)</span><br><span class="line">plt.plot(x, slpdb_stage[<span class="number">2</span>], <span class="string">"r*--"</span>, linewidth=<span class="number">1</span>, label=<span class="string">'class_4'</span>)</span><br><span class="line">plt.plot(x, slpdb_stage[<span class="number">3</span>], <span class="string">"y*--"</span>, linewidth=<span class="number">1</span>, label=<span class="string">'class_4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">    plt.scatter(x[slpdb_stage[i].index(max(slpdb_stage[i]))], max(slpdb_stage[i]), s=<span class="number">80</span>, color=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"Number of Features"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Average Accuracy of RF/%"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment"># 隐藏左边和上边的边框</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">fig.savefig(<span class="string">'slpdb所有数据的一起绘制图.png'</span>, dpi=<span class="number">1600</span>, bbox_inches=<span class="string">'tight'</span>)</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cslpdb%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%B5%B7%E7%BB%98%E5%88%B6%E5%9B%BE.png" alt=""></p><p>太模糊了将其绘制成子图的形式</p><h2 id="子图形式的绘制"><a href="#子图形式的绘制" class="headerlink" title="子图形式的绘制"></a>子图形式的绘制</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cslpdb%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%90%E5%9B%BE%E7%BB%98%E5%88%B6.png" alt=""></p><h2 id="特征数目表"><a href="#特征数目表" class="headerlink" title="特征数目表"></a>特征数目表</h2><table><thead><tr><th>特征数</th><th><strong>stage_2</strong></th><th><strong>stage_3</strong></th><th><strong>stage_4</strong></th><th><strong>stage_5</strong></th></tr></thead><tbody><tr><td><strong>5</strong></td><td>88.91</td><td>86.38</td><td>83.23</td><td>76.15</td></tr><tr><td><strong>6</strong></td><td>89.21</td><td>86.99</td><td>83.86</td><td>76.82</td></tr><tr><td><strong>7</strong></td><td>89.55</td><td>87.23</td><td>84.21</td><td>77.23</td></tr><tr><td><strong>8</strong></td><td>89.82</td><td>87.62</td><td>84.49</td><td>77.76</td></tr><tr><td><strong>9</strong></td><td>90.06</td><td>87.93</td><td>85.03</td><td>77.96</td></tr><tr><td><strong>10</strong></td><td>90.04</td><td>88.19</td><td>85.22</td><td>78.14</td></tr><tr><td><strong>11</strong></td><td>90.12</td><td>88.27</td><td>85.36</td><td>78.23</td></tr><tr><td><strong>12</strong></td><td>90.29</td><td>88.29</td><td>85.59</td><td>78.77</td></tr><tr><td><strong>13</strong></td><td>90.42</td><td>88.55</td><td>85.62</td><td>78.68</td></tr><tr><td><strong>14</strong></td><td>90.46</td><td>88.57</td><td>85.75</td><td>78.81</td></tr><tr><td><strong>15</strong></td><td>90.53</td><td>88.64</td><td>85.86</td><td>78.91</td></tr><tr><td><strong>16</strong></td><td>90.64</td><td>88.70</td><td>85.95</td><td>78.99</td></tr><tr><td><strong>17</strong></td><td>90.59</td><td>88.74</td><td>86.06</td><td>79.11</td></tr><tr><td><strong>18</strong></td><td>90.63</td><td>88.80</td><td>86.07</td><td>79.16</td></tr><tr><td><strong>19</strong></td><td>90.68</td><td>88.86</td><td>86.07</td><td>79.15</td></tr><tr><td><strong>20</strong></td><td>90.59</td><td>88.79</td><td>86.09</td><td>79.32</td></tr><tr><td><strong>21</strong></td><td>90.71</td><td>88.91</td><td>86.13</td><td>79.39</td></tr><tr><td><strong>22</strong></td><td>90.76</td><td>88.87</td><td>86.12</td><td>79.26</td></tr><tr><td><strong>23</strong></td><td>90.70</td><td>88.92</td><td>86.31</td><td>79.30</td></tr><tr><td><strong>24</strong></td><td>90.76</td><td>88.88</td><td>86.26</td><td>79.39</td></tr><tr><td><strong>25</strong></td><td>90.72</td><td>89.00</td><td>86.26</td><td>79.54</td></tr><tr><td><strong>26</strong></td><td>90.73</td><td>88.93</td><td>86.18</td><td>79.41</td></tr><tr><td><strong>27</strong></td><td>90.73</td><td>88.96</td><td>86.24</td><td>79.44</td></tr><tr><td><strong>28</strong></td><td>90.73</td><td>89.05</td><td>86.27</td><td>79.54</td></tr><tr><td><strong>29</strong></td><td>90.67</td><td>88.95</td><td>86.28</td><td>79.65</td></tr></tbody></table><h2 id="ucddb库中的全部数据的绘制结果"><a href="#ucddb库中的全部数据的绘制结果" class="headerlink" title="ucddb库中的全部数据的绘制结果"></a>ucddb库中的全部数据的绘制结果</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cucddb%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%B5%B7%E7%BB%98%E5%88%B6%E5%9B%BE.png" alt=""></p><h2 id="子图形式的绘制-1"><a href="#子图形式的绘制-1" class="headerlink" title="子图形式的绘制"></a>子图形式的绘制</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cucddb%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%90%E5%9B%BE%E7%BB%98%E5%88%B6.png" alt=""></p><h2 id="特征数目表-1"><a href="#特征数目表-1" class="headerlink" title="特征数目表"></a>特征数目表</h2><table><thead><tr><th align="center"></th><th align="center"><strong>stage_2</strong></th><th align="center"><strong>stage_3</strong></th><th align="center"><strong>stage_4</strong></th><th align="center"><strong>stage_5</strong></th></tr></thead><tbody><tr><td align="center"><strong>5</strong></td><td align="center">90.50</td><td align="center">86.09</td><td align="center">81.88</td><td align="center">76.48</td></tr><tr><td align="center"><strong>6</strong></td><td align="center">90.79</td><td align="center">86.86</td><td align="center">82.98</td><td align="center">77.87</td></tr><tr><td align="center"><strong>7</strong></td><td align="center">91.10</td><td align="center">87.34</td><td align="center">83.64</td><td align="center">78.77</td></tr><tr><td align="center"><strong>8</strong></td><td align="center">91.27</td><td align="center">87.73</td><td align="center">84.16</td><td align="center">79.43</td></tr><tr><td align="center"><strong>9</strong></td><td align="center">91.52</td><td align="center">88.12</td><td align="center">84.54</td><td align="center">80.06</td></tr><tr><td align="center"><strong>10</strong></td><td align="center">91.68</td><td align="center">88.39</td><td align="center">84.81</td><td align="center">80.40</td></tr><tr><td align="center"><strong>11</strong></td><td align="center">91.79</td><td align="center">88.59</td><td align="center">85.08</td><td align="center">80.67</td></tr><tr><td align="center"><strong>12</strong></td><td align="center">91.80</td><td align="center">88.76</td><td align="center">85.30</td><td align="center">81.05</td></tr><tr><td align="center"><strong>13</strong></td><td align="center">91.90</td><td align="center">88.96</td><td align="center">85.45</td><td align="center">81.24</td></tr><tr><td align="center"><strong>14</strong></td><td align="center">91.94</td><td align="center">89.06</td><td align="center">85.62</td><td align="center">81.41</td></tr><tr><td align="center"><strong>15</strong></td><td align="center">91.97</td><td align="center">89.14</td><td align="center">85.79</td><td align="center">81.53</td></tr><tr><td align="center"><strong>16</strong></td><td align="center">92.06</td><td align="center">89.30</td><td align="center">85.84</td><td align="center">81.69</td></tr><tr><td align="center"><strong>17</strong></td><td align="center">92.12</td><td align="center">89.39</td><td align="center">86.02</td><td align="center">81.89</td></tr><tr><td align="center"><strong>18</strong></td><td align="center">92.10</td><td align="center">89.48</td><td align="center">86.03</td><td align="center">82.10</td></tr><tr><td align="center"><strong>19</strong></td><td align="center">92.18</td><td align="center">89.45</td><td align="center">86.10</td><td align="center">82.01</td></tr><tr><td align="center"><strong>20</strong></td><td align="center">92.15</td><td align="center">89.46</td><td align="center">86.13</td><td align="center">82.16</td></tr><tr><td align="center"><strong>21</strong></td><td align="center">92.20</td><td align="center">89.62</td><td align="center">86.26</td><td align="center">82.20</td></tr><tr><td align="center"><strong>22</strong></td><td align="center">92.16</td><td align="center">89.59</td><td align="center">86.27</td><td align="center">82.16</td></tr><tr><td align="center"><strong>23</strong></td><td align="center">92.22</td><td align="center">89.62</td><td align="center">86.29</td><td align="center">82.36</td></tr><tr><td align="center"><strong>24</strong></td><td align="center">92.22</td><td align="center">89.58</td><td align="center">86.30</td><td align="center">82.36</td></tr><tr><td align="center"><strong>25</strong></td><td align="center">92.24</td><td align="center">89.76</td><td align="center">86.42</td><td align="center">82.43</td></tr><tr><td align="center"><strong>26</strong></td><td align="center">92.20</td><td align="center">89.67</td><td align="center">86.35</td><td align="center">82.38</td></tr><tr><td align="center"><strong>27</strong></td><td align="center">92.21</td><td align="center">89.70</td><td align="center">86.38</td><td align="center">82.48</td></tr><tr><td align="center"><strong>28</strong></td><td align="center">92.28</td><td align="center">89.71</td><td align="center">86.35</td><td align="center">82.51</td></tr><tr><td align="center"><strong>29</strong></td><td align="center">92.25</td><td align="center">89.76</td><td align="center">86.40</td><td align="center">82.44</td></tr></tbody></table><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1598175163552&di=6293d942b394e03ebcfd0ccd5e931831&imgtype=0&src=http%3A%2F%2Fc.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2Fd31b0ef41bd5ad6eaf4a33b383cb39dbb6fd3c33.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;绘制特征选择结果图&quot;&gt;&lt;a href=&quot;#绘制特征选择结果图&quot; class=&quot;headerlink&quot; title=&quot;绘制特征选择结果图&quot;&gt;&lt;/a&gt;绘制特征选择结果图&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;利用RFE-RF生成的数据特征准确率数据去判定最佳的特征数目&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>根据5期的标签生成2期的标签</title>
    <link href="https://esyyes.github.io/2020/08/23/sleep%20apnea%20and%20sleep%20stage/%E6%A0%B9%E6%8D%AE5%E6%9C%9F%E7%9A%84%E6%A0%87%E7%AD%BE%E7%94%9F%E6%88%902%E6%9C%9F%E7%9A%84%E6%A0%87%E7%AD%BE/"/>
    <id>https://esyyes.github.io/2020/08/23/sleep%20apnea%20and%20sleep%20stage/%E6%A0%B9%E6%8D%AE5%E6%9C%9F%E7%9A%84%E6%A0%87%E7%AD%BE%E7%94%9F%E6%88%902%E6%9C%9F%E7%9A%84%E6%A0%87%E7%AD%BE/</id>
    <published>2020-08-23T06:05:42.000Z</published>
    <updated>2020-08-23T06:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据5期的标签生成2期的标签"><a href="#根据5期的标签生成2期的标签" class="headerlink" title="根据5期的标签生成2期的标签"></a>根据5期的标签生成2期的标签</h1><h2 id="slpdb库中的标签"><a href="#slpdb库中的标签" class="headerlink" title="slpdb库中的标签"></a>slpdb库中的标签</h2><p>分别将slpdb和ucddb中的标签加入2期</p><p>再生产一个表格，将AHI和那个SEFF加进去，到时读取判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/23</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/slpdb_data/mitdata/slpdb_name.xlsx'</span>)</span><br><span class="line">slpdb_name = np.array(text_name[<span class="string">'name'</span>]).tolist()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> slpdb_name:</span><br><span class="line">    feature = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_feature/features_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">    data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">    label = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_note/note_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">    tag = pd.get_dummies(label.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">    N321RW = np.array(tag[<span class="string">'N321RW'</span>]).tolist()</span><br><span class="line">    N = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(tag)):</span><br><span class="line">        <span class="keyword">if</span> N321RW[j] == <span class="number">5</span>:</span><br><span class="line">            N.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            N.append(<span class="number">1</span>)</span><br><span class="line">    stage_2 = pd.DataFrame(N, columns=[<span class="string">'NW'</span>])</span><br><span class="line">    tags = pd.concat([tag, stage_2], axis=<span class="number">1</span>)</span><br><span class="line">    tags.to_excel(<span class="string">'note_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br></pre></td></tr></table></figure><h2 id="生成ucddb库中的标签"><a href="#生成ucddb库中的标签" class="headerlink" title="生成ucddb库中的标签"></a>生成ucddb库中的标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/23</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/st_data/SubjectDetails.xls'</span>)</span><br><span class="line">study_name = np.array(text_name[<span class="string">'Study Number'</span>])</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> study_name:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取对应的ECG数据</span></span><br><span class="line">    dataFile = <span class="string">'F:/py/py_sleep stage and apnea/data/ucddb_feature/features_'</span> + h + <span class="string">'.xlsx'</span></span><br><span class="line">    dataFile1 = <span class="string">'F:/py/py_sleep stage and apnea/data/ucddb_note/note_'</span> + h + <span class="string">'.xlsx'</span></span><br><span class="line">    feature = pd.read_excel(dataFile)</span><br><span class="line"></span><br><span class="line">    data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">    label = pd.read_excel(dataFile1)</span><br><span class="line">    tag = pd.get_dummies(label.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">    N321RW = np.array(tag[<span class="string">'N321RW'</span>]).tolist()</span><br><span class="line">    N = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(tag)):</span><br><span class="line">        <span class="keyword">if</span> N321RW[j] == <span class="number">5</span>:</span><br><span class="line">            N.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            N.append(<span class="number">1</span>)</span><br><span class="line">    stage_2 = pd.DataFrame(N, columns=[<span class="string">'NW'</span>])</span><br><span class="line">    tags = pd.concat([tag, stage_2], axis=<span class="number">1</span>)</span><br><span class="line">    tags.to_excel(<span class="string">'note_'</span> + <span class="string">'%s'</span> % h + <span class="string">'.xlsx'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=346000099,1756814075&fm=26&gp=0.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;根据5期的标签生成2期的标签&quot;&gt;&lt;a href=&quot;#根据5期的标签生成2期的标签&quot; class=&quot;headerlink&quot; title=&quot;根据5期的标签生成2期的标签&quot;&gt;&lt;/a&gt;根据5期的标签生成2期的标签&lt;/h1&gt;&lt;h2 id=&quot;slpdb库中的标签&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>特征选择的新理解和更改</title>
    <link href="https://esyyes.github.io/2020/08/23/sleep%20apnea%20and%20sleep%20stage/%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E7%9A%84%E6%96%B0%E7%90%86%E8%A7%A3%E5%92%8C%E6%9B%B4%E6%94%B9/"/>
    <id>https://esyyes.github.io/2020/08/23/sleep%20apnea%20and%20sleep%20stage/%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E7%9A%84%E6%96%B0%E7%90%86%E8%A7%A3%E5%92%8C%E6%9B%B4%E6%94%B9/</id>
    <published>2020-08-23T03:00:17.000Z</published>
    <updated>2020-08-23T03:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特征选择的新理解和更改"><a href="#特征选择的新理解和更改" class="headerlink" title="特征选择的新理解和更改"></a>特征选择的新理解和更改</h1><p>采用RFE算法，并结合RF，原理是先根据RF的重要度排序，然后进行特征递归删除，最后划分为特征子集。其实并不需要代入RFE-RF的算法，只需要考虑，排在前面的特征重要度，然后直接将特征子集拿去分类就可以了。</p><p>这样就可以大大的降低运算的时间，直接就是确定特征就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/23</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(xtrain, xtest, ytrain, ytest)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(xtrain, ytrain)</span><br><span class="line">    ypred = clf.predict(xtest)</span><br><span class="line">    sad = accuracy_score(ytest, ypred)</span><br><span class="line">    <span class="keyword">return</span> sad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据名字</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/slpdb_data/mitdata/slpdb_name.xlsx'</span>)</span><br><span class="line">slpdb_name = np.array(text_name[<span class="string">'name'</span>]).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    slpdb_feature_mean = []</span><br><span class="line">    slpdb_feature_acr = []</span><br><span class="line">    key_word = []</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> slpdb_name:</span><br><span class="line">        <span class="comment"># 打开对应的特征和对应的集合</span></span><br><span class="line">        feature = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_feature/features_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># 均值插补和zscore标准化</span></span><br><span class="line">        df = data_pre(data)</span><br><span class="line">        labels = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_note/note_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(labels.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># 读取想要分期的标签0-1:5期，1-2：4期，2-3:3期</span></span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), index:index+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        feature_score = []</span><br><span class="line">        feature_acr = []</span><br><span class="line">        <span class="comment"># 循环50遍保存特征重要度的得分以及特征的准确率</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            <span class="comment"># 按照7:3划分为训练集和测试集</span></span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(df, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            <span class="comment"># 按照RF的重要度进行特征选择</span></span><br><span class="line">            sel = SelectFromModel(RandomForestClassifier())</span><br><span class="line">            sel.fit(X_train, y_train)</span><br><span class="line">            <span class="comment"># RF后的特征重要度</span></span><br><span class="line">            feature_importance = sel.estimator_.feature_importances_</span><br><span class="line"></span><br><span class="line">            feature_score.append(feature_importance)</span><br><span class="line">            <span class="comment"># 将其转换为字典形式</span></span><br><span class="line">            dict_score = dict(zip(data.keys(), feature_importance))</span><br><span class="line">            <span class="comment"># 将字典中的值按照降序排序</span></span><br><span class="line">            <span class="comment"># sorted, reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）,降序排列</span></span><br><span class="line">            sort_score = sorted(zip(dict_score.values(), dict_score.keys()), reverse=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 先得到第一个特征的关键词和对应的df中的特征</span></span><br><span class="line">            <span class="comment"># F1 = df[sort_score[0][1]]</span></span><br><span class="line">            <span class="comment"># 得到30个特征的关键词</span></span><br><span class="line">            F1_keys = [sort_score[i][<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>)]</span><br><span class="line">            <span class="comment"># 从第5个特征开始获取准确率,从5到30的特征重要度排序</span></span><br><span class="line">            acr = [run_rf(X_train[F1_keys[<span class="number">0</span>:i]], X_test[F1_keys[<span class="number">0</span>:i]], y_train, y_test) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">30</span>)]</span><br><span class="line">            <span class="comment"># 已经得到对应特征的关键词和准确率,然后是循环50遍</span></span><br><span class="line">            feature_acr.append(acr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取单个数据下的102的特征的分别的特征重要度的均值</span></span><br><span class="line">        F_mean = [np.array([feature_score[i][k] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">102</span>)]</span><br><span class="line">        key_word = data.keys()</span><br><span class="line">        slpdb_feature_mean.append(F_mean)</span><br><span class="line">        <span class="comment"># 获取5-30的特征下的RF的准确率</span></span><br><span class="line">        slpdb_feature_acr.append(feature_acr)</span><br><span class="line"></span><br><span class="line">    slpdb_mean = pd.DataFrame(slpdb_feature_mean, index=slpdb_name, columns=key_word)</span><br><span class="line">    slpdb_mean.to_excel(<span class="string">'slpdb_'</span> + <span class="string">'feature_mean_stage'</span> + <span class="string">'%d'</span> % (<span class="number">5</span>-index) + <span class="string">".xlsx"</span>)</span><br><span class="line"></span><br><span class="line">    slpdb_acr = pd.DataFrame(slpdb_feature_acr, index=slpdb_name)</span><br><span class="line">    slpdb_acr.to_excel(<span class="string">'slpdb_'</span> + <span class="string">'feature_acr_stage'</span> + <span class="string">'%d'</span> % (<span class="number">5</span>-index) + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><p>跟RFE一个算法但是运算的速度大大的提高了很高了很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/22</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(xtrain, xtest, ytrain, ytest)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(xtrain, ytrain)</span><br><span class="line">    ypred = clf.predict(xtest)</span><br><span class="line">    sad = accuracy_score(ytest, ypred)</span><br><span class="line">    <span class="keyword">return</span> sad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据名字</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/slpdb_data/mitdata/slpdb_name.xlsx'</span>)</span><br><span class="line">slpdb_name = np.array(text_name[<span class="string">'name'</span>]).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">f'在标签<span class="subst">&#123;k&#125;</span>下的特征文件'</span>)</span><br><span class="line">    se = []</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> slpdb_name:</span><br><span class="line">        <span class="comment"># 打开对应的特征和对应的集合</span></span><br><span class="line">        feature = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_feature/features_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        labels = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_note/note_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(labels.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># 均值插补和zscore标准化</span></span><br><span class="line">        df = data_pre(data)</span><br><span class="line">        <span class="comment"># 读取想要分期的标签0-1:5期，1-2：4期，2-3:3期</span></span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), <span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line">        acr = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            <span class="comment"># 按照7:3划分为训练集和测试集</span></span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(df, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            score = []</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">                sel = RFE(RandomForestClassifier(random_state=<span class="number">0</span>), n_features_to_select=index)</span><br><span class="line">                sel.fit(X_train, y_train)</span><br><span class="line">                X_train_rfe = sel.transform(X_train)</span><br><span class="line">                X_test_rfe = sel.transform(X_test)</span><br><span class="line">                score.append(run_rf(X_train_rfe, X_test_rfe, y_train, y_test))</span><br><span class="line">            acr.append(score)</span><br><span class="line">        <span class="comment"># 每个数据都保存为一个excel到时好划分正常和非正常的来读取</span></span><br><span class="line">        class_score = pd.DataFrame(acr)</span><br><span class="line">        class_score.to_excel(<span class="string">'feature_section_'</span> + <span class="string">'%s'</span> % text + <span class="string">".xlsx"</span>)</span><br><span class="line">        print(<span class="string">f'检测文件数为：%s'</span> % text, end=<span class="string">'\t'</span>)</span><br><span class="line">        se.append(acr)</span><br><span class="line">        print()</span><br><span class="line">    sea = pd.DataFrame(se)</span><br><span class="line">    n = <span class="number">5</span> - k</span><br><span class="line">    sea.to_excel(<span class="string">'all_theme_'</span> + <span class="string">'%d'</span> % n + <span class="string">".xlsx"</span>)</span><br><span class="line">    print(<span class="string">f'运行主题<span class="subst">&#123;k&#125;</span>次'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1660312031,2458917315&fm=26&gp=0.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特征选择的新理解和更改&quot;&gt;&lt;a href=&quot;#特征选择的新理解和更改&quot; class=&quot;headerlink&quot; title=&quot;特征选择的新理解和更改&quot;&gt;&lt;/a&gt;特征选择的新理解和更改&lt;/h1&gt;&lt;p&gt;采用RFE算法，并结合RF，原理是先根据RF的重要度排序，然后进行特
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>重新进行特征筛选</title>
    <link href="https://esyyes.github.io/2020/08/22/sleep%20apnea%20and%20sleep%20stage/%E9%87%8D%E6%96%B0%E8%BF%9B%E8%A1%8C%E7%89%B9%E5%BE%81%E7%AD%9B%E9%80%89/"/>
    <id>https://esyyes.github.io/2020/08/22/sleep%20apnea%20and%20sleep%20stage/%E9%87%8D%E6%96%B0%E8%BF%9B%E8%A1%8C%E7%89%B9%E5%BE%81%E7%AD%9B%E9%80%89/</id>
    <published>2020-08-22T07:36:48.000Z</published>
    <updated>2020-08-22T07:36:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重新进行特征筛选"><a href="#重新进行特征筛选" class="headerlink" title="重新进行特征筛选"></a>重新进行特征筛选</h1><ol><li>前面的特征进行了变化，所以重新进行特征筛选和选择</li><li>本次还是 用RFE-RF进行特征</li></ol><h2 id="特征集和预处理"><a href="#特征集和预处理" class="headerlink" title="特征集和预处理"></a>特征集和预处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">均值插补缺省值</span></span><br><span class="line"><span class="string">z-score标准化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_pre</span><span class="params">(data)</span>:</span></span><br><span class="line">    缺失值进行均值插补</span><br><span class="line">    df = data.replace([np.inf, -np.inf], np.nan)</span><br><span class="line">    num = df.isnull().sum()</span><br><span class="line">    [df[df.keys()[i]].fillna(value=df[df.keys()[i]].mean(), inplace=<span class="literal">True</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)) <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>]</span><br><span class="line">    df_scale = preprocessing.scale(df)</span><br><span class="line">    <span class="comment"># 将标准化后的数据再转换为表格</span></span><br><span class="line">    fea = pd.DataFrame(df_scale, columns=data.keys())</span><br><span class="line">    <span class="keyword">return</span> fea</span><br></pre></td></tr></table></figure><h2 id="特征子集的确定"><a href="#特征子集的确定" class="headerlink" title="特征子集的确定"></a>特征子集的确定</h2><ol><li>RFE-RF方法再结合RF，对前30个特征进行筛选</li><li>到时再进行特征重要度排序</li><li>循环50次</li><li>保存每个数据的运行结果和全部的</li><li>确定slpdb和ucddb的</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/22</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(xtrain, xtest, ytrain, ytest)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(xtrain, ytrain)</span><br><span class="line">    ypred = clf.predict(xtest)</span><br><span class="line">    sad = accuracy_score(ytest, ypred)</span><br><span class="line">    <span class="keyword">return</span> sad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据名字</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/slpdb_data/mitdata/slpdb_name.xlsx'</span>)</span><br><span class="line">slpdb_name = np.array(text_name[<span class="string">'name'</span>]).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">f'在标签<span class="subst">&#123;k&#125;</span>下的特征文件'</span>)</span><br><span class="line">    se = []</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> slpdb_name:</span><br><span class="line">        <span class="comment"># 打开对应的特征和对应的集合</span></span><br><span class="line">        feature = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_feature/features_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        labels = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_note/note_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(labels.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># 均值插补和zscore标准化</span></span><br><span class="line">        df = data_pre(data)</span><br><span class="line">        <span class="comment"># 读取想要分期的标签0-1:5期，1-2：4期，2-3:3期</span></span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), <span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line">        acr = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            <span class="comment"># 按照7:3划分为训练集和测试集</span></span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(df, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            score = []</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">                sel = RFE(RandomForestClassifier(random_state=<span class="number">0</span>), n_features_to_select=index)</span><br><span class="line">                sel.fit(X_train, y_train)</span><br><span class="line">                X_train_rfe = sel.transform(X_train)</span><br><span class="line">                X_test_rfe = sel.transform(X_test)</span><br><span class="line">                score.append(run_rf(X_train_rfe, X_test_rfe, y_train, y_test))</span><br><span class="line">            acr.append(score)</span><br><span class="line">        <span class="comment"># 每个数据都保存为一个excel到时好划分正常和非正常的来读取</span></span><br><span class="line">        class_score = pd.DataFrame(acr)</span><br><span class="line">        class_score.to_excel(<span class="string">'feature_section_'</span> + <span class="string">'%s'</span> % text + <span class="string">".xlsx"</span>)</span><br><span class="line">        print(<span class="string">f'检测文件数为：%s'</span> % text, end=<span class="string">'\t'</span>)</span><br><span class="line">        se.append(acr)</span><br><span class="line">        print()</span><br><span class="line">    sea = pd.DataFrame(se)</span><br><span class="line">    n = <span class="number">5</span> - k</span><br><span class="line">    sea.to_excel(<span class="string">'all_theme_'</span> + <span class="string">'%d'</span> % n + <span class="string">".xlsx"</span>)</span><br><span class="line">    print(<span class="string">f'运行主题<span class="subst">&#123;k&#125;</span>次'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1598092129809&di=8363262b247a42af2e865ab7c1dd173a&imgtype=0&src=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2Feeb46bc55e742e5194f9845db5737804e90d2640.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重新进行特征筛选&quot;&gt;&lt;a href=&quot;#重新进行特征筛选&quot; class=&quot;headerlink&quot; title=&quot;重新进行特征筛选&quot;&gt;&lt;/a&gt;重新进行特征筛选&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;前面的特征进行了变化，所以重新进行特征筛选和选择&lt;/li&gt;
&lt;li&gt;本次还是 用
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>重新构建slpdb中的特征和标签</title>
    <link href="https://esyyes.github.io/2020/08/20/sleep%20apnea%20and%20sleep%20stage/%E9%87%8D%E6%96%B0%E6%9E%84%E5%BB%BAslpdb%E4%B8%AD%E7%9A%84%E7%89%B9%E5%BE%81%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
    <id>https://esyyes.github.io/2020/08/20/sleep%20apnea%20and%20sleep%20stage/%E9%87%8D%E6%96%B0%E6%9E%84%E5%BB%BAslpdb%E4%B8%AD%E7%9A%84%E7%89%B9%E5%BE%81%E5%92%8C%E6%A0%87%E7%AD%BE/</id>
    <published>2020-08-20T02:08:38.000Z</published>
    <updated>2020-08-20T02:08:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重新构建slpdb中的特征和标签"><a href="#重新构建slpdb中的特征和标签" class="headerlink" title="重新构建slpdb中的特征和标签"></a>重新构建slpdb中的特征和标签</h1><p>slpdb数据库在当时处理hrv信号的时候，错误的将循环时候的j从11开始了，貌似影响不大，但反正都要重新生成ucddb数据，就直接写出来然后那个计算器去运行吧</p><p>这一步，就讲数据的行对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/slpdb_data/mitdata/slpdb_name.xlsx'</span>)</span><br><span class="line">slpdb_name = np.array(text_name).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> slpdb_name:</span><br><span class="line">    annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % text[<span class="number">0</span>], <span class="string">'st'</span>)</span><br><span class="line">    aux = annotation.aux_note</span><br><span class="line">    sample_min = annotation.sample.min()</span><br><span class="line">    sample_max = annotation.sample.max()</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;text[<span class="number">0</span>]&#125;</span>起始位置为<span class="subst">&#123;sample_min&#125;</span>, 终止位置为<span class="subst">&#123;sample_max&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">slp01a起始位置为<span class="number">1</span>, 终止位置为<span class="number">1792500</span></span><br><span class="line">slp01b起始位置为<span class="number">1</span>, 终止位置为<span class="number">2692500</span></span><br><span class="line">slp02a起始位置为<span class="number">1</span>, 终止位置为<span class="number">2692500</span></span><br><span class="line">slp02b起始位置为<span class="number">1</span>, 终止位置为<span class="number">2017500</span></span><br><span class="line">slp03起始位置为<span class="number">1</span>, 终止位置为<span class="number">5392500</span></span><br><span class="line">slp04起始位置为<span class="number">1</span>, 终止位置为<span class="number">5392500</span></span><br><span class="line">slp14起始位置为<span class="number">45000</span>, 终止位置为<span class="number">5392500</span></span><br><span class="line">slp16起始位置为<span class="number">195000</span>, 终止位置为<span class="number">5392500</span></span><br><span class="line">slp32起始位置为<span class="number">1</span>, 终止位置为<span class="number">4792500</span></span><br><span class="line">slp37起始位置为<span class="number">15000</span>, 终止位置为<span class="number">5242500</span></span><br><span class="line">slp41起始位置为<span class="number">1</span>, 终止位置为<span class="number">5842500</span></span><br><span class="line">slp45起始位置为<span class="number">1</span>, 终止位置为<span class="number">5692500</span></span><br><span class="line">slp48起始位置为<span class="number">1</span>, 终止位置为<span class="number">5692500</span></span><br><span class="line">slp59起始位置为<span class="number">165000</span>, 终止位置为<span class="number">3592500</span></span><br><span class="line">slp60起始位置为<span class="number">1</span>, 终止位置为<span class="number">5317500</span></span><br><span class="line">slp61起始位置为<span class="number">150000</span>, 终止位置为<span class="number">5542500</span></span><br><span class="line">slp66起始位置为<span class="number">1</span>, 终止位置为<span class="number">3285000</span></span><br><span class="line">slp67x起始位置为<span class="number">1</span>, 终止位置为<span class="number">1147500</span></span><br></pre></td></tr></table></figure><p>第一就是起始位置的问题，然后就是有两个数据缺失的问题</p><h2 id="首尾数据缺失问题"><a href="#首尾数据缺失问题" class="headerlink" title="首尾数据缺失问题"></a>首尾数据缺失问题</h2><p>首先查看下是否缺失的数据对应的aux不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">23</span>:<span class="number">51</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]    <span class="number">45000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[23:51:30.000 30/03/1989]    52500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">23</span>:<span class="number">52</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]    <span class="number">60000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[23:52:30.000 30/03/1989]    67500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">23</span>:<span class="number">53</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]    <span class="number">75000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[23:53:30.000 30/03/1989]    82500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">23</span>:<span class="number">54</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]    <span class="number">90000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[23:54:30.000 30/03/1989]    97500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">23</span>:<span class="number">55</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]   <span class="number">105000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[23:55:30.000 30/03/1989]   112500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">23</span>:<span class="number">56</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]   <span class="number">120000</span>     <span class="string">"    0    0    01</span></span><br><span class="line"><span class="string">[23:56:30.000 30/03/1989]   127500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">23</span>:<span class="number">57</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]   <span class="number">135000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[23:57:30.000 30/03/1989]   142500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">23</span>:<span class="number">58</span>:<span class="number">00.000</span> <span class="number">30</span>/<span class="number">03</span>/<span class="number">1989</span>]   <span class="number">150000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[23:58:30.000 30/03/1989]   157500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br></pre></td></tr></table></figure><p>数据缺失对应的即为标签的缺失。因此标签并没有过多的改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">00</span>:<span class="number">01</span>:<span class="number">00.000</span> <span class="number">07</span>/<span class="number">04</span>/<span class="number">1989</span>]   <span class="number">195000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[00:01:30.000 07/04/1989]   202500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">00</span>:<span class="number">02</span>:<span class="number">00.000</span> <span class="number">07</span>/<span class="number">04</span>/<span class="number">1989</span>]   <span class="number">210000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[00:02:30.000 07/04/1989]   217500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br><span class="line">[<span class="number">00</span>:<span class="number">03</span>:<span class="number">00.000</span> <span class="number">07</span>/<span class="number">04</span>/<span class="number">1989</span>]   <span class="number">225000</span>     <span class="string">"    0    0    0W</span></span><br><span class="line"><span class="string">[00:03:30.000 07/04/1989]   232500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>W</span><br></pre></td></tr></table></figure><p>因此可以直接根据slpdb中的起始和末尾位置进行生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/20</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/slpdb_data/mitdata/slpdb_name.xlsx'</span>)</span><br><span class="line">slpdb_name = np.array(text_name[<span class="string">'name'</span>]).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> slpdb_name:</span><br><span class="line">    annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % text, <span class="string">'st'</span>)</span><br><span class="line">    aux = annotation.aux_note</span><br><span class="line">    sample_min = annotation.sample.min()</span><br><span class="line">    sample_max = annotation.sample.max()</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;text[<span class="number">0</span>]&#125;</span>起始位置为<span class="subst">&#123;sample_min&#125;</span>, 终止位置为<span class="subst">&#123;sample_max&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> text == <span class="string">'slp03'</span> <span class="keyword">or</span> text == <span class="string">'slp60'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tag1 = []</span><br><span class="line">        tag2 = []</span><br><span class="line">        tag3 = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, int(len(aux)<span class="number">-5</span>)):</span><br><span class="line">            <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">                tag1.append(<span class="number">1</span>)</span><br><span class="line">                tag2.append(<span class="number">1</span>)</span><br><span class="line">                tag3.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">                tag1.append(<span class="number">2</span>)</span><br><span class="line">                tag2.append(<span class="number">2</span>)</span><br><span class="line">                tag3.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">                tag1.append(<span class="number">3</span>)</span><br><span class="line">                tag2.append(<span class="number">2</span>)</span><br><span class="line">                tag3.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">                tag1.append(<span class="number">4</span>)</span><br><span class="line">                tag2.append(<span class="number">3</span>)</span><br><span class="line">                tag3.append(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tag1.append(<span class="number">5</span>)</span><br><span class="line">                tag2.append(<span class="number">4</span>)</span><br><span class="line">                tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">        label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">        label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line">        label = pd.concat([label1, label2, label3], axis=<span class="number">1</span>)</span><br><span class="line">        label.to_excel(<span class="string">'note_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>生成对应的slpdb_note标签</p><p>标签数据缺失</p><p>直接根据缺失的来的，所以可以暂时不管这个了。待会儿看下那个slpdb中中间数据是ecg数据缺失还是标签缺失</p><table><thead><tr><th><code>rdann -r slpdb/slp01a -f 0 -t 7200 -a st -v &gt;annotations.txt</code></th><th><a href="https://archive.physionet.org/physiobank/annotations.shtml" target="_blank" rel="noopener">Annotation key</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">23</span>:<span class="number">07</span>:<span class="number">00.004</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]        <span class="number">1</span>     <span class="string">"    0    0    04 LA LA</span></span><br><span class="line"><span class="string">[23:07:30.000 19/01/1989]     7500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">4</span> LA</span><br><span class="line">[<span class="number">23</span>:<span class="number">08</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]    <span class="number">15000</span>     <span class="string">"    0    0    04 LA</span></span><br><span class="line"><span class="string">[23:08:30.000 19/01/1989]    22500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">4</span> L L L</span><br><span class="line">[<span class="number">23</span>:<span class="number">09</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]    <span class="number">30000</span>     <span class="string">"    0    0    04 L</span></span><br><span class="line"><span class="string">[23:09:30.000 19/01/1989]    37500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">4</span> L</span><br><span class="line">[<span class="number">23</span>:<span class="number">10</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]    <span class="number">45000</span>     <span class="string">"    0    0    04 L L</span></span><br><span class="line"><span class="string">[23:10:30.000 19/01/1989]    52500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">4</span> L</span><br><span class="line">[<span class="number">23</span>:<span class="number">11</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]    <span class="number">60000</span>     <span class="string">"    0    0    04 L</span></span><br><span class="line"><span class="string">[23:11:30.000 19/01/1989]    67500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">4</span> L L</span><br><span class="line">[<span class="number">23</span>:<span class="number">12</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]    <span class="number">75000</span>     <span class="string">"    0    0    04 L L L</span></span><br><span class="line"><span class="string">[23:12:30.000 19/01/1989]    82500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">4</span> LA</span><br><span class="line">[<span class="number">23</span>:<span class="number">13</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]    <span class="number">90000</span>     <span class="string">"    0    0    03 HA</span></span><br><span class="line"><span class="string">[23:13:30.000 19/01/1989]    97500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">3</span> H LA</span><br><span class="line">[<span class="number">23</span>:<span class="number">14</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]   <span class="number">105000</span>     <span class="string">"    0    0    03 LA</span></span><br><span class="line"><span class="string">[23:14:30.000 19/01/1989]   112500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">2</span> LA</span><br><span class="line">[<span class="number">23</span>:<span class="number">15</span>:<span class="number">00.000</span> <span class="number">19</span>/<span class="number">01</span>/<span class="number">1989</span>]   <span class="number">120000</span>     <span class="string">"    0    0    02 LA</span></span><br><span class="line"><span class="string">[23:15:30.000 19/01/1989]   127500     "</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span><span class="number">2</span> LA</span><br></pre></td></tr></table></figure><p>标签数目比特征多一个，因此删除最后一个标签即可</p><h2 id="中间数据缺失的问题"><a href="#中间数据缺失的问题" class="headerlink" title="中间数据缺失的问题"></a>中间数据缺失的问题</h2><p>slp03和slp60</p><p>先确定是什么缺失</p><p>标签无缺失。观看数据</p><p>所以现在处理中间数据的标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/20</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将5分钟的数据进行30s窗口的滑窗切片，然后进行输出为list</span></span><br><span class="line"><span class="comment"># 5min的进行单独的分析，然后进行时频域和非线性的分析</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> peaks_time_features <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> frequency_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> nonliner_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> eliminate_outliers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> HRV_interp1 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"><span class="comment"># test = input('请输入文件名：')</span></span><br><span class="line"><span class="comment"># test = 'slp03'</span></span><br><span class="line">test = <span class="string">'slp60'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line"></span><br><span class="line">annotation1 = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation1.aux_note</span><br><span class="line">sample_min = annotation1.sample.min()</span><br><span class="line">sample_max = annotation1.sample.max()</span><br><span class="line"></span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line">ecg_r_locs1 = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs,</span><br><span class="line">                                       search_radius=search_radius, smooth_window_size=<span class="number">100</span>)</span><br><span class="line"><span class="comment"># ecg_r_locs异常点处理</span></span><br><span class="line">ecg_r_locs = eliminate(ecg_r_locs1)</span><br><span class="line"><span class="comment"># ecg_r_peaks峰值点获取</span></span><br><span class="line">ecg_r_peaks = [ecg_signal[int(ecg_r_locs[i])][<span class="number">0</span>]+<span class="number">0.7</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ecg_r_locs))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_RR_5m = []</span><br><span class="line">all_locs_5m = []</span><br><span class="line">all_peaks_5m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(sample_min/<span class="number">7500</span>), int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">11</span>)):</span><br><span class="line">    <span class="comment"># if 168 &lt; i &lt; 200:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">532</span> &lt; i &lt; <span class="number">555</span>:</span><br><span class="line">        <span class="comment"># slp60</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RR_300s = []</span><br><span class="line">        locs_300s = []</span><br><span class="line">        peaks_300s = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">10</span>)):</span><br><span class="line">                locs_300s.append(ecg_r_locs[j])</span><br><span class="line">                RR_300s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">                peaks_300s.append(ecg_r_peaks[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        RR_300s.pop()</span><br><span class="line">        all_RR_5m.append(RR_300s)</span><br><span class="line">        all_locs_5m.append(locs_300s)</span><br><span class="line">        all_peaks_5m.append(peaks_300s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECG_R</span></span><br><span class="line">peaks_features = [peaks_time_feature(all_peaks_5m[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_peaks_5m))]</span><br><span class="line"><span class="comment"># HRV</span></span><br><span class="line">hrv_time = [time_features(all_RR_5m[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line"><span class="comment"># hrv_freq = [getfreq(resample(hrv_interp1(all_locs_5m[i], all_RR_5m[i], 10), 250, 4)) for i in range(len(all_RR_5m))]</span></span><br><span class="line">hrv_freq = [getfreq(all_RR_5m[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line">hrv_nonl = [non_linear5(np.array(all_RR_5m[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line">features = [peaks_features[i] + hrv_time[i] + hrv_freq[i] + hrv_nonl[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_RR_30s = []</span><br><span class="line">all_locs_30s = []</span><br><span class="line">all_peaks_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(sample_min/<span class="number">7500</span>), int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">    <span class="comment"># if 168 &lt; i &lt; 200:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">532</span> &lt; i &lt; <span class="number">555</span>:</span><br><span class="line">        <span class="comment"># slp60</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RR_30s = []</span><br><span class="line">        locs_30s = []</span><br><span class="line">        peaks_30s = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">1</span>)):</span><br><span class="line">                locs_30s.append(ecg_r_locs[j])</span><br><span class="line">                RR_30s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">                peaks_30s.append(ecg_r_peaks[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        RR_30s.pop()</span><br><span class="line">        all_RR_30s.append(RR_30s)</span><br><span class="line">        <span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br><span class="line">        all_locs_30s.append(locs_30s)</span><br><span class="line">        all_peaks_30s.append(peaks_30s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECG_R</span></span><br><span class="line">peaks_features1 = [peaks_time_feature(all_peaks_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_peaks_30s))]</span><br><span class="line"><span class="comment"># HRV</span></span><br><span class="line">hrv_time1 = [time_features(all_RR_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">hrv_freq1 = [getfreq(resample(hrv_interp1(all_locs_30s[i], all_RR_30s[i], <span class="number">1</span>), <span class="number">250</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">hrv_nonl1 = [non_linear(np.array(all_RR_30s[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">features1 = [peaks_features1[i] + hrv_time1[i] + hrv_freq1[i] + hrv_nonl1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">features30 = features1[<span class="number">5</span>:(len(features1)<span class="number">-5</span>)]</span><br><span class="line"></span><br><span class="line">features50 = [features30[i] + features[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(features))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为excel</span></span><br><span class="line">feature = pd.DataFrame(features50, columns=[<span class="string">'p_max'</span>, <span class="string">'p_min'</span>, <span class="string">'p_mean'</span>, <span class="string">'p_median'</span>, <span class="string">'p_SDNN'</span>, <span class="string">'p_var'</span>,</span><br><span class="line">                                            <span class="string">'p_Peaks'</span>, <span class="string">'p_RMSSD'</span>, <span class="string">'p_kurt'</span>, <span class="string">'p_skew'</span>, <span class="string">'p_wave_factor'</span>,</span><br><span class="line">                                            <span class="string">'p_peak_factor'</span>, <span class="string">'p_Impulse_factor'</span>, <span class="string">'p_Margin_factor'</span>, <span class="string">'p_RMS'</span>,</span><br><span class="line">                                            <span class="string">'R_mean'</span>, <span class="string">'R_SDNN'</span>, <span class="string">'R_SDSD'</span>, <span class="string">'NN50'</span>, <span class="string">'pNN50'</span>, <span class="string">'NN20'</span>, <span class="string">'pNN20'</span>, <span class="string">'R_RMSSD'</span>,</span><br><span class="line">                                            <span class="string">'R_median'</span>, <span class="string">'R_NUM'</span>, <span class="string">'R_CVSD'</span>, <span class="string">'R_CV'</span>, <span class="string">'HR_mean'</span>, <span class="string">'HR_max'</span>, <span class="string">'HR_min'</span>, <span class="string">'HR_std'</span>,</span><br><span class="line">                                            <span class="string">'LF'</span>, <span class="string">'HF'</span>, <span class="string">'LF_HF'</span>, <span class="string">'LFnu'</span>, <span class="string">'HFnu'</span>, <span class="string">'total'</span>, <span class="string">'VLF'</span>, <span class="string">'sd1'</span>, <span class="string">'sd2'</span>, <span class="string">'sd2/sd1'</span>,</span><br><span class="line">                                            <span class="string">'csi10'</span>, <span class="string">'cvi'</span>, <span class="string">'Modified_CSI10'</span>, <span class="string">'apen'</span>, <span class="string">'spen'</span>, <span class="string">'lle'</span>, <span class="string">'sampen'</span>,</span><br><span class="line"></span><br><span class="line">                                            <span class="string">'5p_max'</span>, <span class="string">'5p_min'</span>, <span class="string">'5p_mean'</span>, <span class="string">'5p_median'</span>, <span class="string">'5p_SDNN'</span>, <span class="string">'5p_var'</span>,</span><br><span class="line">                                            <span class="string">'5p_Peaks'</span>, <span class="string">'5p_RMSSD'</span>, <span class="string">'5p_kurt'</span>, <span class="string">'5p_skew'</span>, <span class="string">'5p_wave_factor'</span>,</span><br><span class="line">                                            <span class="string">'5p_peak_factor'</span>, <span class="string">'5p_Impulse_factor'</span>, <span class="string">'5p_Margin_factor'</span>, <span class="string">'5p_RMS'</span>,</span><br><span class="line">                                            <span class="string">'5R_mean'</span>, <span class="string">'5R_SDNN'</span>, <span class="string">'5R_SDSD'</span>, <span class="string">'5NN50'</span>, <span class="string">'5pNN50'</span>, <span class="string">'5NN20'</span>, <span class="string">'5pNN20'</span>, <span class="string">'5R_RMSSD'</span>,</span><br><span class="line">                                            <span class="string">'5R_median'</span>, <span class="string">'5R_NUM'</span>, <span class="string">'5R_CVSD'</span>, <span class="string">'5R_CV'</span>, <span class="string">'5HR_mean'</span>, <span class="string">'5HR_max'</span>, <span class="string">'5HR_min'</span>, <span class="string">'5HR_std'</span>,</span><br><span class="line">                                            <span class="string">'5LF'</span>, <span class="string">'5HF'</span>, <span class="string">'5LF_HF'</span>, <span class="string">'5LFnu'</span>, <span class="string">'5HFnu'</span>, <span class="string">'5total'</span>, <span class="string">'5VLF'</span>, <span class="string">'5sd1'</span>, <span class="string">'5sd2'</span>, <span class="string">'5sd2/sd1'</span>,</span><br><span class="line">                                            <span class="string">'5csi10'</span>, <span class="string">'5csi30'</span>, <span class="string">'5csi50'</span>, <span class="string">'5csi100'</span>, <span class="string">'5cvi'</span>,</span><br><span class="line">                                            <span class="string">'5Modified_CSI10'</span>, <span class="string">'Modified_CSI30'</span>, <span class="string">'5Modified_CSI50'</span>, <span class="string">'5Modified_CSI100'</span>,</span><br><span class="line">                                            <span class="string">'5apen'</span>, <span class="string">'5spen'</span>, <span class="string">'5lle'</span>, <span class="string">'5sampen'</span></span><br><span class="line">                                            ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># num = int(input('请输入特征的名字:'))</span></span><br><span class="line">feature.to_excel(<span class="string">'features_'</span> + <span class="string">'%s'</span> % test + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/20</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line"><span class="comment"># test = input("请输入想读取的文件名： ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test = 'slp03'</span></span><br><span class="line">test = <span class="string">'slp60'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, len(aux)<span class="number">-5</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">532</span> &lt; i &lt; <span class="number">555</span>:</span><br><span class="line">    <span class="comment"># if 168 &lt; i &lt; 200:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">            tag1.append(<span class="number">1</span>)</span><br><span class="line">            tag2.append(<span class="number">1</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">            tag1.append(<span class="number">2</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">            tag1.append(<span class="number">3</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">            tag1.append(<span class="number">4</span>)</span><br><span class="line">            tag2.append(<span class="number">3</span>)</span><br><span class="line">            tag3.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag1.append(<span class="number">5</span>)</span><br><span class="line">            tag2.append(<span class="number">4</span>)</span><br><span class="line">            tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3], axis=<span class="number">1</span>)</span><br><span class="line">label.to_excel(<span class="string">'note_'</span> + <span class="string">'%s'</span> % test + <span class="string">'.xlsx'</span>)</span><br></pre></td></tr></table></figure><h2 id="比较数据的长短"><a href="#比较数据的长短" class="headerlink" title="比较数据的长短"></a>比较数据的长短</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据的名字</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/slpdb_data/mitdata/slpdb_name.xlsx'</span>)</span><br><span class="line">slpdb_name = np.array(text_name[<span class="string">'name'</span>]).tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> slpdb_name:</span><br><span class="line">    feature = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_feature/features_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">    label = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data/slpdb_note/note_'</span> + <span class="string">'%s'</span> % text + <span class="string">'.xlsx'</span>)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;text&#125;</span>中特征数据长为<span class="subst">&#123;len(feature)&#125;</span>标签长为<span class="subst">&#123;len(label)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">slp01a中特征数据长为<span class="number">229</span>标签长为<span class="number">230</span></span><br><span class="line">slp01b中特征数据长为<span class="number">349</span>标签长为<span class="number">350</span></span><br><span class="line">slp02a中特征数据长为<span class="number">349</span>标签长为<span class="number">350</span></span><br><span class="line">slp02b中特征数据长为<span class="number">259</span>标签长为<span class="number">260</span></span><br><span class="line">slp03中特征数据长为<span class="number">678</span>标签长为<span class="number">679</span></span><br><span class="line">slp04中特征数据长为<span class="number">709</span>标签长为<span class="number">710</span></span><br><span class="line">slp14中特征数据长为<span class="number">703</span>标签长为<span class="number">704</span></span><br><span class="line">slp16中特征数据长为<span class="number">683</span>标签长为<span class="number">684</span></span><br><span class="line">slp32中特征数据长为<span class="number">629</span>标签长为<span class="number">630</span></span><br><span class="line">slp37中特征数据长为<span class="number">687</span>标签长为<span class="number">688</span></span><br><span class="line">slp41中特征数据长为<span class="number">769</span>标签长为<span class="number">770</span></span><br><span class="line">slp45中特征数据长为<span class="number">749</span>标签长为<span class="number">750</span></span><br><span class="line">slp48中特征数据长为<span class="number">749</span>标签长为<span class="number">750</span></span><br><span class="line">slp59中特征数据长为<span class="number">447</span>标签长为<span class="number">448</span></span><br><span class="line">slp60中特征数据长为<span class="number">677</span>标签长为<span class="number">678</span></span><br><span class="line">slp61中特征数据长为<span class="number">709</span>标签长为<span class="number">710</span></span><br><span class="line">slp66中特征数据长为<span class="number">429</span>标签长为<span class="number">429</span></span><br><span class="line">slp67x中特征数据长为<span class="number">143</span>标签长为<span class="number">144</span></span><br></pre></td></tr></table></figure><p>就以后标签就直接取data长度吧</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597915511863&di=7b5df141d439f7c60e83cf93a191c138&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Ftranslate%2F20170517%2FHrO7-fyfeutq1597299.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重新构建slpdb中的特征和标签&quot;&gt;&lt;a href=&quot;#重新构建slpdb中的特征和标签&quot; class=&quot;headerlink&quot; title=&quot;重新构建slpdb中的特征和标签&quot;&gt;&lt;/a&gt;重新构建slpdb中的特征和标签&lt;/h1&gt;&lt;p&gt;slpdb数据库在当时处理h
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>对UCDDB数据库进行特征提取</title>
    <link href="https://esyyes.github.io/2020/08/19/sleep%20apnea%20and%20sleep%20stage/%E5%AF%B9UCDDB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/08/19/sleep%20apnea%20and%20sleep%20stage/%E5%AF%B9UCDDB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</id>
    <published>2020-08-19T11:53:37.000Z</published>
    <updated>2020-08-19T11:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对UCDDB数据库进行特征提取"><a href="#对UCDDB数据库进行特征提取" class="headerlink" title="对UCDDB数据库进行特征提取"></a>对UCDDB数据库进行特征提取</h1><p>ucddb数据库</p><p>fs = 128</p><p>首先先读取数据，然后再矫正数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RR峰值点获取</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the gqrs detection algorithm and correct the peaks</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peaks_hr</span><span class="params">(sig, peak_inds, fs, title, figsize=<span class="params">(<span class="number">20</span>, <span class="number">10</span>)</span>, saveto=None)</span>:</span></span><br><span class="line">    <span class="string">"Plot a signal with its peaks and heart rate"</span></span><br><span class="line">    <span class="comment"># Calculate heart rate</span></span><br><span class="line">    hrs = processing.compute_hr(sig_len=sig.shape[<span class="number">0</span>], qrs_inds=peak_inds, fs=fs)</span><br><span class="line"></span><br><span class="line">    N = sig.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    fig, ax_left = plt.subplots(figsize=figsize)</span><br><span class="line">    ax_right = ax_left.twinx()</span><br><span class="line"></span><br><span class="line">    ax_left.plot(sig, color=<span class="string">'#3979f0'</span>, label=<span class="string">'Signal'</span>)</span><br><span class="line">    ax_left.plot(peak_inds, sig[peak_inds], <span class="string">'rx'</span>, marker=<span class="string">'x'</span>, color=<span class="string">'#8b0000'</span>, label=<span class="string">'Peak'</span>, markersize=<span class="number">12</span>)</span><br><span class="line">    <span class="comment">#     ax_right.plot(np.arange(N), hrs, label='Heart rate', color='m', linewidth=2)</span></span><br><span class="line">    <span class="comment"># 不要心率这一指标，后面再加</span></span><br><span class="line">    ax_left.set_title(title)</span><br><span class="line"></span><br><span class="line">    ax_left.set_xlabel(<span class="string">'Time (ms)'</span>)</span><br><span class="line">    ax_left.set_ylabel(<span class="string">'ECG (mV)'</span>, color=<span class="string">'#3979f0'</span>)</span><br><span class="line">    <span class="comment">#     ax_right.set_ylabel('Heart rate (bpm)', color='m')</span></span><br><span class="line">    <span class="comment"># Make the y-axis label, ticks and tick labels match the line color.</span></span><br><span class="line">    ax_left.tick_params(<span class="string">'y'</span>, colors=<span class="string">'#3979f0'</span>)</span><br><span class="line">    ax_right.tick_params(<span class="string">'y'</span>, colors=<span class="string">'m'</span>)</span><br><span class="line">    <span class="keyword">if</span> saveto <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        plt.savefig(saveto, dpi=<span class="number">600</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the wfdb record and the physical samples</span></span><br><span class="line"><span class="comment"># 读取文件名</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/st_data/SubjectDetails.xls'</span>)</span><br><span class="line">study_name = np.array(text_name[<span class="string">'Study Number'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件对应的数据</span></span><br><span class="line">dataFile = <span class="string">'F:/st_data/'</span> + study_name[<span class="number">0</span>] + <span class="string">'.mat'</span></span><br><span class="line">data = scio.loadmat(dataFile)[<span class="string">'signal'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the gqrs algorithm to detect qrs locations in the first channel</span></span><br><span class="line">qrs_inds = processing.gqrs_detect(sig=data[:, <span class="number">0</span>], fs=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot results</span></span><br><span class="line">peaks_hr(sig=data, peak_inds=qrs_inds, fs=<span class="number">128</span>, title=<span class="string">"GQRS peak detection on record slp01a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Correct the peaks shifting them to local maxima</span></span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"><span class="comment"># min_gap = record.fs * 60 / min_bpm</span></span><br><span class="line"><span class="comment"># Use the maximum possible bpm as the search radius</span></span><br><span class="line">search_radius = int(<span class="number">128</span> * <span class="number">60</span> / max_bpm)</span><br><span class="line">corrected_peak_inds = processing.correct_peaks(data[:, <span class="number">0</span>], peak_inds=qrs_inds,</span><br><span class="line">                                               search_radius=search_radius, smooth_window_size=<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display results</span></span><br><span class="line">print(<span class="string">'Corrected gqrs detected peak indices:'</span>, sorted(corrected_peak_inds))</span><br><span class="line">peaks_hr(sig=data, peak_inds=sorted(corrected_peak_inds), fs=<span class="number">128</span>,</span><br><span class="line">         title=<span class="string">"Corrected GQRS peak detection on slp01a"</span>)</span><br></pre></td></tr></table></figure><p>所以现在有了正确的波峰值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">11</span>, len(ecg_r_locs)):</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">10</span>)):</span><br><span class="line">        locs_300s.append(ecg_r_locs[j])</span><br><span class="line">        RR_300s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">        peaks_300s.append(ecg_r_peaks[j])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">RR_300s.pop()</span><br></pre></td></tr></table></figure><p>j为啥是从11开始！！！</p><p>可以从11开始，因为原始的数据if (30<em>record.fs<em>i) &lt;= ecg_r_locs[j] &lt;= (30</em>record.fs</em>(i+10)):这个值不是从0开始的，但是有些数据是从0开始的，为了不再次运行，因此决定删除所有特征和注释的第一行。</p><p>到时候把特征提取这些全部重新做一遍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/20</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">    feature = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">    删除dataframe中的指定一行</span><br><span class="line">    data.drop(data.index[[<span class="number">0</span>]], inplace=<span class="literal">True</span>)</span><br><span class="line">    data.to_excel(<span class="string">'features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    note = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">    tag.drop(tag.index[[<span class="number">0</span>]], inplace=<span class="literal">True</span>)</span><br><span class="line">    tag.to_excel(<span class="string">'note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/20</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> peaks_time_features <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> frequency_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> nonliner_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> eliminate_outliers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> HRV_interp1 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件名</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/st_data/SubjectDetails.xls'</span>)</span><br><span class="line">study_name = np.array(text_name[<span class="string">'Study Number'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> study_name:</span><br><span class="line">    <span class="comment"># 读取文件对应的数据</span></span><br><span class="line">    dataFile = <span class="string">'F:/st_data/'</span> + <span class="string">'%s'</span> % text + <span class="string">'.mat'</span></span><br><span class="line">    data = scio.loadmat(dataFile)[<span class="string">'signal'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用GQRS算法获取R峰值</span></span><br><span class="line">    qrs_inds = processing.gqrs_detect(sig=data[:, <span class="number">0</span>], fs=<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 去寻找到正确的峰值点坐标</span></span><br><span class="line">    ecg_R_locs = processing.correct_peaks(data[:, <span class="number">0</span>], peak_inds=qrs_inds,</span><br><span class="line">                                          search_radius=int(<span class="number">128</span> * <span class="number">60</span> / <span class="number">200</span>), smooth_window_size=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># ecg_r_locs异常点处理</span></span><br><span class="line">    ecg_r_locs = eliminate(ecg_R_locs)</span><br><span class="line">    <span class="comment"># ecg_r_peaks峰值点获取</span></span><br><span class="line">    ecg_r_peaks = [data[int(ecg_r_locs[i])][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ecg_r_locs))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取5min时候的特征</span></span><br><span class="line">    all_RR_5m = []</span><br><span class="line">    all_locs_5m = []</span><br><span class="line">    all_peaks_5m = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">128</span>/<span class="number">30</span> - <span class="number">11</span>)):</span><br><span class="line">        RR_300s = []</span><br><span class="line">        locs_300s = []</span><br><span class="line">        peaks_300s = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">30</span>*<span class="number">128</span>*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*<span class="number">128</span>*(i+<span class="number">10</span>)):</span><br><span class="line">                locs_300s.append(ecg_r_locs[j])</span><br><span class="line">                RR_300s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">                peaks_300s.append(ecg_r_peaks[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        RR_300s.pop()</span><br><span class="line">        all_RR_5m.append(RR_300s)</span><br><span class="line">        all_locs_5m.append(locs_300s)</span><br><span class="line">        all_peaks_5m.append(peaks_300s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ECG_R</span></span><br><span class="line">    peaks_features = [peaks_time_feature(all_peaks_5m[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_peaks_5m))]</span><br><span class="line">    <span class="comment"># HRV</span></span><br><span class="line">    hrv_time = [time_features(all_RR_5m[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line">    <span class="comment"># hrv_freq = [getfreq(resample(hrv_interp1(all_locs_5m[i], all_RR_5m[i], 10), 250, 4)) for i in range(len(all_RR_5m))]</span></span><br><span class="line">    hrv_freq = [getfreq(all_RR_5m[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line">    hrv_nonl = [non_linear5(np.array(all_RR_5m[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line">    features = [peaks_features[i] + hrv_time[i] + hrv_freq[i] + hrv_nonl[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_5m))]</span><br><span class="line"></span><br><span class="line">    all_RR_30s = []</span><br><span class="line">    all_locs_30s = []</span><br><span class="line">    all_peaks_30s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">128</span>/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">        RR_30s = []</span><br><span class="line">        locs_30s = []</span><br><span class="line">        peaks_30s = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">30</span> * <span class="number">128</span> * i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span> * <span class="number">128</span> * (i + <span class="number">1</span>)):</span><br><span class="line">                locs_30s.append(ecg_r_locs[j])</span><br><span class="line">                RR_30s.append((ecg_r_locs[j + <span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">                peaks_30s.append(ecg_r_peaks[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        RR_30s.pop()</span><br><span class="line">        all_RR_30s.append(RR_30s)</span><br><span class="line">        <span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br><span class="line">        all_locs_30s.append(locs_30s)</span><br><span class="line">        all_peaks_30s.append(peaks_30s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ECG_R</span></span><br><span class="line">    peaks_features1 = [peaks_time_feature(all_peaks_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_peaks_30s))]</span><br><span class="line">    <span class="comment"># HRV</span></span><br><span class="line">    hrv_time1 = [time_features(all_RR_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">    hrv_freq1 = [getfreq(resample(hrv_interp1(all_locs_30s[i], all_RR_30s[i], <span class="number">1</span>), <span class="number">250</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span></span><br><span class="line">                 range(len(all_RR_30s))]</span><br><span class="line">    hrv_nonl1 = [non_linear(np.array(all_RR_30s[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">    features1 = [peaks_features1[i] + hrv_time1[i] + hrv_freq1[i] + hrv_nonl1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">    features30 = features1[<span class="number">5</span>:(len(features1) - <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    features50 = [features30[i] + features[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(features))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存为excel</span></span><br><span class="line">    feature = pd.DataFrame(features50, columns=[<span class="string">'p_max'</span>, <span class="string">'p_min'</span>, <span class="string">'p_mean'</span>, <span class="string">'p_median'</span>, <span class="string">'p_SDNN'</span>, <span class="string">'p_var'</span>,</span><br><span class="line">                                                <span class="string">'p_Peaks'</span>, <span class="string">'p_RMSSD'</span>, <span class="string">'p_kurt'</span>, <span class="string">'p_skew'</span>, <span class="string">'p_wave_factor'</span>,</span><br><span class="line">                                                <span class="string">'p_peak_factor'</span>, <span class="string">'p_Impulse_factor'</span>, <span class="string">'p_Margin_factor'</span>, <span class="string">'p_RMS'</span>,</span><br><span class="line">                                                <span class="string">'R_mean'</span>, <span class="string">'R_SDNN'</span>, <span class="string">'R_SDSD'</span>, <span class="string">'NN50'</span>, <span class="string">'pNN50'</span>, <span class="string">'NN20'</span>, <span class="string">'pNN20'</span>,</span><br><span class="line">                                                <span class="string">'R_RMSSD'</span>,</span><br><span class="line">                                                <span class="string">'R_median'</span>, <span class="string">'R_NUM'</span>, <span class="string">'R_CVSD'</span>, <span class="string">'R_CV'</span>, <span class="string">'HR_mean'</span>, <span class="string">'HR_max'</span>, <span class="string">'HR_min'</span>,</span><br><span class="line">                                                <span class="string">'HR_std'</span>,</span><br><span class="line">                                                <span class="string">'LF'</span>, <span class="string">'HF'</span>, <span class="string">'LF_HF'</span>, <span class="string">'LFnu'</span>, <span class="string">'HFnu'</span>, <span class="string">'total'</span>, <span class="string">'VLF'</span>, <span class="string">'sd1'</span>, <span class="string">'sd2'</span>,</span><br><span class="line">                                                <span class="string">'sd2/sd1'</span>,</span><br><span class="line">                                                <span class="string">'csi10'</span>, <span class="string">'cvi'</span>, <span class="string">'Modified_CSI10'</span>, <span class="string">'apen'</span>, <span class="string">'spen'</span>, <span class="string">'lle'</span>, <span class="string">'sampen'</span>,</span><br><span class="line"></span><br><span class="line">                                                <span class="string">'5p_max'</span>, <span class="string">'5p_min'</span>, <span class="string">'5p_mean'</span>, <span class="string">'5p_median'</span>, <span class="string">'5p_SDNN'</span>, <span class="string">'5p_var'</span>,</span><br><span class="line">                                                <span class="string">'5p_Peaks'</span>, <span class="string">'5p_RMSSD'</span>, <span class="string">'5p_kurt'</span>, <span class="string">'5p_skew'</span>, <span class="string">'5p_wave_factor'</span>,</span><br><span class="line">                                                <span class="string">'5p_peak_factor'</span>, <span class="string">'5p_Impulse_factor'</span>, <span class="string">'5p_Margin_factor'</span>, <span class="string">'5p_RMS'</span>,</span><br><span class="line">                                                <span class="string">'5R_mean'</span>, <span class="string">'5R_SDNN'</span>, <span class="string">'5R_SDSD'</span>, <span class="string">'5NN50'</span>, <span class="string">'5pNN50'</span>, <span class="string">'5NN20'</span>, <span class="string">'5pNN20'</span>,</span><br><span class="line">                                                <span class="string">'5R_RMSSD'</span>,</span><br><span class="line">                                                <span class="string">'5R_median'</span>, <span class="string">'5R_NUM'</span>, <span class="string">'5R_CVSD'</span>, <span class="string">'5R_CV'</span>, <span class="string">'5HR_mean'</span>, <span class="string">'5HR_max'</span>,</span><br><span class="line">                                                <span class="string">'5HR_min'</span>, <span class="string">'5HR_std'</span>,</span><br><span class="line">                                                <span class="string">'5LF'</span>, <span class="string">'5HF'</span>, <span class="string">'5LF_HF'</span>, <span class="string">'5LFnu'</span>, <span class="string">'5HFnu'</span>, <span class="string">'5total'</span>, <span class="string">'5VLF'</span>, <span class="string">'5sd1'</span>,</span><br><span class="line">                                                <span class="string">'5sd2'</span>, <span class="string">'5sd2/sd1'</span>,</span><br><span class="line">                                                <span class="string">'5csi10'</span>, <span class="string">'5csi30'</span>, <span class="string">'5csi50'</span>, <span class="string">'5csi100'</span>, <span class="string">'5cvi'</span>,</span><br><span class="line">                                                <span class="string">'5Modified_CSI10'</span>, <span class="string">'Modified_CSI30'</span>, <span class="string">'5Modified_CSI50'</span>,</span><br><span class="line">                                                <span class="string">'5Modified_CSI100'</span>,</span><br><span class="line">                                                <span class="string">'5apen'</span>, <span class="string">'5spen'</span>, <span class="string">'5lle'</span>, <span class="string">'5sampen'</span></span><br><span class="line">                                                ])</span><br><span class="line"></span><br><span class="line">    feature.to_excel(<span class="string">'features_'</span> + <span class="string">'%s'</span> % text + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><p>提取ucddb库中的特征</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597915592110&di=d69e7743638ac17f56976caf4b0e83d1&imgtype=0&src=http%3A%2F%2Fdingyue.ws.126.net%2F2019%2F04%2F19%2F445680d311804acda2495d4ef5f31d88.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对UCDDB数据库进行特征提取&quot;&gt;&lt;a href=&quot;#对UCDDB数据库进行特征提取&quot; class=&quot;headerlink&quot; title=&quot;对UCDDB数据库进行特征提取&quot;&gt;&lt;/a&gt;对UCDDB数据库进行特征提取&lt;/h1&gt;&lt;p&gt;ucddb数据库&lt;/p&gt;
&lt;p&gt;fs
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>处理并统计两个数据库中的睡眠标签</title>
    <link href="https://esyyes.github.io/2020/08/19/sleep%20apnea%20and%20sleep%20stage/%E5%A4%84%E7%90%86%E5%B9%B6%E7%BB%9F%E8%AE%A1%E4%B8%A4%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E7%9D%A1%E7%9C%A0%E6%A0%87%E7%AD%BE/"/>
    <id>https://esyyes.github.io/2020/08/19/sleep%20apnea%20and%20sleep%20stage/%E5%A4%84%E7%90%86%E5%B9%B6%E7%BB%9F%E8%AE%A1%E4%B8%A4%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E7%9D%A1%E7%9C%A0%E6%A0%87%E7%AD%BE/</id>
    <published>2020-08-19T01:45:25.000Z</published>
    <updated>2020-08-19T01:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理并统计两个数据库中的睡眠标签"><a href="#处理并统计两个数据库中的睡眠标签" class="headerlink" title="处理并统计两个数据库中的睡眠标签"></a>处理并统计两个数据库中的睡眠标签</h1><h2 id="txt读取标签数据"><a href="#txt读取标签数据" class="headerlink" title="txt读取标签数据"></a>txt读取标签数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string">1. 将数据库进行切片</span></span><br><span class="line"><span class="string">2. 将数据库对应的标签进行处理</span></span><br><span class="line"><span class="string">3. 统计单独数据库的标签</span></span><br><span class="line"><span class="string">4. 对应到所有数据库中，每个分期的数据</span></span><br><span class="line"><span class="string">5. 进行统计不管分期为几期。直接统计为5期</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先对标签进行处理</span></span><br><span class="line"></span><br><span class="line">text_num = <span class="string">'06'</span></span><br><span class="line">dataFile = <span class="string">'F:/st_data/ucddb0'</span> + text_num + <span class="string">'.mat'</span></span><br><span class="line">data = scio.loadmat(dataFile)[<span class="string">'signal'</span>]</span><br><span class="line"></span><br><span class="line">txtFile = <span class="string">'F:/st_data/ucddb0'</span> + text_num + <span class="string">'_stage.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(txtFile) <span class="keyword">as</span> f:</span><br><span class="line">    lines = [x.rstrip() <span class="keyword">for</span> x <span class="keyword">in</span> f]</span><br><span class="line">print(len(data)/<span class="number">128</span>/<span class="number">30</span>)</span><br><span class="line">print(len(lines))</span><br></pre></td></tr></table></figure><p>数据长度不相等，相差为1的样子，所以直接舍弃后面部分的数据，差距就1</p><p>先看下数据的效果，查看了下数据没有缺失，标签少对应了一个，直接就省略后面的这个标签吧</p><h2 id="slpdb中的标签统计"><a href="#slpdb中的标签统计" class="headerlink" title="slpdb中的标签统计"></a>slpdb中的标签统计</h2><p>先查看slpdb数据库中的标签</p><ol><li>经处理后的标签数据，直接查看5期的标签</li></ol><p>数据位置F:/py/python-ECG信号处理/all_note</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 先查看slpdb数据库中的标签</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">num_N3 = <span class="number">0</span></span><br><span class="line">num_N2 = <span class="number">0</span></span><br><span class="line">num_N1 = <span class="number">0</span></span><br><span class="line">num_R = <span class="number">0</span></span><br><span class="line">num_W = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">    feature = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">    note = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">    N321RW = np.array(tag[<span class="string">'N321RW'</span>]).tolist()</span><br><span class="line">    <span class="comment"># 标签12345对应的是N321RW</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(tag)):</span><br><span class="line">        <span class="keyword">if</span> N321RW[j] == <span class="number">1</span>:</span><br><span class="line">            num_N3 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> N321RW[j] == <span class="number">2</span>:</span><br><span class="line">            num_N2 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> N321RW[j] == <span class="number">3</span>:</span><br><span class="line">            num_N1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> N321RW[j] == <span class="number">4</span>:</span><br><span class="line">            num_R += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num_W += <span class="number">1</span></span><br><span class="line">print(<span class="string">'total_tag'</span>)</span><br><span class="line">print(<span class="string">f'N3:<span class="subst">&#123;num_N3&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'N2:<span class="subst">&#123;num_N2&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'N1:<span class="subst">&#123;num_N1&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'r:<span class="subst">&#123;num_R&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'W:<span class="subst">&#123;num_W&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'zong:<span class="subst">&#123;num_N3+num_N2+num_N1+num_R+num_W&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>Data</strong></th><th><strong>N3</strong></th><th><strong>N2</strong></th><th><strong>N1</strong></th><th><strong>R</strong></th><th><strong>W</strong></th><th><strong>TOTAL</strong></th><th><strong>AHI</strong></th><th><strong>Seff(%)</strong></th></tr></thead><tbody><tr><td>slp01a</td><td>108</td><td>103</td><td>1</td><td>12</td><td>5</td><td>229</td><td>17.0</td><td>98</td></tr><tr><td>slp01b</td><td>0</td><td>119</td><td>25</td><td>25</td><td>180</td><td>349</td><td>22.3</td><td>48</td></tr><tr><td>slp02a</td><td>7</td><td>195</td><td>18</td><td>77</td><td>52</td><td>349</td><td>34.0</td><td>85</td></tr><tr><td>slp02b</td><td>0</td><td>114</td><td>14</td><td>29</td><td>102</td><td>259</td><td>22.2</td><td>61</td></tr><tr><td>slp03</td><td>78</td><td>307</td><td>105</td><td>74</td><td>114</td><td>678</td><td>43.0</td><td>83</td></tr><tr><td>slp04</td><td>33</td><td>440</td><td>58</td><td>23</td><td>155</td><td>709</td><td>59.8</td><td>78</td></tr><tr><td>slp14</td><td>42</td><td>126</td><td>183</td><td>36</td><td>316</td><td>703</td><td>30.7</td><td>55</td></tr><tr><td>slp16</td><td>24</td><td>181</td><td>107</td><td>65</td><td>306</td><td>683</td><td>53.1</td><td>55</td></tr><tr><td>slp32</td><td>60</td><td>159</td><td>27</td><td>0</td><td>383</td><td>629</td><td>22.1</td><td>39</td></tr><tr><td>slp37</td><td>0</td><td>586</td><td>17</td><td>11</td><td>73</td><td>687</td><td>100.8</td><td>89</td></tr><tr><td>slp41</td><td>13</td><td>218</td><td>230</td><td>90</td><td>218</td><td>769</td><td>60 [2]</td><td>72</td></tr><tr><td>slp45</td><td>103</td><td>399</td><td>54</td><td>81</td><td>112</td><td>749</td><td>5 [2]</td><td>85</td></tr><tr><td>slp48</td><td>2</td><td>269</td><td>238</td><td>31</td><td>209</td><td>749</td><td>46.8</td><td>72</td></tr><tr><td>slp59</td><td>80</td><td>92</td><td>105</td><td>35</td><td>135</td><td>447</td><td>55.3</td><td>70</td></tr><tr><td>slp60</td><td>0</td><td>49</td><td>321</td><td>31</td><td>276</td><td>677</td><td>59.2</td><td>59</td></tr><tr><td>slp61</td><td>103</td><td>326</td><td>88</td><td>73</td><td>119</td><td>709</td><td>41.2</td><td>83</td></tr><tr><td>slp66</td><td>5</td><td>116</td><td>141</td><td>0</td><td>167</td><td>429</td><td>65.5</td><td>61</td></tr><tr><td>slp67x</td><td>1</td><td>40</td><td>37</td><td>0</td><td>65</td><td>143</td><td>0.7</td><td>55</td></tr><tr><td>总</td><td>659</td><td>3839</td><td>1769</td><td>693</td><td>2987</td><td>9947</td><td></td><td></td></tr></tbody></table><h2 id="Ucddb数据库的睡眠阶段统计"><a href="#Ucddb数据库的睡眠阶段统计" class="headerlink" title="Ucddb数据库的睡眠阶段统计"></a>Ucddb数据库的睡眠阶段统计</h2><p>Ucddb数据库还是遵循rk规则，30s一个划分阶段</p><table><thead><tr><th>Study Number</th><th>Gender</th><th>PSG AHI</th><th>BMI</th><th>Age</th><th>Epworth Sleepiness Score</th><th>Sleep Efficiency (%)</th></tr></thead><tbody><tr><td>UCDDB002</td><td>M</td><td>23</td><td>33.9</td><td>54</td><td>16</td><td>84</td></tr><tr><td>UCDDB003</td><td>M</td><td>51</td><td>31.8</td><td>48</td><td>13</td><td>81</td></tr><tr><td>UCDDB005</td><td>M</td><td>13</td><td>32.4</td><td>65</td><td>19</td><td>63</td></tr><tr><td>UCDDB006</td><td>M</td><td>31</td><td>30.2</td><td>52</td><td>3</td><td>89</td></tr><tr><td>UCDDB007</td><td>M</td><td>12</td><td>25.1</td><td>47</td><td>15</td><td>90</td></tr><tr><td>UCDDB008</td><td>F</td><td>5</td><td>28.4</td><td>63</td><td>1</td><td>64</td></tr><tr><td>UCDDB009</td><td>M</td><td>12</td><td>31.3</td><td>52</td><td>19</td><td>80</td></tr><tr><td>UCDDB010</td><td>M</td><td>34</td><td>39.3</td><td>38</td><td>2</td><td>92</td></tr><tr><td>UCDDB011</td><td>M</td><td>8</td><td>28.6</td><td>51</td><td>8</td><td>60</td></tr><tr><td>UCDDB012</td><td>M</td><td>25</td><td>30.4</td><td>51</td><td>16</td><td>85</td></tr><tr><td>UCDDB013</td><td>F</td><td>16</td><td>34.2</td><td>62</td><td>10</td><td>61</td></tr><tr><td>UCDDB014</td><td>M</td><td>36</td><td>29</td><td>56</td><td>5</td><td>79</td></tr><tr><td>UCDDB015</td><td>M</td><td>6</td><td>29</td><td>28</td><td>2</td><td>77</td></tr><tr><td>UCDDB017</td><td>M</td><td>12</td><td>37.8</td><td>53</td><td>7</td><td>87</td></tr><tr><td>UCDDB018</td><td>M</td><td>2</td><td>26.3</td><td>35</td><td>10</td><td>60</td></tr><tr><td>UCDDB019</td><td>M</td><td>16</td><td>30.9</td><td>49</td><td>18</td><td>92</td></tr><tr><td>UCDDB020</td><td>M</td><td>15</td><td>34</td><td>52</td><td>11</td><td>78</td></tr><tr><td>UCDDB021</td><td>F</td><td>13</td><td>33.6</td><td>41</td><td>13</td><td>82</td></tr><tr><td>UCDDB022</td><td>M</td><td>7</td><td>29.3</td><td>34</td><td>4</td><td>58</td></tr><tr><td>UCDDB023</td><td>F</td><td>39</td><td>32.7</td><td>68</td><td>13</td><td>67</td></tr><tr><td>UCDDB024</td><td>M</td><td>24</td><td>33.8</td><td>54</td><td>19</td><td>83</td></tr><tr><td>UCDDB025</td><td>M</td><td>91</td><td>42.5</td><td>52</td><td>24</td><td>77</td></tr><tr><td>UCDDB026</td><td>M</td><td>14</td><td>27.4</td><td>49</td><td>9</td><td>87</td></tr><tr><td>UCDDB027</td><td>M</td><td>55</td><td>28.1</td><td>45</td><td>10</td><td>86</td></tr><tr><td>UCDDB028</td><td>M</td><td>46</td><td>30.1</td><td>50</td><td>13</td><td>68</td></tr></tbody></table><h1 id="ucddb数据处理"><a href="#ucddb数据处理" class="headerlink" title="ucddb数据处理"></a>ucddb数据处理</h1><ol><li>将数据进行切片划分为对应的30s和5min</li><li>划分出一个标签的数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件夹名字</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/st_data/SubjectDetails.xls'</span>)</span><br><span class="line">study_name = np.array(text_name[<span class="string">'Study Number'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> study_name:</span><br><span class="line">    <span class="comment"># 读取对应的ECG数据</span></span><br><span class="line">    dataFile = <span class="string">'F:/st_data/'</span> + h + <span class="string">'.mat'</span></span><br><span class="line">    data = scio.loadmat(dataFile)[<span class="string">'signal'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取对应的sleep数据</span></span><br><span class="line">    txtFile = <span class="string">'F:/st_data/'</span> + h + <span class="string">'_stage.txt'</span></span><br><span class="line">    <span class="keyword">with</span> open(txtFile) <span class="keyword">as</span> f:</span><br><span class="line">        lines = [x.rstrip() <span class="keyword">for</span> x <span class="keyword">in</span> f]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> int(len(data)/<span class="number">128</span>/<span class="number">30</span>) &gt;= len(lines):</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;int(len(data)/<span class="number">128</span>/<span class="number">30</span>) - len(lines)&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;h&#125;</span>数据的标签长度大于数据'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先对数据进行判断，看是否都是data的数据大于tag</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>数据的长短和标签查看，数据比标签长一点，因此标签可以直接不管，然后舍去最后的Data即可。</p><p>对标签进行处理划分5min钟的片段</p><ul><li>0 - Wake</li><li>1 - REM</li><li>2 - Stage 1</li><li>3 - Stage 2</li><li>4 - Stage 3</li><li>5 - Stage 4</li><li>6 - Artifact</li><li>7 - Indeterminate</li></ul><p>这个标签判断错误了！！！</p><h2 id="生成标签"><a href="#生成标签" class="headerlink" title="生成标签"></a>生成标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件夹名字</span></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/st_data/SubjectDetails.xls'</span>)</span><br><span class="line">study_name = np.array(text_name[<span class="string">'Study Number'</span>])</span><br><span class="line"><span class="comment"># - 0 - Wake</span></span><br><span class="line"><span class="comment"># - 1 - REM</span></span><br><span class="line"><span class="comment"># - 2 - Stage 1</span></span><br><span class="line"><span class="comment"># - 3 - Stage 2</span></span><br><span class="line"><span class="comment"># - 4 - Stage 3</span></span><br><span class="line"><span class="comment"># - 5 - Stage 4</span></span><br><span class="line"><span class="comment"># - 6 - Artifact</span></span><br><span class="line"><span class="comment"># - 7 - Indeterminate</span></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> study_name:</span><br><span class="line">    <span class="comment"># 读取对应的ECG数据</span></span><br><span class="line">    dataFile = <span class="string">'F:/st_data/'</span> + h + <span class="string">'.mat'</span></span><br><span class="line">    data = scio.loadmat(dataFile)[<span class="string">'signal'</span>]</span><br><span class="line">    <span class="comment"># 读取对应的sleep数据</span></span><br><span class="line">    txtFile = <span class="string">'F:/st_data/'</span> + h + <span class="string">'_stage.txt'</span></span><br><span class="line">    <span class="keyword">with</span> open(txtFile) <span class="keyword">as</span> f:</span><br><span class="line">        lines = [x.rstrip() <span class="keyword">for</span> x <span class="keyword">in</span> f]</span><br><span class="line">    <span class="comment"># 将stage数据进行5min的切片</span></span><br><span class="line">    tag1 = []</span><br><span class="line">    tag2 = []</span><br><span class="line">    tag3 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, int(len(lines)<span class="number">-5</span>)):</span><br><span class="line">        <span class="keyword">if</span> (lines[i] == <span class="string">'4'</span>) <span class="keyword">or</span> (lines[i] == <span class="string">'5'</span>):</span><br><span class="line">            tag1.append(<span class="number">1</span>)</span><br><span class="line">            tag2.append(<span class="number">1</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> lines[i][<span class="number">0</span>] == <span class="string">'3'</span>:</span><br><span class="line">            tag1.append(<span class="number">2</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> lines[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">            tag1.append(<span class="number">3</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> lines[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">            tag1.append(<span class="number">4</span>)</span><br><span class="line">            tag2.append(<span class="number">3</span>)</span><br><span class="line">            tag3.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag1.append(<span class="number">5</span>)</span><br><span class="line">            tag2.append(<span class="number">4</span>)</span><br><span class="line">            tag3.append(<span class="number">3</span>)</span><br><span class="line">    label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">    label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">    label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line">    label = pd.concat([label1, label2, label3], axis=<span class="number">1</span>)</span><br><span class="line">    label.to_excel(<span class="string">'note_'</span> + <span class="string">'%s'</span> % h + <span class="string">'.xlsx'</span>)</span><br></pre></td></tr></table></figure><h2 id="ucddb中的睡眠阶段统计"><a href="#ucddb中的睡眠阶段统计" class="headerlink" title="ucddb中的睡眠阶段统计"></a>ucddb中的睡眠阶段统计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">text_name = pd.read_excel(<span class="string">'F:/st_data/SubjectDetails.xls'</span>)</span><br><span class="line">study_name = np.array(text_name[<span class="string">'Study Number'</span>])</span><br><span class="line"></span><br><span class="line">num_N3 = <span class="number">0</span></span><br><span class="line">num_N2 = <span class="number">0</span></span><br><span class="line">num_N1 = <span class="number">0</span></span><br><span class="line">num_R = <span class="number">0</span></span><br><span class="line">num_W = <span class="number">0</span></span><br><span class="line">all_N3 = []</span><br><span class="line">all_N2 = []</span><br><span class="line">all_N1 = []</span><br><span class="line">all_NR = []</span><br><span class="line">all_NW = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> study_name:</span><br><span class="line">    note = pd.read_excel(<span class="string">'F:/py/py_sleep stage and apnea/data'</span> + <span class="string">'/note_'</span> + <span class="string">'%s'</span> % h + <span class="string">'.xlsx'</span>)</span><br><span class="line">    tag = pd.get_dummies(note.iloc[:, <span class="number">1</span>:])</span><br><span class="line">    N321RW = np.array(tag[<span class="string">'N321RW'</span>]).tolist()</span><br><span class="line">    <span class="comment"># 标签12345对应的是N321RW</span></span><br><span class="line">    N3 = []</span><br><span class="line">    N2 = []</span><br><span class="line">    N1 = []</span><br><span class="line">    NR = []</span><br><span class="line">    NW = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(tag)):</span><br><span class="line">        <span class="keyword">if</span> N321RW[j] == <span class="number">1</span>:</span><br><span class="line">            num_N3 += <span class="number">1</span></span><br><span class="line">            N3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> N321RW[j] == <span class="number">2</span>:</span><br><span class="line">            num_N2 += <span class="number">1</span></span><br><span class="line">            N2.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> N321RW[j] == <span class="number">3</span>:</span><br><span class="line">            num_N1 += <span class="number">1</span></span><br><span class="line">            N1.append(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> N321RW[j] == <span class="number">4</span>:</span><br><span class="line">            num_R += <span class="number">1</span></span><br><span class="line">            NR.append(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num_W += <span class="number">1</span></span><br><span class="line">            NW.append(<span class="number">5</span>)</span><br><span class="line">    all_N3.append(len(N3))</span><br><span class="line">    all_N2.append(len(N2))</span><br><span class="line">    all_N1.append(len(N1))</span><br><span class="line">    all_NR.append(len(NR))</span><br><span class="line">    all_NW.append(len(NW))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stage_3 = pd.DataFrame(all_N3, columns=&#123;<span class="string">'N3'</span>&#125;)</span><br><span class="line">stage_2 = pd.DataFrame(all_N2, columns=&#123;<span class="string">'N2'</span>&#125;)</span><br><span class="line">stage_1 = pd.DataFrame(all_N1, columns=&#123;<span class="string">'N1'</span>&#125;)</span><br><span class="line">stage_R = pd.DataFrame(all_NR, columns=&#123;<span class="string">'R'</span>&#125;)</span><br><span class="line">stage_W = pd.DataFrame(all_NW, columns=&#123;<span class="string">'W'</span>&#125;)</span><br><span class="line">all_stage = pd.concat([stage_3, stage_2, stage_1, stage_R, stage_W], axis=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'total_tag'</span>)</span><br><span class="line">print(<span class="string">f'N3:<span class="subst">&#123;num_N3&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'N2:<span class="subst">&#123;num_N2&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'N1:<span class="subst">&#123;num_N1&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'r:<span class="subst">&#123;num_R&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'W:<span class="subst">&#123;num_W&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'zong:<span class="subst">&#123;num_N3+num_N2+num_N1+num_R+num_W&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;all_stage&#125;</span>'</span>)</span><br><span class="line">all_stage.to_excel(<span class="string">'ucddb_sleep_stages.xlsx'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>Study</th><th><strong>N3</strong></th><th><strong>N2</strong></th><th><strong>N1</strong></th><th><strong>R</strong></th><th><strong>W</strong></th><th><strong>total</strong></th><th>PSG AHI</th><th>Seff (%)</th></tr></thead><tbody><tr><td>UCDDB002</td><td>87</td><td>172</td><td>213</td><td>155</td><td>111</td><td>738</td><td>23</td><td>85</td></tr><tr><td>UCDDB003</td><td>164</td><td>254</td><td>106</td><td>190</td><td>158</td><td>872</td><td>51</td><td>82</td></tr><tr><td>UCDDB005</td><td>52</td><td>251</td><td>89</td><td>125</td><td>299</td><td>816</td><td>13</td><td>63</td></tr><tr><td>UCDDB006</td><td>248</td><td>93</td><td>181</td><td>192</td><td>84</td><td>798</td><td>31</td><td>89</td></tr><tr><td>UCDDB007</td><td>127</td><td>414</td><td>54</td><td>132</td><td>76</td><td>803</td><td>12</td><td>91</td></tr><tr><td>UCDDB008</td><td>83</td><td>302</td><td>76</td><td>33</td><td>264</td><td>758</td><td>5</td><td>65</td></tr><tr><td>UCDDB009</td><td>141</td><td>244</td><td>261</td><td>86</td><td>183</td><td>915</td><td>12</td><td>80</td></tr><tr><td>UCDDB010</td><td>79</td><td>464</td><td>119</td><td>168</td><td>67</td><td>897</td><td>34</td><td>93</td></tr><tr><td>UCDDB011</td><td>118</td><td>295</td><td>89</td><td>42</td><td>346</td><td>890</td><td>8</td><td>61</td></tr><tr><td>UCDDB012</td><td>146</td><td>337</td><td>58</td><td>194</td><td>119</td><td>854</td><td>25</td><td>86</td></tr><tr><td>UCDDB013</td><td>111</td><td>173</td><td>143</td><td>67</td><td>307</td><td>801</td><td>16</td><td>62</td></tr><tr><td>UCDDB014</td><td>0</td><td>267</td><td>260</td><td>82</td><td>155</td><td>764</td><td>36</td><td>80</td></tr><tr><td>UCDDB015</td><td>146</td><td>294</td><td>200</td><td>64</td><td>202</td><td>906</td><td>6</td><td>78</td></tr><tr><td>UCDDB017</td><td>65</td><td>392</td><td>36</td><td>193</td><td>93</td><td>779</td><td>12</td><td>88</td></tr><tr><td>UCDDB018</td><td>137</td><td>280</td><td>58</td><td>19</td><td>318</td><td>812</td><td>2</td><td>61</td></tr><tr><td>UCDDB019</td><td>196</td><td>352</td><td>45</td><td>186</td><td>63</td><td>842</td><td>16</td><td>93</td></tr><tr><td>UCDDB020</td><td>64</td><td>155</td><td>205</td><td>156</td><td>162</td><td>742</td><td>15</td><td>78</td></tr><tr><td>UCDDB021</td><td>127</td><td>370</td><td>122</td><td>128</td><td>156</td><td>903</td><td>13</td><td>83</td></tr><tr><td>UCDDB022</td><td>131</td><td>215</td><td>70</td><td>44</td><td>317</td><td>777</td><td>7</td><td>59</td></tr><tr><td>UCDDB023</td><td>69</td><td>227</td><td>226</td><td>57</td><td>272</td><td>851</td><td>39</td><td>68</td></tr><tr><td>UCDDB024</td><td>137</td><td>331</td><td>113</td><td>168</td><td>149</td><td>898</td><td>24</td><td>83</td></tr><tr><td>UCDDB025</td><td>9</td><td>124</td><td>368</td><td>46</td><td>154</td><td>701</td><td>91</td><td>78</td></tr><tr><td>UCDDB026</td><td>139</td><td>241</td><td>100</td><td>243</td><td>105</td><td>828</td><td>14</td><td>87</td></tr><tr><td>UCDDB027</td><td>35</td><td>530</td><td>62</td><td>139</td><td>117</td><td>883</td><td>55</td><td>87</td></tr><tr><td>UCDDB028</td><td>52</td><td>205</td><td>139</td><td>96</td><td>219</td><td>711</td><td>46</td><td>69</td></tr><tr><td>total</td><td>2663</td><td>6982</td><td>3393</td><td>3005</td><td>4496</td><td>20539</td><td></td><td></td></tr></tbody></table><p>ok标签和seff都对应完全，下一步生成数据</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597838747688&di=42ef860362eac090b417b855eb6703c2&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3Ddb899af0a351f3dec3b2b96ca4eff0ec%2F3d0731328744ebf85cd33605d5f9d72a6159a7d6.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;处理并统计两个数据库中的睡眠标签&quot;&gt;&lt;a href=&quot;#处理并统计两个数据库中的睡眠标签&quot; class=&quot;headerlink&quot; title=&quot;处理并统计两个数据库中的睡眠标签&quot;&gt;&lt;/a&gt;处理并统计两个数据库中的睡眠标签&lt;/h1&gt;&lt;h2 id=&quot;txt读取标签数据
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>edf文件中的数据读取</title>
    <link href="https://esyyes.github.io/2020/08/18/sleep%20apnea%20and%20sleep%20stage/edf%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/08/18/sleep%20apnea%20and%20sleep%20stage/edf%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/</id>
    <published>2020-08-18T02:35:48.000Z</published>
    <updated>2020-08-18T02:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="edf文件中的数据读取"><a href="#edf文件中的数据读取" class="headerlink" title="edf文件中的数据读取"></a>edf文件中的数据读取</h1><h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><p>St. Vincent’s University Hospital / University College Dublin Sleep Apnea Database</p><p>链接：<a href="https://www.physionet.org/content/ucddb/1.0.0/" target="_blank" rel="noopener">https://www.physionet.org/content/ucddb/1.0.0/</a></p><p>该数据库包含来自怀疑睡眠呼吸障碍的成年受试者的25张整夜多导睡眠图，同时显示三通道动态心电图。</p><p>介绍：</p><p> 在6个月的时间段（9月2日至2月03日）中，从都柏林圣文森特大学医院的睡眠障碍诊所转诊的患者中随机选择受试者，以诊断阻塞性睡眠呼吸暂停，中枢性睡眠呼吸暂停或原发性打nor。受试者必须年满18岁，没有已知的心脏病，自主神经功能障碍，并且不服用会干扰心率的药物。选择了<strong>二十五个</strong>受试者（21M，4F）（年龄：50±10岁，范围28-68岁； BMI：31.6±4.0 kg /m²，范围25.1-42.5 kg /m²； AHI：24.1±20.3，范围1.7 -90.9） </p><p>使用Jaeger-Toennies系统（德国Erich Jaeger GmbH）获得多导睡眠图。记录的信号包括：脑电图（C3-A2），脑电图（C4-A1），左眼电图，右眼电图，mentalmental EMG，<strong>ECG（改良的V2导联）</strong>，口鼻气流（热敏电阻），胸腔运动，腹部运动（未校准的应变）表，氧气饱和度（手指脉搏血氧仪），打（气管麦克风）和身体位置。以<strong>.rec后缀命名的文件包含EDF格式的这些信号</strong>。</p><p>使用Reynolds Lifecard CF系统（英国Reynolds Medical）记录三通道动态心电图（V5，CC5，V5R）；以_<strong>lifecard.edf后缀命名的文件</strong>包含这些EDF格式的ECG信号。录制日期和时间不可用。在ucddb002记录中，仅记录了两个不同的ECG信号。第二个ECG信号也用作第三个信号。</p><p>呼吸事件（阻塞性，中枢性呼吸暂停，呼吸不足和呼吸不足以及周期性呼吸发作）的发作时间和持续时间由同一位睡眠技术人员注释（请参见_respevt.txt文件）。这些文件中使用的术语包括：</p><ul><li>第一栏-发生时间（一天中的时间）</li><li>第二栏<ul><li>HYP-呼吸不足</li><li>C-中环</li><li>O-阻塞</li><li>M-混合</li></ul></li><li>第三列-周期性呼吸（PB）/凯恩斯·斯托克斯（CS）</li><li>第9列和第10列-心动过缓/心动过速</li></ul><p>rec和edf文件都包含edf数据，只需要读取一个即可。</p><p>edf格式下文件貌似损坏无法读取</p><p>读取rec格式文件，edf文件是一个上下波形的等距离的文件</p><p>需要采用rec中的ecg文件</p><h2 id="rec格式数据读取"><a href="#rec格式数据读取" class="headerlink" title="rec格式数据读取"></a>rec格式数据读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'ucddb'</span>, <span class="string">'UCD Sleep Apnea Database'</span>]</span><br></pre></td></tr></table></figure><p>数据库数据</p><p> <a href="https://blog.csdn.net/u013071075/article/details/83011020" target="_blank" rel="noopener">https://blog.csdn.net/u013071075/article/details/83011020</a> </p><p>因此需要用matlab去提取ucddb中的数据，所以第一步是用matlab安装wfdb</p><h2 id="wfdb数据库的安装"><a href="#wfdb数据库的安装" class="headerlink" title="wfdb数据库的安装"></a>wfdb数据库的安装</h2><ol><li><p>wfdb安装</p><p><a href="https://blog.csdn.net/gyx1549624673/article/details/104479506" target="_blank" rel="noopener">https://blog.csdn.net/gyx1549624673/article/details/104479506</a> </p></li><li><p>测试</p><p>可以直接运行了</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clc</span><br><span class="line">clear</span><br><span class="line">[signal, Fs, tm] = rdsamp(<span class="string">'ucddb002.rec'</span>,[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure></li></ol><p>已经安装完全，马上将其转换为csv</p><p>数据长度为2876160，采样率为128，遵循RK规则，还有根据数据的stage可得知是30s一个标签</p><p>因此直接将其转换为python可读数据即可</p><p>matlab将数据转换为dat或者txt。。。转换为mat形式</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clc</span><br><span class="line">clear</span><br><span class="line">text = <span class="string">'ucddb028.rec'</span>;</span><br><span class="line">[signal, Fs, tm] = rdsamp(text, [<span class="number">6</span>]);</span><br><span class="line">save(<span class="string">'ucddb028.mat'</span>,<span class="string">'signal'</span>)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>在python中读取mat文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/8/12</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import wfdb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 利用wfdb读取slpdb中的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test = 'slp14'</span></span><br><span class="line"><span class="comment"># # wfdb读取dat文件</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, channels=[0])</span></span><br><span class="line"><span class="comment"># # 读取文件开头</span></span><br><span class="line"><span class="comment"># records = wfdb.rdheader('F:/slpdb_data/mitdata' + '/%s' % test)</span></span><br><span class="line"><span class="comment"># # 读取ecg文件</span></span><br><span class="line"><span class="comment"># annotation = wfdb.rdann('F:/slpdb_data/mitdata' + '/%s' % test, 'ecg')</span></span><br><span class="line"><span class="comment"># # 读取st文件</span></span><br><span class="line"><span class="comment"># annotation1 = wfdb.rdann('F:/slpdb_data/mitdata' + '/%s' % test, 'st')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edf = wfdb.rdsamp('F:/st_data/ucddb002_lifecard.edf')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edf = wfdb.rdsamp('F:/st_data/ucddb002.rec', channels=['ECG'])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataFile = <span class="string">'F:/st_data/ucddb003.mat'</span></span><br><span class="line">data = scio.loadmat(dataFile)</span><br><span class="line">print(data[<span class="string">'signal'</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>ok。这个数据库的文件就可以全部读取了</p><p>下一步就是标签和数据的对应</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597811322096&di=de66c53a6a1d441ea45ab582677c1aec&imgtype=0&src=http%3A%2F%2F00.minipic.eastday.com%2F20170119%2F20170119002836_4b710c1d6eb21df94ff63e1c844e9eed_3.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;edf文件中的数据读取&quot;&gt;&lt;a href=&quot;#edf文件中的数据读取&quot; class=&quot;headerlink&quot; title=&quot;edf文件中的数据读取&quot;&gt;&lt;/a&gt;edf文件中的数据读取&lt;/h1&gt;&lt;h2 id=&quot;数据库介绍&quot;&gt;&lt;a href=&quot;#数据库介绍&quot; class
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>样本数据的生成</title>
    <link href="https://esyyes.github.io/2020/07/27/HMM/%E6%A0%B7%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E6%88%90/"/>
    <id>https://esyyes.github.io/2020/07/27/HMM/%E6%A0%B7%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E6%88%90/</id>
    <published>2020-07-27T08:14:56.000Z</published>
    <updated>2020-07-27T08:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="样本数据的生成"><a href="#样本数据的生成" class="headerlink" title="样本数据的生成"></a>样本数据的生成</h1><p>样本数据只有222个，其中不活跃状态的197个，一般状态的18个，活跃状态的7个，样本数据太不活跃，所以需要将样本进行生成。</p><p>初步打算：不活跃的不变</p><p>一般状态的增加180个，</p><p>活跃状态的增加190个</p><p>利用random生成</p><p><a href="https://www.jb51.net/article/152731.htm" target="_blank" rel="noopener">https://www.jb51.net/article/152731.htm</a></p><p>标注差在进行变换，所以分类个数永远不是一个定值</p><p>先随机生成数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 转换列表</span></span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">200</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">3</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">15</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">35</span>, <span class="number">120</span>))</span><br></pre></td></tr></table></figure><p>状态查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_y1[j])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line">Y_Z = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; np.array(list_y1).std():</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line"><span class="number">197</span>:<span class="number">273</span>:<span class="number">102</span></span><br></pre></td></tr></table></figure><p>基于原本的数据看下规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将Y_Z变成字典形式</span></span><br><span class="line">xuhao = np.arange(len(Y_Z)).tolist()</span><br><span class="line">dict_Y_Z = dict(zip(xuhao, Y_Z))</span><br><span class="line">sort_dict = sorted(zip(dict_Y_Z.values(), dict_Y_Z.keys()))</span><br></pre></td></tr></table></figure><p>对原本的数据进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">0</span>, <span class="number">217</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">218</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">219</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">220</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">221</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">17</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">33</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">37</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">44</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">70</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">75</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">85</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">91</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">98</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">103</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">107</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">142</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">146</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">152</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">179</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">181</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">209</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">54</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">129</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">144</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">158</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">172</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">198</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">206</span>)</span><br></pre></td></tr></table></figure><p>查看下对应状态下的x1,x2,x3,x4的变化</p><p>数据10</p><table><thead><tr><th>11</th><th>1</th><th>2</th><th>799</th><th>520</th><th>3</th><th>3</th><th>3</th><th>37</th></tr></thead><tbody><tr><td>11</td><td>2</td><td>4</td><td>645</td><td>533</td><td>5</td><td>1</td><td></td><td></td></tr><tr><td>11</td><td>3</td><td>1</td><td>659</td><td>651</td><td>2</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>4</td><td>0</td><td>989</td><td>916</td><td>3</td><td>1</td><td></td><td></td></tr><tr><td>11</td><td>5</td><td>5</td><td>817</td><td>442</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>11</td><td>6</td><td>6</td><td>753</td><td>350</td><td>1</td><td>4</td><td></td><td></td></tr><tr><td>11</td><td>7</td><td>2</td><td>745</td><td>626</td><td>1</td><td>5</td><td></td><td></td></tr><tr><td>11</td><td>8</td><td>3</td><td>807</td><td>503</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>9</td><td>3</td><td>774</td><td>304</td><td>2</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>10</td><td>3</td><td>1265</td><td>294</td><td>0</td><td>4</td><td></td><td></td></tr><tr><td>11</td><td>11</td><td>5</td><td>668</td><td>36</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>12</td><td>4</td><td>1075</td><td>472</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>11</td><td>13</td><td>5</td><td>1420</td><td>372</td><td>1</td><td>3</td><td></td><td></td></tr><tr><td>11</td><td>14</td><td>4</td><td>912</td><td>320</td><td>1</td><td>4</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>18</th><th>1</th><th>3</th><th>26</th><th>144</th><th>2</th><th>4</th><th>2</th><th>18</th></tr></thead><tbody><tr><td>18</td><td>2</td><td>4</td><td>24</td><td>95</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>3</td><td>2</td><td>16</td><td>107</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>18</td><td>4</td><td>5</td><td>14</td><td>76</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>5</td><td>7</td><td>32</td><td>398</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>18</td><td>6</td><td>4</td><td>11</td><td>91</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>7</td><td>1</td><td>13</td><td>35</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>8</td><td>1</td><td>29</td><td>144</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>18</td><td>9</td><td>4</td><td>12</td><td>100</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>18</td><td>10</td><td>4</td><td>12</td><td>65</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>18</td><td>11</td><td>3</td><td>19</td><td>41</td><td>0</td><td>4</td><td></td><td></td></tr><tr><td>18</td><td>12</td><td>2</td><td>10</td><td>47</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>18</td><td>13</td><td>3</td><td>46</td><td>46</td><td>1</td><td>3</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>34</th><th>1</th><th>1</th><th>5757</th><th>3368</th><th>5</th><th>0</th><th>1</th><th>99</th></tr></thead><tbody><tr><td>34</td><td>2</td><td>1</td><td>8469</td><td>4823</td><td>4</td><td>0</td><td></td><td></td></tr><tr><td>34</td><td>3</td><td>1</td><td>8290</td><td>5837</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>4</td><td>3</td><td>4158</td><td>5776</td><td>2</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>5</td><td>2</td><td>2713</td><td>10177</td><td>6</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>6</td><td>2</td><td>2351</td><td>6625</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>7</td><td>3</td><td>1679</td><td>3366</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>8</td><td>1</td><td>1847</td><td>3648</td><td>5</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>9</td><td>2</td><td>3032</td><td>3022</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>10</td><td>8</td><td>2006</td><td>2113</td><td>3</td><td>3</td><td></td><td></td></tr><tr><td>34</td><td>11</td><td>4</td><td>1700</td><td>2165</td><td>2</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>12</td><td>8</td><td>1179</td><td>1162</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>34</td><td>13</td><td>6</td><td>1970</td><td>1484</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>14</td><td>4</td><td>1828</td><td>1784</td><td>2</td><td>2</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>38</th><th>1</th><th>2</th><th>891</th><th>5400</th><th>1</th><th>1</th><th>0</th><th>99</th></tr></thead><tbody><tr><td>38</td><td>2</td><td>6</td><td>281</td><td>447</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>38</td><td>3</td><td>2</td><td>316</td><td>745</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>38</td><td>4</td><td>9</td><td>737</td><td>630</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>38</td><td>5</td><td>4</td><td>191</td><td>467</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>6</td><td>1</td><td>250</td><td>510</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>38</td><td>7</td><td>1</td><td>202</td><td>487</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>8</td><td>0</td><td>322</td><td>530</td><td>1</td><td>0</td><td></td><td></td></tr><tr><td>38</td><td>9</td><td>7</td><td>352</td><td>584</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>38</td><td>10</td><td>6</td><td>250</td><td>416</td><td>1</td><td>4</td><td></td><td></td></tr><tr><td>38</td><td>11</td><td>3</td><td>364</td><td>418</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>12</td><td>1</td><td>382</td><td>632</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>13</td><td>10</td><td>448</td><td>482</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>38</td><td>14</td><td>10</td><td>461</td><td>1009</td><td>1</td><td>4</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>45</th><th>1</th><th>2</th><th>2901</th><th>26</th><th>0</th><th>2</th><th>2</th><th>19</th></tr></thead><tbody><tr><td>45</td><td>2</td><td>0</td><td>4919</td><td>20</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>45</td><td>3</td><td>1</td><td>4489</td><td>21</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>4</td><td>3</td><td>1614</td><td>20</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>5</td><td>3</td><td>442</td><td>13</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>45</td><td>6</td><td>2</td><td>703</td><td>13</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>7</td><td>3</td><td>130</td><td>13</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>8</td><td>1</td><td>108</td><td>15</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>45</td><td>9</td><td>2</td><td>215</td><td>14</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>45</td><td>10</td><td>2</td><td>141</td><td>16</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>45</td><td>11</td><td>3</td><td>476</td><td>17</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>12</td><td>6</td><td>230</td><td>5</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>45</td><td>13</td><td>2</td><td>378</td><td>18</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>45</td><td>14</td><td>1</td><td>377</td><td>13</td><td>0</td><td>0</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>71</th><th>1</th><th>1</th><th>29</th><th>17</th><th>1</th><th>1</th><th>0</th><th>18</th></tr></thead><tbody><tr><td>71</td><td>2</td><td>0</td><td>4</td><td>9</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>3</td><td>0</td><td>0</td><td>12</td><td>1</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>4</td><td>0</td><td>449</td><td>7</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>5</td><td>3</td><td>122</td><td>12</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>6</td><td>0</td><td>67</td><td>10</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>7</td><td>2</td><td>57</td><td>8</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>71</td><td>8</td><td>1</td><td>9</td><td>10</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>9</td><td>1</td><td>2</td><td>9</td><td>2</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>10</td><td>2</td><td>280</td><td>8</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>11</td><td>4</td><td>128</td><td>7</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>12</td><td>1</td><td>35</td><td>8</td><td>2</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>13</td><td>1</td><td>143</td><td>10</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>14</td><td>0</td><td>181</td><td>12</td><td>0</td><td>0</td><td></td><td></td></tr></tbody></table><p>状态为活跃时</p><table><thead><tr><th>207</th><th>1</th><th>57</th><th>761</th><th>4429</th><th>0</th><th>42</th><th>0</th><th>3</th></tr></thead><tbody><tr><td>207</td><td>2</td><td>85</td><td>109</td><td>497</td><td>0</td><td>68</td><td></td><td></td></tr><tr><td>207</td><td>3</td><td>78</td><td>119</td><td>439</td><td>0</td><td>71</td><td></td><td></td></tr><tr><td>207</td><td>4</td><td>96</td><td>173</td><td>447</td><td>0</td><td>83</td><td></td><td></td></tr><tr><td>207</td><td>5</td><td>86</td><td>152</td><td>430</td><td>0</td><td>70</td><td></td><td></td></tr><tr><td>207</td><td>6</td><td>71</td><td>268</td><td>461</td><td>0</td><td>59</td><td></td><td></td></tr><tr><td>207</td><td>7</td><td>75</td><td>189</td><td>712</td><td>1</td><td>57</td><td></td><td></td></tr><tr><td>207</td><td>8</td><td>94</td><td>208</td><td>982</td><td>0</td><td>82</td><td></td><td></td></tr><tr><td>207</td><td>9</td><td>54</td><td>153</td><td>932</td><td>0</td><td>63</td><td></td><td></td></tr><tr><td>207</td><td>10</td><td>68</td><td>156</td><td>991</td><td>0</td><td>51</td><td></td><td></td></tr><tr><td>207</td><td>11</td><td>103</td><td>174</td><td>949</td><td>0</td><td>89</td><td></td><td></td></tr><tr><td>207</td><td>12</td><td>111</td><td>138</td><td>616</td><td>0</td><td>90</td><td></td><td></td></tr><tr><td>207</td><td>13</td><td>111</td><td>185</td><td>867</td><td>0</td><td>85</td><td></td><td></td></tr><tr><td>207</td><td>14</td><td>44</td><td>343</td><td>358</td><td>0</td><td>54</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>173</th><th>1</th><th>6</th><th>3645</th><th>41</th><th>0</th><th>4</th><th>1</th><th>25</th></tr></thead><tbody><tr><td>173</td><td>2</td><td>10</td><td>6873</td><td>39</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>173</td><td>3</td><td>8</td><td>6508</td><td>39</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>173</td><td>4</td><td>21</td><td>1906</td><td>62</td><td>1</td><td>13</td><td></td><td></td></tr><tr><td>173</td><td>5</td><td>20</td><td>103</td><td>44</td><td>0</td><td>12</td><td></td><td></td></tr><tr><td>173</td><td>6</td><td>19</td><td>102</td><td>41</td><td>0</td><td>14</td><td></td><td></td></tr><tr><td>173</td><td>7</td><td>12</td><td>91</td><td>55</td><td>0</td><td>9</td><td></td><td></td></tr><tr><td>173</td><td>8</td><td>12</td><td>81</td><td>137</td><td>1</td><td>11</td><td></td><td></td></tr><tr><td>173</td><td>9</td><td>20</td><td>869</td><td>217</td><td>1</td><td>13</td><td></td><td></td></tr><tr><td>173</td><td>10</td><td>10</td><td>107</td><td>136</td><td>0</td><td>6</td><td></td><td></td></tr><tr><td>173</td><td>11</td><td>18</td><td>117</td><td>90</td><td>0</td><td>12</td><td></td><td></td></tr><tr><td>173</td><td>12</td><td>14</td><td>133</td><td>458</td><td>1</td><td>10</td><td></td><td></td></tr><tr><td>173</td><td>13</td><td>15</td><td>878</td><td>2711</td><td>1</td><td>9</td><td></td><td></td></tr><tr><td>173</td><td>14</td><td>16</td><td>247</td><td>197</td><td>0</td><td>13</td><td></td><td></td></tr></tbody></table><p>生成数据+在原有基础上生成数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/27</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 转换列表</span></span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">list_i1 = [int(list_data[i][<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_t1 = [int(list_data[i][<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x1 = [int(list_data[i][<span class="number">3</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x2 = [int(list_data[i][<span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x3 = [int(list_data[i][<span class="number">5</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x4 = [int(list_data[i][<span class="number">6</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line">list_z1 = [int(list_data[i][<span class="number">7</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_z2 = [int(list_data[i][<span class="number">8</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">200</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">3</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">80</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">15</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">35</span>, <span class="number">120</span>))</span><br><span class="line"></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_y1[j])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line">Y_Z = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; np.array(list_y1).std():</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Y_Z变成字典形式</span></span><br><span class="line">dict_Y_Z = dict(zip(np.arange(len(Y_Z)).tolist(), Y_Z))</span><br><span class="line">sort_dict = sorted(zip(dict_Y_Z.values(), dict_Y_Z.keys()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">    <span class="keyword">if</span> list_y1[i] &lt; <span class="number">1</span>:</span><br><span class="line">        list_x1.append(random.randint(<span class="number">1</span>, <span class="number">2000</span>))</span><br><span class="line">        list_x2.append(random.randint(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">        list_x3.append(random.randint(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        list_x4.append(random.randint(<span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_y1[i] &lt; np.array(list_y1).std():</span><br><span class="line">        list_x1.append(random.randint(<span class="number">200</span>, <span class="number">5000</span>))</span><br><span class="line">        list_x2.append(random.randint(<span class="number">200</span>, <span class="number">2000</span>))</span><br><span class="line">        list_x3.append(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">        list_x4.append(random.randint(<span class="number">5</span>, <span class="number">20</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list_x1.append(random.randint(<span class="number">2000</span>, <span class="number">10000</span>))</span><br><span class="line">        list_x2.append(random.randint(<span class="number">1000</span>, <span class="number">5000</span>))</span><br><span class="line">        list_x3.append(random.randint(<span class="number">2</span>, <span class="number">30</span>))</span><br><span class="line">        list_x4.append(random.randint(<span class="number">10</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">14</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> Y_Z[int(i/<span class="number">14</span>)] == <span class="number">0</span>:</span><br><span class="line">            list_z1.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">            list_z2.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">        <span class="keyword">elif</span> Y_Z[int(i/<span class="number">14</span>)] == <span class="number">1</span>:</span><br><span class="line">            list_z1.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">            list_z2.append(random.randint(<span class="number">5</span>, <span class="number">100</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_z1.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">            list_z2.append(random.randint(<span class="number">50</span>, <span class="number">500</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list_z1.append(<span class="number">0</span>)</span><br><span class="line">        list_z2.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">num_i1 = <span class="number">231</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>), int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            list_i1.append(num_i1)</span><br><span class="line">    num_i1 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>), int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">            list_t1.append(k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df_i1 = pd.DataFrame(list_i1, columns=[<span class="string">'i'</span>])</span><br><span class="line">df_t1 = pd.DataFrame(list_t1, columns=[<span class="string">'t'</span>])</span><br><span class="line"></span><br><span class="line">df_y1 = pd.DataFrame(list_y1, columns=[<span class="string">'y'</span>])</span><br><span class="line">df_x1 = pd.DataFrame(list_x1, columns=[<span class="string">'x1'</span>])</span><br><span class="line">df_x2 = pd.DataFrame(list_x2, columns=[<span class="string">'x2'</span>])</span><br><span class="line">df_x3 = pd.DataFrame(list_x3, columns=[<span class="string">'x3'</span>])</span><br><span class="line">df_x4 = pd.DataFrame(list_x4, columns=[<span class="string">'x4'</span>])</span><br><span class="line">df_z1 = pd.DataFrame(list_z1, columns=[<span class="string">'z1'</span>])</span><br><span class="line">df_z2 = pd.DataFrame(list_z2, columns=[<span class="string">'z2'</span>])</span><br><span class="line">all_data = pd.concat([df_i1, df_t1, df_y1, df_x1, df_x2, df_x3, df_x4, df_z1, df_z2], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">all_data.to_excel(<span class="string">'all_data.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>此时对应的参数设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">百次循环后，最高准确率<span class="number">0.9383155397390273</span></span><br><span class="line">最大准确率对应的序号：<span class="number">50</span></span><br><span class="line">百次循环后，似然值为<span class="number">-4063.265863470829</span></span><br><span class="line">对应的BIC为<span class="number">-4195.540439027526</span></span><br><span class="line">在<span class="number">4</span>个变量下的状态转移概率矩阵：[[<span class="number">0.9963942307692307</span>, <span class="number">0.003605769230769231</span>, <span class="number">0</span>], [<span class="number">0.10307564422277639</span>, <span class="number">0.8969243557772236</span>, <span class="number">0.0</span>], [<span class="number">0.0</span>, <span class="number">0.058704453441295545</span>, <span class="number">0.9412955465587044</span>]]</span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">-0.12383302</span>  <span class="number">-0.05998412</span>  <span class="number">-0.24795679</span> <span class="number">-14.57070714</span>]</span><br><span class="line"> [  <span class="number">0.0197879</span>   <span class="number">-0.05702528</span>   <span class="number">0.04541117</span>  <span class="number">-0.50336113</span>]</span><br><span class="line"> [  <span class="number">1.42194922</span>   <span class="number">0.30341754</span>   <span class="number">1.19921318</span>   <span class="number">7.34666875</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[<span class="number">-8.58771943</span> <span class="number">-0.06000747</span> <span class="number">-3.32333259</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[<span class="number">-1.01971402</span> <span class="number">-0.57938656</span>]</span><br><span class="line"> [ <span class="number">0.83284649</span> <span class="number">-1.75792799</span>]</span><br><span class="line"> [ <span class="number">0.25329582</span>  <span class="number">2.1562813</span> ]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[<span class="number">-1.02302946</span> <span class="number">-0.42107895</span> <span class="number">-1.67846306</span>]</span><br><span class="line">变量<span class="number">1</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.904165130851456</span>, <span class="number">0.09583486914854404</span>, <span class="number">0</span>], [<span class="number">0.8882108860141567</span>, <span class="number">0.0976324139614352</span>, <span class="number">0.014156700024408104</span>], [<span class="number">0</span>, <span class="number">0.009270704573547589</span>, <span class="number">0.9907292954264524</span>]]</span><br><span class="line">变量<span class="number">2</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8673055657943236</span>, <span class="number">0.13269443420567636</span>, <span class="number">0</span>], [<span class="number">0.877959482548206</span>, <span class="number">0.1098364657066146</span>, <span class="number">0.0122040517451794</span>], [<span class="number">0</span>, <span class="number">0.009888751545117428</span>, <span class="number">0.9901112484548825</span>]]</span><br><span class="line">变量<span class="number">3</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8669369701437523</span>, <span class="number">0.13306302985624768</span>, <span class="number">0</span>], [<span class="number">0.8777154015133024</span>, <span class="number">0.11008054674151818</span>, <span class="number">0.0122040517451794</span>], [<span class="number">0</span>, <span class="number">0.007416563658838072</span>, <span class="number">0.992583436341162</span>]]</span><br><span class="line">变量<span class="number">4</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8669369701437523</span>, <span class="number">0.13306302985624768</span>, <span class="number">0</span>], [<span class="number">0.8777154015133024</span>, <span class="number">0.11008054674151818</span>, <span class="number">0.0122040517451794</span>], [<span class="number">0</span>, <span class="number">0.007416563658838072</span>, <span class="number">0.992583436341162</span>]]</span><br><span class="line">全部变量下的知识贡献意愿转移概率</span><br><span class="line">u1=<span class="number">-8.537239946774692</span>,u2_1=<span class="number">-0.11583742328882626</span>,u2_h=<span class="number">-0.7220150302930365</span>, u3=<span class="number">-0.4933279734329048</span></span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">-0.12383302</span>  <span class="number">-0.05998412</span>  <span class="number">-0.24795679</span> <span class="number">-14.57070714</span>]</span><br><span class="line"> [  <span class="number">0.0197879</span>   <span class="number">-0.05702528</span>   <span class="number">0.04541117</span>  <span class="number">-0.50336113</span>]</span><br><span class="line"> [  <span class="number">1.42194922</span>   <span class="number">0.30341754</span>   <span class="number">1.19921318</span>   <span class="number">7.34666875</span>]]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[<span class="number">-1.01971402</span> <span class="number">-0.57938656</span>]</span><br><span class="line"> [ <span class="number">0.83284649</span> <span class="number">-1.75792799</span>]</span><br><span class="line"> [ <span class="number">0.25329582</span>  <span class="number">2.1562813</span> ]]</span><br><span class="line">观察状态概率转移矩阵的截距为：[<span class="number">-1.02302946</span> <span class="number">-0.42107895</span> <span class="number">-1.67846306</span>]</span><br><span class="line">所有参数和矩阵表格如上</span><br><span class="line">w1(x1)标准偏差为：<span class="number">0.02525464573099962</span></span><br><span class="line">w1(x2)标准偏差为：<span class="number">0.026393311062668005</span></span><br><span class="line">w1(x3)标准偏差为：<span class="number">0.07533481875592112</span></span><br><span class="line">w1(x4)标准偏差为：<span class="number">0.13181323299672285</span></span><br><span class="line">w2(x1)标准偏差为：<span class="number">0.01959329097587093</span></span><br><span class="line">w2(x2)标准偏差为：<span class="number">0.015565458670391606</span></span><br><span class="line">w2(x3)标准偏差为：<span class="number">0.01844469465856866</span></span><br><span class="line">w2(x4)标准偏差为：<span class="number">0.017210850554842068</span></span><br><span class="line">w3(x1)标准偏差为：<span class="number">0.08027460747756567</span></span><br><span class="line">w3(x2)标准偏差为：<span class="number">0.1133582520346092</span></span><br><span class="line">w3(x3)标准偏差为：<span class="number">0.09188332111057886</span></span><br><span class="line">w3(x4)标准偏差为：<span class="number">0.1810153307790173</span></span><br><span class="line">w1(Z1)标准偏差为：<span class="number">0.0722882365013184</span></span><br><span class="line">w1(Z2)标准偏差为：<span class="number">0.12683764260300465</span></span><br><span class="line">w2(Z1)标准偏差为：<span class="number">0.0722882365013184</span></span><br><span class="line">w2(Z2)标准偏差为：<span class="number">0.12683764260300465</span></span><br><span class="line">w3(Z1)标准偏差为：<span class="number">0.0722882365013184</span></span><br><span class="line">w3(Z2)标准偏差为：<span class="number">0.12683764260300465</span></span><br><span class="line">bz1截距的标准偏差为：<span class="number">0.07779008201467114</span></span><br><span class="line">bz2截距的标准偏差为：<span class="number">0.0651521267497443</span></span><br><span class="line">bz3截距的标准偏差为：<span class="number">0.08229776007120924</span></span><br><span class="line">bx1阈值的标准偏差为：<span class="number">0.05107259495619836</span></span><br><span class="line">bx2阈值的标准偏差为：<span class="number">0.015587987616212207</span></span><br><span class="line">bx3阈值的标准偏差为：<span class="number">0.06441769065231308</span></span><br></pre></td></tr></table></figure><p><strong>直接生成数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">math.log(<span class="number">3.9118942731277535</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">1.3640217255107674</span></span><br><span class="line"><span class="number">1.3640217255107674</span>+<span class="number">5.4588414</span></span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">6.822863125510767</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;样本数据的生成&quot;&gt;&lt;a href=&quot;#样本数据的生成&quot; class=&quot;headerlink&quot; title=&quot;样本数据的生成&quot;&gt;&lt;/a&gt;样本数据的生成&lt;/h1&gt;&lt;p&gt;样本数据只有222个，其中不活跃状态的197个，一般状态的18个，活跃状态的7个，样本数据太不活跃，
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HMM之数据的处理</title>
    <link href="https://esyyes.github.io/2020/07/09/HMM/HMM%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/07/09/HMM/HMM%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2020-07-08T23:55:52.000Z</published>
    <updated>2020-07-08T23:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HMM之数据的处理"><a href="#HMM之数据的处理" class="headerlink" title="HMM之数据的处理"></a>HMM之数据的处理</h1><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><p>直接读取数据</p><p>数据类型如下所示：</p><table><thead><tr><th align="right"></th><th align="right">i</th><th align="right">t</th><th align="right">y</th><th align="right">x1</th><th align="right">x2</th><th align="right">x3</th><th align="right">x4</th><th align="right">z1</th><th align="right">z2</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">1</td><td align="right">0</td><td align="right">3891</td><td align="right">116</td><td align="right">0</td><td align="right">0</td><td align="right">6.0</td><td align="right">59.0</td></tr><tr><td align="right">1</td><td align="right">1</td><td align="right">2</td><td align="right">0</td><td align="right">5958</td><td align="right">93</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr><tr><td align="right">2</td><td align="right">1</td><td align="right">3</td><td align="right">0</td><td align="right">5362</td><td align="right">106</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr><tr><td align="right">3</td><td align="right">1</td><td align="right">4</td><td align="right">0</td><td align="right">2528</td><td align="right">126</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr><tr><td align="right">4</td><td align="right">1</td><td align="right">5</td><td align="right">1</td><td align="right">1219</td><td align="right">215</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr></tbody></table><h3 id="数据的含义"><a href="#数据的含义" class="headerlink" title="数据的含义"></a>数据的含义</h3><p>i对应的是一个人，t表示的是一个时期为一周，x1-x4,表示的是自变量，是影响隐马尔科夫模型的转移概率矩阵，z1,z2,是控制变量，是可以长期影响一个人的控制变量数据，是状态转移矩阵的估计量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                  表 <span class="number">4</span><span class="number">-2</span> 变量的统计学描述                </span><br><span class="line">变量名样本数 均值标准差最小值最大值</span><br><span class="line">y<span class="number">3108</span><span class="number">1.119691</span><span class="number">6.266278</span><span class="number">0</span><span class="number">111</span></span><br><span class="line">x1<span class="number">3108</span><span class="number">1301.892</span><span class="number">2582.350</span><span class="number">0</span><span class="number">42864</span></span><br><span class="line">x2<span class="number">3108</span><span class="number">615.3838</span><span class="number">2130.248</span><span class="number">-58</span><span class="number">46162</span></span><br><span class="line">x3<span class="number">3108</span><span class="number">1.071750</span><span class="number">4.706953</span><span class="number">0</span><span class="number">103</span></span><br><span class="line">x4<span class="number">3108</span><span class="number">0.751609</span><span class="number">5.057782</span><span class="number">0</span><span class="number">90</span></span><br></pre></td></tr></table></figure><p>样本差异过大，所以需要进行归一化或者标准化处理</p><p>没有数据缺失，因此只需要进行标准化即可。</p><h3 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">均值插补缺省值</span></span><br><span class="line"><span class="string">z-score标准化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_pre</span><span class="params">(data)</span>:</span></span><br><span class="line">    df = data.replace([np.inf, -np.inf], np.nan)</span><br><span class="line">    num = df.isnull().sum()</span><br><span class="line">    [df[df.keys()[i]].fillna(value=df[df.keys()[i]].mean(), inplace=<span class="literal">True</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)) <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    df_scale = preprocessing.scale(df)</span><br><span class="line">    <span class="comment"># 将标准化后的数据再转换为表格</span></span><br><span class="line">    fea = pd.DataFrame(df_scale, columns=data.keys())</span><br><span class="line">    <span class="keyword">return</span> fea</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">         x1        x2        x3        x4</span><br><span class="line"><span class="number">0</span>  <span class="number">1.002617</span> <span class="number">-0.234425</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.803051</span> <span class="number">-0.245222</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.572253</span> <span class="number">-0.239119</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.474803</span> <span class="number">-0.229731</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.032099</span> <span class="number">-0.187952</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br></pre></td></tr></table></figure><p>数据标准化后结果如上图所示</p><h3 id="HMM的状态划分"><a href="#HMM的状态划分" class="headerlink" title="HMM的状态划分"></a>HMM的状态划分</h3><p>在现实的数据中，HMM的隐藏状态是无法直接判别的，因此需要对状态进行判别。</p><p>在模型训练中最重要的步骤是进行模型状态数量的<br>确定。由于在大多数实验过程中，并不能直接确定将研究的隐藏状态分为几<br>个状态水平较为合适，因此，需要通过建立多个模型，根据贝叶斯信息准则<br>对模型的拟合效果进行比较，选择最佳的模型作为实际研究模型。</p><p>据相关研究，需要通过假定不同的状态量 S，建立若干个模<br>型，训练模型后计算模型的对数似然值。再根据贝叶斯信息准则（BIC）的<br>计算方法，计算 BIC 的值，比较后选择效果较好的模型。 </p><p> <strong>BIC =ln L − k× ln P / 2</strong>   </p><p>BIC 值的计算方法，其中 ln L 代表模型的对数<br>似然值，k 代表模型的变量个数，P 代表样本大小。BIC 的值越大，表示模<br>型训练的效果越好。</p><p>因此需要最大似然值和BIC进行估计，判断在什么状态下的数据最好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">根据样本数据。因此确定选择<span class="number">1</span>为阈值下</span><br><span class="line">均值下的似然估计值为：    <span class="number">-955.2942841591449</span></span><br><span class="line">分类为<span class="number">2</span>均值下的BIC为：<span class="number">-1028.7801594684208</span></span><br><span class="line">变量：<span class="number">12</span></span><br><span class="line"><span class="number">1</span>值下的似然估计值为：    <span class="number">-1589.5001457084938</span></span><br><span class="line">分类为<span class="number">2</span>阈值为<span class="number">1</span>下的BIC为：<span class="number">-1662.9860210177699</span></span><br><span class="line">状态为<span class="number">3</span>时：设定<span class="number">1</span>《《标准差为阈值</span><br><span class="line">变量：<span class="number">18</span></span><br><span class="line">似然估计值为：    <span class="number">-1486.947107953313</span></span><br><span class="line">分类为<span class="number">3</span>时的BIC为：<span class="number">-1619.2216835100096</span></span><br><span class="line">状态为<span class="number">4</span>时：设定<span class="number">1</span>《《标准差《《方差为阈值</span><br><span class="line">变量：<span class="number">24</span></span><br><span class="line">似然估计值为： <span class="number">-1524.3108928288107</span> </span><br><span class="line">分类为<span class="number">4</span>时的BIC为：<span class="number">-1700.676993571073</span></span><br></pre></td></tr></table></figure><p>因此确定3为状态数</p><h3 id="初始状态概率矩阵"><a href="#初始状态概率矩阵" class="headerlink" title="初始状态概率矩阵"></a>初始状态概率矩阵</h3><p>直接用划分的状态进行划分初始状态概率矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当状态为<span class="number">2</span>时：</span><br><span class="line">[[<span class="number">0.7918275418275418</span>, <span class="number">0.20817245817245822</span>]]</span><br><span class="line">当状态为<span class="number">3</span>时：</span><br><span class="line">[[<span class="number">0.7918275418275418</span>, <span class="number">0.3462033462033462</span>, <span class="number">0.03507078507078507</span>]]</span><br><span class="line">当状态为<span class="number">4</span>时：</span><br><span class="line">[[<span class="number">0.7918275418275418</span>, <span class="number">0.3462033462033462</span>, <span class="number">0.030244530244530245</span>, <span class="number">0.004826254826254826</span>]]</span><br></pre></td></tr></table></figure><h3 id="判断最大似然的收敛性"><a href="#判断最大似然的收敛性" class="headerlink" title="判断最大似然的收敛性"></a>判断最大似然的收敛性</h3><p>用百次循环的结果去对应查看数据是否收敛</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 解决中文显示问题</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line">plt.plot(list_L, <span class="string">"bo"</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Number of Iterations"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Loglik"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 去边框</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cloglik.png" alt="loglik"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/9</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> HMM_class <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LR <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 转换列表</span></span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X1 = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">X = data_pre(X1)</span><br><span class="line">Z = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">7</span>:<span class="number">9</span>])</span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"><span class="comment"># 划分为状态3</span></span><br><span class="line"><span class="comment"># 状态1：小于1的</span></span><br><span class="line"><span class="comment"># 状态2：小于标准差</span></span><br><span class="line"><span class="comment"># 状态3：大于标准差</span></span><br><span class="line"></span><br><span class="line">Y_X = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_X.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std:</span><br><span class="line">        Y_X.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_X.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line">Z1 = [[int(list_data[<span class="number">14</span>*j][k]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)) <span class="keyword">if</span> <span class="number">14</span> * j == i <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">7</span>, <span class="number">9</span>)]</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>))]</span><br><span class="line">Z2 = pd.DataFrame(Z1, columns=[<span class="string">'z1'</span>, <span class="string">'z2'</span>])</span><br><span class="line">Z = data_pre(Z2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line">Y_Z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HMM模型参数设置</span></span><br><span class="line">HMM = HiddenMarkov()</span><br><span class="line">Q = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">V = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">B = [[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>],</span><br><span class="line">     [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>],</span><br><span class="line">     [<span class="number">0.0</span>, <span class="number">0.09183673469387756</span>, <span class="number">0.9081632653061223</span>]]</span><br><span class="line">PI = [[num1/len(data), num2/len(data), num3/len(data)]]</span><br><span class="line"></span><br><span class="line">list_L = []</span><br><span class="line">list_fix_x = []</span><br><span class="line">list_fix_z = []</span><br><span class="line">list_lr_x_w = []</span><br><span class="line">list_lr_z_w = []</span><br><span class="line">list_lr_x_b = []</span><br><span class="line">list_lr_z_b = []</span><br><span class="line">list_A = []</span><br><span class="line">list_BIC = []</span><br><span class="line">list_acr_x = []</span><br><span class="line">list_acr_z = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    acr_x, fix_x, lr_x_w, lr_x_b = run_lr(X, Y_X)</span><br><span class="line">    acr_z, fix_z, lr_z_w, lr_z_b = run_lr(Z, Y_Z)</span><br><span class="line">    A = [[fix_x[<span class="number">0</span>][<span class="number">0</span>]/fix_x[<span class="number">0</span>].sum(), fix_x[<span class="number">0</span>][<span class="number">1</span>]/fix_x[<span class="number">0</span>].sum(), fix_x[<span class="number">0</span>][<span class="number">2</span>]/fix_x[<span class="number">0</span>].sum()],</span><br><span class="line">         [fix_x[<span class="number">1</span>][<span class="number">0</span>]/fix_x[<span class="number">1</span>].sum(), fix_x[<span class="number">1</span>][<span class="number">1</span>]/fix_x[<span class="number">1</span>].sum(), fix_x[<span class="number">1</span>][<span class="number">2</span>]/fix_x[<span class="number">1</span>].sum()],</span><br><span class="line">         [fix_x[<span class="number">2</span>][<span class="number">0</span>]/fix_x[<span class="number">2</span>].sum(), fix_x[<span class="number">2</span>][<span class="number">1</span>]/fix_x[<span class="number">2</span>].sum(), fix_x[<span class="number">2</span>][<span class="number">2</span>]/fix_x[<span class="number">2</span>].sum()]</span><br><span class="line">         ]</span><br><span class="line"></span><br><span class="line">    P = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">        O = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">                O.append(Y_X[i])</span><br><span class="line">        P.append(HMM.forward(Q, V, A, B, O, PI))</span><br><span class="line"></span><br><span class="line">    L = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(P)):</span><br><span class="line">        L += math.log(P[i])</span><br><span class="line">    BIC = L - <span class="number">18</span> * (math.log(<span class="number">3108</span> / <span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 保存似然值</span></span><br><span class="line">    list_A.append(A)</span><br><span class="line">    list_L.append(L)</span><br><span class="line">    list_BIC.append(BIC)</span><br><span class="line">    list_fix_x.append(fix_x)</span><br><span class="line">    list_fix_z.append(fix_z)</span><br><span class="line">    list_lr_x_w.append(lr_x_w)</span><br><span class="line">    list_lr_z_w.append(lr_z_w)</span><br><span class="line">    list_lr_x_b.append(lr_x_b)</span><br><span class="line">    list_lr_z_b.append(lr_z_b)</span><br><span class="line">    list_acr_x.append(acr_x)</span><br><span class="line">    list_acr_z.append(acr_z)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'百次循环后，最高准确率<span class="subst">&#123;max(list_acr_x)&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'最大准确率对应的序号：<span class="subst">&#123;list_acr_x.index(max(list_acr_x))&#125;</span>'</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">f'百次循环后，似然值为<span class="subst">&#123;list_L[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'对应的BIC为<span class="subst">&#123;list_BIC[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'在4个变量下的状态转移概率矩阵：<span class="subst">&#123;list_A[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">f'参数估计'</span>)</span><br><span class="line">print(<span class="string">f'状态转移概率矩阵的系数为：<span class="subst">&#123;list_lr_x_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'状态转移概率矩阵的偏差为：<span class="subst">&#123;list_lr_x_b[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的系数为：<span class="subst">&#123;list_lr_z_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的偏差为：<span class="subst">&#123;list_lr_z_b[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">num = list_acr_x.index(max(list_acr_x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_x = np.array(X).tolist()</span><br><span class="line">print(<span class="string">f'变量1下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b0 = []</span><br><span class="line">wx_b1 = []</span><br><span class="line">wx_b2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b0.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b1.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b2.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b0), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b2), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b1), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态1个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H = [[(len(wx_b0) - <span class="number">260</span>)/len(wx_b0), <span class="number">260</span>/len(wx_b0), <span class="number">0</span>],</span><br><span class="line">     [(len(wx_b1) - <span class="number">458</span>)/len(wx_b1), <span class="number">400</span>/len(wx_b1), <span class="number">58</span>/len(wx_b1)],</span><br><span class="line">     [<span class="number">0</span>, <span class="number">15</span>/len(wx_b2), <span class="number">1</span><span class="number">-15</span>/(len(wx_b2))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'变量2下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b20 = []</span><br><span class="line">wx_b21 = []</span><br><span class="line">wx_b22 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b20.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b21.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b22.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b20), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b22), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b21), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态2个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,   状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H2 = [[(len(wx_b20) - <span class="number">360</span>)/len(wx_b20), <span class="number">360</span>/len(wx_b20), <span class="number">0</span>],</span><br><span class="line">      [(len(wx_b21) - <span class="number">500</span>)/len(wx_b21), <span class="number">450</span>/len(wx_b21), <span class="number">50</span>/len(wx_b21)],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">16</span>/len(wx_b22), <span class="number">1</span><span class="number">-16</span>/(len(wx_b22))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H2&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'变量3下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b30 = []</span><br><span class="line">wx_b31 = []</span><br><span class="line">wx_b32 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b30.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b31.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b32.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b30), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b32), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b31), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态2个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,   状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H3 = [[(len(wx_b30) - <span class="number">361</span>)/len(wx_b30), <span class="number">361</span>/len(wx_b30), <span class="number">0</span>],</span><br><span class="line">      [(len(wx_b31) - <span class="number">501</span>)/len(wx_b31), <span class="number">451</span>/len(wx_b31), <span class="number">50</span>/len(wx_b31)],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">12</span>/len(wx_b32), <span class="number">1</span><span class="number">-12</span>/(len(wx_b32))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'变量4下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b40 = []</span><br><span class="line">wx_b41 = []</span><br><span class="line">wx_b42 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b40.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b41.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b42.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b40), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b42), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b41), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态2个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,   状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H4 = [[(len(wx_b40) - <span class="number">361</span>)/len(wx_b40), <span class="number">361</span>/len(wx_b40), <span class="number">0</span>],</span><br><span class="line">      [(len(wx_b41) - <span class="number">501</span>)/len(wx_b41), <span class="number">451</span>/len(wx_b41), <span class="number">50</span>/len(wx_b41)],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">12</span>/len(wx_b42), <span class="number">1</span><span class="number">-12</span>/(len(wx_b42))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H4&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部数值下</span></span><br><span class="line">print(<span class="string">f'全部变量下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_ba0 = []</span><br><span class="line">wx_ba1 = []</span><br><span class="line">wx_ba2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_ba0.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">0</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">0</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">0</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] +</span><br><span class="line">                      list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_ba1.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">1</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">1</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">1</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] +</span><br><span class="line">                      list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_ba2.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">2</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">2</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">2</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] +</span><br><span class="line">                      list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 进行排序</span></span><br><span class="line">wx_ba0.sort()</span><br><span class="line">wx_ba1.sort()</span><br><span class="line">wx_ba2.sort()</span><br><span class="line"><span class="comment"># 找到边界,意思就是找到相对应的u1,u2-1,u2-h,u-3</span></span><br><span class="line"><span class="comment"># 我是这样理解的，其实对应的就是x_b的系数，但是少了一个而已</span></span><br><span class="line">b = list_fix_x[num][<span class="number">0</span>][<span class="number">1</span>]/sum(list_fix_x[num][<span class="number">0</span>])</span><br><span class="line">x = len(wx_ba0) * b</span><br><span class="line"><span class="comment"># 即根据前面那个</span></span><br><span class="line"><span class="comment"># 取倒数第16个作为边界吧</span></span><br><span class="line">u1 = wx_b0[<span class="number">-16</span>]</span><br><span class="line">b1 = list_fix_x[num][<span class="number">1</span>][<span class="number">0</span>]/sum(list_fix_x[num][<span class="number">1</span>])</span><br><span class="line">x1 = len(wx_ba1) * b1</span><br><span class="line">u2_1 = wx_ba1[int(x1)]</span><br><span class="line">b2 = list_fix_x[num][<span class="number">1</span>][<span class="number">2</span>]/sum(list_fix_x[num][<span class="number">1</span>])</span><br><span class="line">x2 = len(wx_ba1) * b2</span><br><span class="line">u2_h = wx_ba1[-int(x2)]</span><br><span class="line"></span><br><span class="line">b3 = list_fix_x[num][<span class="number">2</span>][<span class="number">2</span>]/sum(list_fix_x[num][<span class="number">2</span>])</span><br><span class="line">x4 = len(wx_b2) * b3</span><br><span class="line">u3 = wx_ba2[-int(x4)]</span><br><span class="line">print(<span class="string">f'u1=<span class="subst">&#123;u1&#125;</span>,u2_1=<span class="subst">&#123;u2_1&#125;</span>,u2_h=<span class="subst">&#123;u2_h&#125;</span>, u3=<span class="subst">&#123;u3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'状态转移概率矩阵的系数为：<span class="subst">&#123;list_lr_x_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的系数为：<span class="subst">&#123;list_lr_z_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的截距为：<span class="subst">&#123;list_lr_z_b[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'所有参数和矩阵表格如上'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">百次循环后，最高准确率<span class="number">0.917470525187567</span></span><br><span class="line">最大准确率对应的序号：<span class="number">29</span></span><br><span class="line"></span><br><span class="line">百次循环后，似然值为<span class="number">-1355.7570132278736</span></span><br><span class="line">对应的BIC为<span class="number">-1488.0315887845702</span></span><br><span class="line">在<span class="number">4</span>个变量下的状态转移概率矩阵：[[<span class="number">0.9868073878627969</span>, <span class="number">0.013192612137203167</span>, <span class="number">0.0</span>], [<span class="number">0.40816326530612246</span>, <span class="number">0.5782312925170068</span>, <span class="number">0.013605442176870748</span>], [<span class="number">0.0</span>, <span class="number">0.17857142857142858</span>, <span class="number">0.8214285714285714</span>]]</span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[<span class="number">-0.07814258</span> <span class="number">-0.08035225</span> <span class="number">-0.03518065</span> <span class="number">-8.30153077</span>]</span><br><span class="line"> [<span class="number">-0.07992528</span>  <span class="number">0.07019997</span> <span class="number">-0.02918073</span>  <span class="number">2.04945495</span>]</span><br><span class="line"> [ <span class="number">0.15806786</span>  <span class="number">0.01015228</span>  <span class="number">0.06436137</span>  <span class="number">6.25207582</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[ <span class="number">1.46433444</span>  <span class="number">1.09085289</span> <span class="number">-2.55518733</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[ <span class="number">0.44462513</span>  <span class="number">0.22701876</span>]</span><br><span class="line"> [ <span class="number">0.48690629</span> <span class="number">-0.33289007</span>]</span><br><span class="line"> [<span class="number">-0.93153142</span>  <span class="number">0.10587131</span>]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[ <span class="number">2.26772789</span> <span class="number">-0.16557564</span> <span class="number">-2.10215226</span>]</span><br><span class="line">变量<span class="number">1</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8943518894758228</span>, <span class="number">0.10564811052417716</span>, <span class="number">0</span>], [<span class="number">0.14869888475836432</span>, <span class="number">0.7434944237918215</span>, <span class="number">0.10780669144981413</span>], [<span class="number">0</span>, <span class="number">0.13761467889908258</span>, <span class="number">0.8623853211009174</span>]]</span><br><span class="line">变量<span class="number">2</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8537180008126778</span>, <span class="number">0.14628199918732224</span>, <span class="number">0</span>], [<span class="number">0.07063197026022305</span>, <span class="number">0.8364312267657993</span>, <span class="number">0.09293680297397769</span>], [<span class="number">0</span>, <span class="number">0.14678899082568808</span>, <span class="number">0.8532110091743119</span>]]</span><br><span class="line">变量<span class="number">3</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8533116619260463</span>, <span class="number">0.14668833807395368</span>, <span class="number">0</span>], [<span class="number">0.0687732342007435</span>, <span class="number">0.8382899628252788</span>, <span class="number">0.09293680297397769</span>], [<span class="number">0</span>, <span class="number">0.11009174311926606</span>, <span class="number">0.8899082568807339</span>]]</span><br><span class="line">变量<span class="number">4</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8533116619260463</span>, <span class="number">0.14668833807395368</span>, <span class="number">0</span>], [<span class="number">0.0687732342007435</span>, <span class="number">0.8382899628252788</span>, <span class="number">0.09293680297397769</span>], [<span class="number">0</span>, <span class="number">0.11009174311926606</span>, <span class="number">0.8899082568807339</span>]]</span><br><span class="line">全部变量下的知识贡献意愿转移概率</span><br><span class="line">u1=<span class="number">1.4980410992089837</span>,u2_1=<span class="number">0.8129063006054411</span>,u2_h=<span class="number">2.8303668243942806</span>, u3=<span class="number">2.68524912411076</span></span><br><span class="line">状态转移概率矩阵的系数为：[[<span class="number">-0.07814258</span> <span class="number">-0.08035225</span> <span class="number">-0.03518065</span> <span class="number">-8.30153077</span>]</span><br><span class="line"> [<span class="number">-0.07992528</span>  <span class="number">0.07019997</span> <span class="number">-0.02918073</span>  <span class="number">2.04945495</span>]</span><br><span class="line"> [ <span class="number">0.15806786</span>  <span class="number">0.01015228</span>  <span class="number">0.06436137</span>  <span class="number">6.25207582</span>]]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[ <span class="number">0.44462513</span>  <span class="number">0.22701876</span>]</span><br><span class="line"> [ <span class="number">0.48690629</span> <span class="number">-0.33289007</span>]</span><br><span class="line"> [<span class="number">-0.93153142</span>  <span class="number">0.10587131</span>]]</span><br><span class="line">观察状态概率转移矩阵的截距为：[ <span class="number">2.26772789</span> <span class="number">-0.16557564</span> <span class="number">-2.10215226</span>]</span><br><span class="line">所有参数和矩阵表格如上</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594399298975&di=10b635fa56f834e6a4afb58286e8c847&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2Fb6d8d812ef63e040bd944da29effa95001176a20.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HMM之数据的处理&quot;&gt;&lt;a href=&quot;#HMM之数据的处理&quot; class=&quot;headerlink&quot; title=&quot;HMM之数据的处理&quot;&gt;&lt;/a&gt;HMM之数据的处理&lt;/h1&gt;&lt;h2 id=&quot;查看数据&quot;&gt;&lt;a href=&quot;#查看数据&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>状态为3时的设定</title>
    <link href="https://esyyes.github.io/2020/07/08/HMM/%E7%8A%B6%E6%80%81%E4%B8%BA3%E6%97%B6%E7%9A%84%E8%AE%BE%E5%AE%9A/"/>
    <id>https://esyyes.github.io/2020/07/08/HMM/%E7%8A%B6%E6%80%81%E4%B8%BA3%E6%97%B6%E7%9A%84%E8%AE%BE%E5%AE%9A/</id>
    <published>2020-07-08T06:45:11.000Z</published>
    <updated>2020-07-08T06:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态为3是的B值设定"><a href="#状态为3是的B值设定" class="headerlink" title="状态为3是的B值设定"></a>状态为3是的B值设定</h1><p>划分为状态3# 状态1：小于平均值的# 状态2：小于标准差# 状态3：大于标准差</p><p>将里面的数据直接划分为3个状态，按照3个状态的区间范围，去设定序列的状态值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分为状态3</span></span><br><span class="line"><span class="comment"># 状态1：小于平均值的</span></span><br><span class="line"><span class="comment"># 状态2：小于标准差</span></span><br><span class="line"><span class="comment"># 状态3：大于标准差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列中出现0,1,2阶段的数目</span></span><br><span class="line">Y_X = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_X.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std:</span><br><span class="line">        Y_X.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_X.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'阶段1的个数：<span class="subst">&#123;num1&#125;</span>,阶段2的个数：<span class="subst">&#123;num2&#125;</span>,阶段3的个数：<span class="subst">&#123;num3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断序列阶段出现出现的次数</span></span><br><span class="line">num1_z = <span class="number">0</span></span><br><span class="line">num2_z = <span class="number">0</span></span><br><span class="line">num3_z = <span class="number">0</span></span><br><span class="line">Y_Z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3_z += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1的序列个数：<span class="subst">&#123;num1_z&#125;</span>,阶段2的序列个数：<span class="subst">&#123;num2_z&#125;</span>, 阶段3的序列个数：<span class="subst">&#123;num3_z&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其划分为14个一组一个序列</span></span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    x1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            x1.append(Y_X[i])</span><br><span class="line">    Y.append(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断阶段1中出现012的次数</span></span><br><span class="line">num_j1 = <span class="number">0</span></span><br><span class="line">num_j2 = <span class="number">0</span></span><br><span class="line">num_j3 = <span class="number">0</span></span><br><span class="line">num_k1 = <span class="number">0</span></span><br><span class="line">num_k2 = <span class="number">0</span></span><br><span class="line">num_k3 = <span class="number">0</span></span><br><span class="line">num_b1 = <span class="number">0</span></span><br><span class="line">num_b2 = <span class="number">0</span></span><br><span class="line">num_b3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][j] == <span class="number">0</span>:</span><br><span class="line">                num_j1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][j] == <span class="number">1</span>:</span><br><span class="line">                num_j2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_j3 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][k] == <span class="number">0</span>:</span><br><span class="line">                num_k1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][k] == <span class="number">1</span>:</span><br><span class="line">                num_k2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_k3 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][b] == <span class="number">0</span>:</span><br><span class="line">                num_b1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][b] == <span class="number">1</span>:</span><br><span class="line">                num_b2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_b3 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'阶段1中状态1的个数  <span class="subst">&#123;num_j1&#125;</span>，状态2的个数<span class="subst">&#123;num_j2&#125;</span>，状态2的个数<span class="subst">&#123;num_j3&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段2中状态1的个数  <span class="subst">&#123;num_k1&#125;</span>，  状态2的个数  <span class="subst">&#123;num_k2&#125;</span>，状态2的个数<span class="subst">&#123;num_k3&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段3中状态1的个数  <span class="subst">&#123;num_b1&#125;</span>，  状态2的个数  <span class="subst">&#123;num_b2&#125;</span>，状态2的个数<span class="subst">&#123;num_b3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">B = [[num_j1/num1_z/<span class="number">14</span>, num_j2/num1_z/<span class="number">14</span>, num_j3/num1_z/<span class="number">14</span>],</span><br><span class="line">     [num_k1/num2_z/<span class="number">14</span>, num_k2/num2_z/<span class="number">14</span>, num_k3/num2_z/<span class="number">14</span>],</span><br><span class="line">     [num_b1/num3_z/<span class="number">14</span>, num_b2/num3_z/<span class="number">14</span>, num_b3/num3_z/<span class="number">14</span>]]</span><br><span class="line">print(<span class="string">f'在阈值线为平均值下的<span class="subst">&#123;B&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">阶段<span class="number">1</span>的个数：<span class="number">2461</span>,阶段<span class="number">2</span>的个数：<span class="number">1076</span>,阶段<span class="number">3</span>的个数：<span class="number">109</span></span><br><span class="line">阶段<span class="number">1</span>的序列个数：<span class="number">197</span>,阶段<span class="number">2</span>的序列个数：<span class="number">18</span>, 阶段<span class="number">3</span>的序列个数：<span class="number">7</span></span><br><span class="line">阶段<span class="number">1</span>中状态<span class="number">1</span>的个数  <span class="number">2418</span>，状态<span class="number">2</span>的个数<span class="number">340</span>，状态<span class="number">2</span>的个数<span class="number">0</span></span><br><span class="line">阶段<span class="number">2</span>中状态<span class="number">1</span>的个数  <span class="number">43</span>，  状态<span class="number">2</span>的个数  <span class="number">189</span>，状态<span class="number">2</span>的个数<span class="number">20</span></span><br><span class="line">阶段<span class="number">3</span>中状态<span class="number">1</span>的个数  <span class="number">0</span>，  状态<span class="number">2</span>的个数  <span class="number">9</span>，状态<span class="number">2</span>的个数<span class="number">89</span></span><br><span class="line">在阈值线为平均值下的[[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>], [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>], [<span class="number">0.0</span>, <span class="number">0.09183673469387756</span>, <span class="number">0.9081632653061223</span>]]</span><br></pre></td></tr></table></figure><p>将数据设定为4状态时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分为状态4</span></span><br><span class="line"><span class="comment"># # 状态1：小于平均值的</span></span><br><span class="line"><span class="comment"># # 状态2：小于标准差</span></span><br><span class="line"><span class="comment"># # 状态3：小于方差的</span></span><br><span class="line"><span class="comment"># # 状态4：大于方差的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列中出现0,1,2阶段的数目</span></span><br><span class="line">Y_X = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line">num4 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_X.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std:</span><br><span class="line">        Y_X.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> y1_std &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std*y1_std:</span><br><span class="line">        Y_X.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_X.append(<span class="number">3</span>)</span><br><span class="line">        num4 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1的个数：<span class="subst">&#123;num1&#125;</span>,阶段2的个数：<span class="subst">&#123;num2&#125;</span>, 阶段3的个数：<span class="subst">&#123;num3&#125;</span>, 阶段4的个数：<span class="subst">&#123;num4&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断序列阶段出现出现的次数</span></span><br><span class="line">num1_z = <span class="number">0</span></span><br><span class="line">num2_z = <span class="number">0</span></span><br><span class="line">num3_z = <span class="number">0</span></span><br><span class="line">num4_z = <span class="number">0</span></span><br><span class="line">Y_Z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> y1_std &lt;= list_z_y[i] &lt; y1_std * y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">3</span>)</span><br><span class="line">        num4_z += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1的序列个数：<span class="subst">&#123;num1_z&#125;</span>,阶段2的序列个数：<span class="subst">&#123;num2_z&#125;</span>, 阶段3的序列个数：<span class="subst">&#123;num3_z&#125;</span>, 阶段4的序列个数：<span class="subst">&#123;num4_z&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其划分为14个一组一个序列</span></span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    x1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            x1.append(Y_X[i])</span><br><span class="line">    Y.append(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断阶段1中出现012的次数</span></span><br><span class="line">num_j1 = <span class="number">0</span></span><br><span class="line">num_j2 = <span class="number">0</span></span><br><span class="line">num_j3 = <span class="number">0</span></span><br><span class="line">num_j4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">num_k1 = <span class="number">0</span></span><br><span class="line">num_k2 = <span class="number">0</span></span><br><span class="line">num_k3 = <span class="number">0</span></span><br><span class="line">num_k4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">num_b1 = <span class="number">0</span></span><br><span class="line">num_b2 = <span class="number">0</span></span><br><span class="line">num_b3 = <span class="number">0</span></span><br><span class="line">num_b4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">num_h1 = <span class="number">0</span></span><br><span class="line">num_h2 = <span class="number">0</span></span><br><span class="line">num_h3 = <span class="number">0</span></span><br><span class="line">num_h4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][j] == <span class="number">0</span>:</span><br><span class="line">                num_j1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][j] == <span class="number">1</span>:</span><br><span class="line">                num_j2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][j] == <span class="number">2</span>:</span><br><span class="line">                num_j3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_j4 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][k] == <span class="number">0</span>:</span><br><span class="line">                num_k1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][k] == <span class="number">1</span>:</span><br><span class="line">                num_k2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][k] == <span class="number">2</span>:</span><br><span class="line">                num_k3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_k4 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][b] == <span class="number">0</span>:</span><br><span class="line">                num_b1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][b] == <span class="number">1</span>:</span><br><span class="line">                num_b2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][b] == <span class="number">2</span>:</span><br><span class="line">                num_b3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_b4 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][h] == <span class="number">0</span>:</span><br><span class="line">                num_h1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][h] == <span class="number">1</span>:</span><br><span class="line">                num_h2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][h] == <span class="number">2</span>:</span><br><span class="line">                num_h3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_h4 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1中状态1的个数  <span class="subst">&#123;num_j1&#125;</span>，状态2的个数<span class="subst">&#123;num_j2&#125;</span>，状态3的个数<span class="subst">&#123;num_j3&#125;</span>, 状态4的个数<span class="subst">&#123;num_j4&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段2中状态1的个数  <span class="subst">&#123;num_k1&#125;</span>，状态2的个数  <span class="subst">&#123;num_k2&#125;</span>，状态3的个数<span class="subst">&#123;num_k3&#125;</span>, 状态4的个数<span class="subst">&#123;num_k4&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段3中状态1的个数  <span class="subst">&#123;num_b1&#125;</span>，状态2的个数  <span class="subst">&#123;num_b2&#125;</span>，状态3的个数<span class="subst">&#123;num_b3&#125;</span>, 状态4的个数<span class="subst">&#123;num_b4&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段4中状态1的个数  <span class="subst">&#123;num_h1&#125;</span>，状态2的个数  <span class="subst">&#123;num_h2&#125;</span>，状态3的个数<span class="subst">&#123;num_h3&#125;</span>, 状态4的个数<span class="subst">&#123;num_h4&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">B = [[num_j1/num1_z/<span class="number">14</span>, num_j2/num1_z/<span class="number">14</span>, num_j3/num1_z/<span class="number">14</span>, num_j4/num1_z/<span class="number">14</span>,],</span><br><span class="line">     [num_k1/num2_z/<span class="number">14</span>, num_k2/num2_z/<span class="number">14</span>, num_k3/num2_z/<span class="number">14</span>, num_k4/num2_z/<span class="number">14</span>],</span><br><span class="line">     [num_b1/num3_z/<span class="number">14</span>, num_b2/num3_z/<span class="number">14</span>, num_b3/num3_z/<span class="number">14</span>, num_b4/num3_z/<span class="number">14</span>],</span><br><span class="line">     [num_h1/num4_z/<span class="number">14</span>, num_h2/num4_z/<span class="number">14</span>, num_h3/num4_z/<span class="number">14</span>, num_h4/num4_z/<span class="number">14</span>]</span><br><span class="line">     ]</span><br><span class="line">print(<span class="string">f'在阈值线为平均值下的<span class="subst">&#123;B&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">阶段<span class="number">1</span>的个数：<span class="number">2461</span>,阶段<span class="number">2</span>的个数：<span class="number">1076</span>, 阶段<span class="number">3</span>的个数：<span class="number">94</span>, 阶段<span class="number">4</span>的个数：<span class="number">15</span></span><br><span class="line">阶段<span class="number">1</span>的序列个数：<span class="number">197</span>,阶段<span class="number">2</span>的序列个数：<span class="number">18</span>, 阶段<span class="number">3</span>的序列个数：<span class="number">6</span>, 阶段<span class="number">4</span>的序列个数：<span class="number">1</span></span><br><span class="line">阶段<span class="number">1</span>中状态<span class="number">1</span>的个数  <span class="number">2418</span>，状态<span class="number">2</span>的个数<span class="number">340</span>，状态<span class="number">3</span>的个数<span class="number">0</span>, 状态<span class="number">4</span>的个数<span class="number">0</span></span><br><span class="line">阶段<span class="number">2</span>中状态<span class="number">1</span>的个数  <span class="number">43</span>，状态<span class="number">2</span>的个数  <span class="number">189</span>，状态<span class="number">3</span>的个数<span class="number">20</span>, 状态<span class="number">4</span>的个数<span class="number">0</span></span><br><span class="line">阶段<span class="number">3</span>中状态<span class="number">1</span>的个数  <span class="number">0</span>，状态<span class="number">2</span>的个数  <span class="number">9</span>，状态<span class="number">3</span>的个数<span class="number">74</span>, 状态<span class="number">4</span>的个数<span class="number">1</span></span><br><span class="line">阶段<span class="number">4</span>中状态<span class="number">1</span>的个数  <span class="number">0</span>，状态<span class="number">2</span>的个数  <span class="number">0</span>，状态<span class="number">3</span>的个数<span class="number">0</span>, 状态<span class="number">4</span>的个数<span class="number">14</span></span><br><span class="line">在阈值线为平均值下的[[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>, <span class="number">0.0</span>], [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>, <span class="number">0.0</span>], [<span class="number">0.0</span>, <span class="number">0.10714285714285714</span>, <span class="number">0.880952380952381</span>, <span class="number">0.011904761904761904</span>], [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]</span><br></pre></td></tr></table></figure><p>因此现在B2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B_2 = [[<span class="number">0.78535170413343</span>, <span class="number">0.21464829586656997</span>],</span><br><span class="line">       [<span class="number">0.8428571428571429</span>, <span class="number">0.15714285714285714</span>]]</span><br><span class="line">B_3 = [[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>],</span><br><span class="line">       [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>],</span><br><span class="line">       [<span class="number">0.0</span>, <span class="number">0.09183673469387756</span>, <span class="number">0.9081632653061223</span>]]</span><br><span class="line">B_4 = [[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">       [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>, <span class="number">0.0</span>],</span><br><span class="line">       [<span class="number">0.0</span>, <span class="number">0.10714285714285714</span>, <span class="number">0.880952380952381</span>, <span class="number">0.011904761904761904</span>],</span><br><span class="line">       [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594262532884&di=531d0fbc2e24db968ffac8fbc73b3d42&imgtype=0&src=http%3A%2F%2Ft7.baidu.com%2Fit%2Fu%3D784355040%2C1080860592%26fm%3D193" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;状态为3是的B值设定&quot;&gt;&lt;a href=&quot;#状态为3是的B值设定&quot; class=&quot;headerlink&quot; title=&quot;状态为3是的B值设定&quot;&gt;&lt;/a&gt;状态为3是的B值设定&lt;/h1&gt;&lt;p&gt;划分为状态3# 状态1：小于平均值的# 状态2：小于标准差# 状态3：大于标
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HMM中的B值确定</title>
    <link href="https://esyyes.github.io/2020/07/08/HMM/HMM%E4%B8%AD%E7%9A%84B%E5%80%BC%E7%A1%AE%E5%AE%9A/"/>
    <id>https://esyyes.github.io/2020/07/08/HMM/HMM%E4%B8%AD%E7%9A%84B%E5%80%BC%E7%A1%AE%E5%AE%9A/</id>
    <published>2020-07-08T06:12:45.000Z</published>
    <updated>2020-07-08T06:12:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HMM中的B值确定"><a href="#HMM中的B值确定" class="headerlink" title="HMM中的B值确定"></a>HMM中的B值确定</h1><p>1．隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的状态的序列，再由各个状态随机生成一个观测而产生观测的序列的过程。</p><p>隐马尔可夫模型由初始状态概率向$\pi$、状态转移概率矩阵$A$和观测概率矩阵$B$决定。因此，隐马尔可夫模型可以写成$\lambda=(A, B, \pi)$。</p><p>隐马尔可夫模型是一个生成模型，表示状态序列和观测序列的联合分布，但是状态序列是隐藏的，不可观测的。</p><p>隐马尔可夫模型可以用于标注，这时状态对应着标记。标注问题是给定观测序列预测其对应的标记序列。</p><p>2．概率计算问题。给定模型$\lambda=(A, B, \pi)$和观测序列$O＝(o_1，o_2,…,o_T)$，计算在模型$\lambda$下观测序列$O$出现的概率$P(O|\lambda)$。前向-后向算法是通过递推地计算前向-后向概率可以高效地进行隐马尔可夫模型的概率计算。</p><p>3．学习问题。已知观测序列$O＝(o_1，o_2,…,o_T)$，估计模型$\lambda=(A, B, \pi)$参数，使得在该模型下观测序列概率$P(O|\lambda)$最大。即用极大似然估计的方法估计参数。Baum-Welch算法，也就是EM算法可以高效地对隐马尔可夫模型进行训练。它是一种非监督学习算法。</p><p>4．预测问题。已知模型$\lambda=(A, B, \pi)$和观测序列$O＝(o_1，o_2,…,o_T)$，求对给定观测序列条件概率$P(I|O)$最大的状态序列$I＝(i_1，i_2,…,i_T)$。维特比算法应用动态规划高效地求解最优路径，即概率最大的状态序列。</p><p>在本次实验中，HMM模型，主要确定了QVAOPI，而直接用逻辑回归模型，进行建模运算时，B值的状态概率会出现100这种情况，导致HMM的似然函数的概率不会改变</p><p>array([[846,   0,   0],<br>       [ 60,   0,   0],<br>       [ 27,   0,   0]], dtype=int64)</p><p>参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HiddenMarkov</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, Q, V, A, B, O, PI)</span>:</span>  <span class="comment"># 使用前向算法</span></span><br><span class="line">        N = len(Q)  <span class="comment">#可能存在的状态数量</span></span><br><span class="line">        M = len(O)  <span class="comment"># 观测序列的大小</span></span><br><span class="line">        alphas = np.zeros((N, M))  <span class="comment"># alpha值</span></span><br><span class="line">        T = M  <span class="comment"># 有几个时刻，有几个观测序列，就有几个时刻</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(T):  <span class="comment"># 遍历每一时刻，算出alpha值</span></span><br><span class="line">            indexOfO = V.index(O[t])  <span class="comment"># 找出序列对应的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">if</span> t == <span class="number">0</span>:  <span class="comment"># 计算初值</span></span><br><span class="line">                    alphas[i][t] = PI[t][i] * B[i][indexOfO]  <span class="comment"># P176（10.15）</span></span><br><span class="line">                    print(</span><br><span class="line">                        <span class="string">'alpha1(%d)=p%db%db(o1)=%f'</span> % (i, i, i, alphas[i][t]))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    alphas[i][t] = np.dot(</span><br><span class="line">                        [alpha[t - <span class="number">1</span>] <span class="keyword">for</span> alpha <span class="keyword">in</span> alphas],</span><br><span class="line">                        [a[i] <span class="keyword">for</span> a <span class="keyword">in</span> A]) * B[i][indexOfO]  <span class="comment"># 对应P176（10.16）</span></span><br><span class="line">                    print(<span class="string">'alpha%d(%d)=[sigma alpha%d(i)ai%d]b%d(o%d)=%f'</span> %</span><br><span class="line">                          (t, i, t - <span class="number">1</span>, i, i, t, alphas[i][t]))</span><br><span class="line">                    <span class="comment"># print(alphas)</span></span><br><span class="line">        P = np.sum([alpha[M - <span class="number">1</span>] <span class="keyword">for</span> alpha <span class="keyword">in</span> alphas])  <span class="comment"># P176(10.17)</span></span><br><span class="line">        <span class="comment"># alpha11 = pi[0][0] * B[0][0]    #代表a1(1)</span></span><br><span class="line">        <span class="comment"># alpha12 = pi[0][1] * B[1][0]    #代表a1(2)</span></span><br><span class="line">        <span class="comment"># alpha13 = pi[0][2] * B[2][0]    #代表a1(3)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self, Q, V, A, B, O, PI)</span>:</span>  <span class="comment"># 后向算法</span></span><br><span class="line">        N = len(Q)  <span class="comment"># 可能存在的状态数量</span></span><br><span class="line">        M = len(O)  <span class="comment"># 观测序列的大小</span></span><br><span class="line">        betas = np.ones((N, M))  <span class="comment"># beta</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            print(<span class="string">'beta%d(%d)=1'</span> % (M, i))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(M - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            indexOfO = V.index(O[t + <span class="number">1</span>])  <span class="comment"># 找出序列对应的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                betas[i][t] = np.dot(</span><br><span class="line">                    np.multiply(A[i], [b[indexOfO] <span class="keyword">for</span> b <span class="keyword">in</span> B]),</span><br><span class="line">                    [beta[t + <span class="number">1</span>] <span class="keyword">for</span> beta <span class="keyword">in</span> betas])</span><br><span class="line">                realT = t + <span class="number">1</span></span><br><span class="line">                realI = i + <span class="number">1</span></span><br><span class="line">                print(</span><br><span class="line">                    <span class="string">'beta%d(%d)=[sigma a%djbj(o%d)]beta%d(j)=('</span> %</span><br><span class="line">                    (realT, realI, realI, realT + <span class="number">1</span>, realT + <span class="number">1</span>),</span><br><span class="line">                    end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    print(</span><br><span class="line">                        <span class="string">"%.2f*%.2f*%.2f+"</span> % (A[i][j], B[j][indexOfO],</span><br><span class="line">                                             betas[j][t + <span class="number">1</span>]),</span><br><span class="line">                        end=<span class="string">''</span>)</span><br><span class="line">                print(<span class="string">"0)=%.3f"</span> % betas[i][t])</span><br><span class="line">        <span class="comment"># print(betas)</span></span><br><span class="line">        indexOfO = V.index(O[<span class="number">0</span>])</span><br><span class="line">        P = np.dot(</span><br><span class="line">            np.multiply(PI, [b[indexOfO] <span class="keyword">for</span> b <span class="keyword">in</span> B]),</span><br><span class="line">            [beta[<span class="number">0</span>] <span class="keyword">for</span> beta <span class="keyword">in</span> betas])</span><br><span class="line">        print(<span class="string">"P(O|lambda)="</span>, end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            print(</span><br><span class="line">                <span class="string">"%.1f*%.1f*%.5f+"</span> % (PI[<span class="number">0</span>][i], B[i][indexOfO], betas[i][<span class="number">0</span>]),</span><br><span class="line">                end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"0=%f"</span> % P)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">viterbi</span><span class="params">(self, Q, V, A, B, O, PI)</span>:</span></span><br><span class="line">        N = len(Q)  <span class="comment">#可能存在的状态数量</span></span><br><span class="line">        M = len(O)  <span class="comment"># 观测序列的大小</span></span><br><span class="line">        deltas = np.zeros((N, M))</span><br><span class="line">        psis = np.zeros((N, M))</span><br><span class="line">        I = np.zeros((<span class="number">1</span>, M))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(M):</span><br><span class="line">            realT = t + <span class="number">1</span></span><br><span class="line">            indexOfO = V.index(O[t])  <span class="comment"># 找出序列对应的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                realI = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">                    deltas[i][t] = PI[<span class="number">0</span>][i] * B[i][indexOfO]</span><br><span class="line">                    psis[i][t] = <span class="number">0</span></span><br><span class="line">                    print(<span class="string">'delta1(%d)=pi%d * b%d(o1)=%.2f * %.2f=%.2f'</span> %</span><br><span class="line">                          (realI, realI, realI, PI[<span class="number">0</span>][i], B[i][indexOfO],</span><br><span class="line">                           deltas[i][t]))</span><br><span class="line">                    print(<span class="string">'psis1(%d)=0'</span> % (realI))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    deltas[i][t] = np.max(</span><br><span class="line">                        np.multiply([delta[t - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas],</span><br><span class="line">                                    [a[i] <span class="keyword">for</span> a <span class="keyword">in</span> A])) * B[i][indexOfO]</span><br><span class="line">                    print(</span><br><span class="line">                        <span class="string">'delta%d(%d)=max[delta%d(j)aj%d]b%d(o%d)=%.2f*%.2f=%.5f'</span></span><br><span class="line">                        % (realT, realI, realT - <span class="number">1</span>, realI, realI, realT,</span><br><span class="line">                           np.max(</span><br><span class="line">                               np.multiply([delta[t - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas],</span><br><span class="line">                                           [a[i] <span class="keyword">for</span> a <span class="keyword">in</span> A])), B[i][indexOfO],</span><br><span class="line">                           deltas[i][t]))</span><br><span class="line">                    psis[i][t] = np.argmax(</span><br><span class="line">                        np.multiply(</span><br><span class="line">                            [delta[t - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas],</span><br><span class="line">                            [a[i]</span><br><span class="line">                             <span class="keyword">for</span> a <span class="keyword">in</span> A])) + <span class="number">1</span>  <span class="comment">#由于其返回的是索引，因此应+1才能和正常的下标值相符合。</span></span><br><span class="line">                    print(<span class="string">'psis%d(%d)=argmax[delta%d(j)aj%d]=%d'</span> %</span><br><span class="line">                          (realT, realI, realT - <span class="number">1</span>, realI, psis[i][t]))</span><br><span class="line">        print(deltas)</span><br><span class="line">        print(psis)</span><br><span class="line">        I[<span class="number">0</span>][M - <span class="number">1</span>] = np.argmax([delta[M - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas</span><br><span class="line">                                 ]) + <span class="number">1</span>  <span class="comment">#由于其返回的是索引，因此应+1才能和正常的下标值相符合。</span></span><br><span class="line">        print(<span class="string">'i%d=argmax[deltaT(i)]=%d'</span> % (M, I[<span class="number">0</span>][M - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(M - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            I[<span class="number">0</span>][t] = psis[int(I[<span class="number">0</span>][t + <span class="number">1</span>]) - <span class="number">1</span>][t + <span class="number">1</span>]</span><br><span class="line">            print(<span class="string">'i%d=psis%d(i%d)=%d'</span> % (t + <span class="number">1</span>, t + <span class="number">2</span>, t + <span class="number">2</span>, I[<span class="number">0</span>][t]))</span><br><span class="line">        print(<span class="string">"状态序列I："</span>, I)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Q = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">V = [<span class="string">'红'</span>, <span class="string">'白'</span>]</span><br><span class="line">A = [[<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.3</span>], [<span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">0.2</span>], [<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.5</span>]]</span><br><span class="line">B = [[<span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.4</span>, <span class="number">0.6</span>], [<span class="number">0.7</span>, <span class="number">0.3</span>]]</span><br><span class="line">O = [<span class="string">'红'</span>, <span class="string">'白'</span>, <span class="string">'红'</span>, <span class="string">'红'</span>, <span class="string">'白'</span>, <span class="string">'红'</span>, <span class="string">'白'</span>, <span class="string">'白'</span>]</span><br><span class="line">PI = [[<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.5</span>]]</span><br><span class="line">HMM = HiddenMarkov()</span><br><span class="line"><span class="comment"># HMM.forward(Q, V, A, B, O, PI)</span></span><br><span class="line"><span class="comment"># HMM.backward(Q, V, A, B, O, PI)</span></span><br><span class="line">HMM.viterbi(Q, V, A, B, O, PI)</span><br><span class="line">HMM.forward(Q, V, A, B, O, PI)</span><br><span class="line">HMM.backward(Q, V, A, B, O, PI)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值作为状态的划分</span></span><br><span class="line">Y_X = [<span class="number">0</span> <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; y1_mean <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列阶段的划分</span></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 14个值的平均值小于1即为0</span></span><br><span class="line"><span class="comment"># 还是用均值作为状态的划分</span></span><br><span class="line">Y_Z = [<span class="number">0</span> <span class="keyword">if</span> list_z_y[i] &lt; y1_mean <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y))]</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'总数目：<span class="subst">&#123;len(Y_Z)&#125;</span>, 阶段0的数目<span class="subst">&#123;len(Y_Z) - num&#125;</span>, 阶段1的数目<span class="subst">&#123;num&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">num_1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        num_1 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'序列中出现1阶段的次数<span class="subst">&#123;num_1&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    x1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            x1.append(int(list_data[i][<span class="number">2</span>]))</span><br><span class="line">    Y.append(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算1状态时，出现1的概率</span></span><br><span class="line">num_2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][j] == <span class="number">1</span>:</span><br><span class="line">                num_2 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'状态1中出现1的次数<span class="subst">&#123;num_2&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1中出现1的概率<span class="subst">&#123;num_2/(num*<span class="number">14</span>)&#125;</span>'</span>)</span><br><span class="line">B = [[<span class="number">1</span> - (num_1 - num_2) / ((len(Y_Z) - num) * <span class="number">14</span>), (num_1 - num_2) / ((len(Y_Z) - num) * <span class="number">14</span>)],</span><br><span class="line">     [<span class="number">1</span> - num_2 / (num * <span class="number">14</span>), num_2 / (num * <span class="number">14</span>)]]</span><br><span class="line">print(<span class="string">f'在阈值线为平均值下的'</span></span><br><span class="line">      <span class="string">f'<span class="subst">&#123;B&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>利用平均值作为阈值时的B值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.9118926758520667</span>, <span class="number">0.08810732414793329</span>], </span><br><span class="line"></span><br><span class="line">[<span class="number">0.8428571428571429</span>, <span class="number">0.15714285714285714</span>]]</span><br></pre></td></tr></table></figure><p>利用1作为阈值时的B值为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Y_X = [<span class="number">0</span> <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">Y_Z = [<span class="number">0</span> <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y))]</span><br><span class="line"></span><br><span class="line">[[<span class="number">0.78535170413343</span>, <span class="number">0.21464829586656997</span>], </span><br><span class="line">[<span class="number">0.8428571428571429</span>, <span class="number">0.15714285</span></span><br><span class="line"> <span class="number">714285714</span>]]</span><br></pre></td></tr></table></figure><p>比较下最大似然值</p><p>均值下的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始概率矩阵[[<span class="number">0.9041184041184042</span>, <span class="number">0.09588159588159584</span>]]</span><br><span class="line">状态转移概率矩阵：[[<span class="number">0.9964114832535885</span>, <span class="number">0.0035885167464114833</span>], [<span class="number">0.26804123711340205</span>, <span class="number">0.7319587628865979</span>]]</span><br><span class="line">均值下的似然估计值为：    <span class="number">-955.2942841591449</span></span><br><span class="line">分类为<span class="number">2</span>均值下的BIC为：<span class="number">-1028.7801594684208</span></span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">1.29445779e-05</span>  <span class="number">5.27657348e-06</span> <span class="number">-2.44868582e-02</span>  <span class="number">3.68198497e+00</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[<span class="number">-4.52277323</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[ <span class="number">0.00304877</span> <span class="number">-0.00165371</span>]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[<span class="number">-2.00454762</span>]</span><br></pre></td></tr></table></figure><p>1值下的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始概率矩阵[[<span class="number">0.7918275418275418</span>, <span class="number">0.20817245817245822</span>]]</span><br><span class="line">状态转移概率矩阵：[[<span class="number">0.984869325997249</span>, <span class="number">0.015130674002751032</span>], [<span class="number">0.4029126213592233</span>, <span class="number">0.5970873786407767</span>]]</span><br><span class="line"><span class="number">1</span>值下的似然估计值为：    <span class="number">-1589.5001457084938</span></span><br><span class="line">分类为<span class="number">2</span>阈值为<span class="number">1</span>下的BIC为：<span class="number">-1662.9860210177699</span></span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">3.54342024e-05</span>  <span class="number">6.64259922e-05</span> <span class="number">-4.34313674e-03</span>  <span class="number">3.76444931e+00</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[<span class="number">-2.26616719</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[<span class="number">-0.02040833</span> <span class="number">-0.00606398</span>]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[<span class="number">-1.81251543</span>]</span><br></pre></td></tr></table></figure><p>主要还是根据阈值线，来进行判定，BIC这些值的大小</p><p><img src="http://i0.hdslb.com/bfs/article/72162a4abb1e6b985db79d35a2c2d4b9caaf6a3a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HMM中的B值确定&quot;&gt;&lt;a href=&quot;#HMM中的B值确定&quot; class=&quot;headerlink&quot; title=&quot;HMM中的B值确定&quot;&gt;&lt;/a&gt;HMM中的B值确定&lt;/h1&gt;&lt;p&gt;1．隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HMM模型的学习</title>
    <link href="https://esyyes.github.io/2020/07/04/HMM/HMM%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2020/07/04/HMM/HMM%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-04T06:33:33.000Z</published>
    <updated>2020-07-04T06:33:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HMM模型"><a href="#HMM模型" class="headerlink" title="HMM模型"></a>HMM模型</h1><h2 id="马尔科夫模型"><a href="#马尔科夫模型" class="headerlink" title="马尔科夫模型"></a>马尔科夫模型</h2><p> 马尔可夫模型（Markov Model）是一种统计模型，广泛应用在语音识别，词性自动标注，音字转换，概率文法等各个自然语言处理等应用领域。经过长期发展，尤其是在语音识别中的成功应用，使它成为一种通用的统计工具。 </p><p> <a href="https://baike.baidu.com/item/马尔可夫模型/4017874?fromtitle=马尔科夫模型&fromid=11231643&fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/4017874?fromtitle=%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8B&amp;fromid=11231643&amp;fr=aladdin</a> </p><p><img src="https://bkimg.cdn.bcebos.com/pic/7acb0a46f21fbe090f93240c64600c338644addd?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2U4MA==,xp_5,yp_5" alt=""></p><p> 在给定当前只是或信息的情况下，过去（即当前以前的历史状态），对于预测将来（即当前以后的未来状态）是无关的 </p><p> 每个状态的转移只依赖与之前的n个状态，这个过程被称为1个n阶的模型，其中n是影响转移状态的数目。最简单的马尔科夫过程是一阶过程，用数学表达式表示就是下面的形式： </p><h2 id="HMM模型-1"><a href="#HMM模型-1" class="headerlink" title="HMM模型"></a>HMM模型</h2><p> <strong>隐马尔可夫模型</strong>（Hidden Markov Model，HMM）是统计模型，它用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数。然后利用这些参数来作进一步的分析，例如模式识别。 </p><p> <a href="https://www.cnblogs.com/fulcra/p/11065474.html" target="_blank" rel="noopener">https://www.cnblogs.com/fulcra/p/11065474.html</a> </p><p> 假设我手里有三个不同的骰子。第一个骰子是我们平常见的骰子（称这个骰子为D6），6个面，每个面（1，2，3，4，5，6）出现的概率是1/6。第二个骰子是个四面体（称这个骰子为D4），每个面（1，2，3，4）出现的概率是1/4。第三个骰子有八个面（称这个骰子为D8），每个面（1，2，3，4，5，6，7，8）出现的概率是1/8。 </p><p> <a href="https://www.bilibili.com/video/BV1DK411W7jJ" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1DK411W7jJ</a> </p><p> <img src="https://images0.cnblogs.com/blog/133059/201507/161450315321886.png" alt="image"></p><p> 假设我们开始掷骰子，我们先从三个骰子里挑一个，挑到每一个骰子的概率都是1/3。然后我们掷骰子，得到一个数字，1，2，3，4，5，6，7，8中的一个。不停的重复上述过程，我们会得到一串数字，每个数字都是1，2，3，4，5，6，7，8中的一个。例如我们可能得到这么一串数字（掷骰子10次）：<strong>1 6 3 5 2 7 3 5 2 4</strong></p><p><strong>这串数字叫做可见状态链。</strong>但是在隐马尔可夫模型中，我们不仅仅有这么一串可见状态链，还有一串隐含状态链。在这个例子里，这串隐含状态链就是你用的骰子的序列。比如，隐含状态链有可能是：D6 D8 D8 D6 D4 D8 D6 D6 D4 D8</p><p>一般来说，HMM中说到的马尔可夫链其实是指隐含状态链，因为隐含状态（骰子）之间存在转换概率（transition probability）。在我们这个例子里，D6的下一个状态是D4，D6，D8的概率都是1/3。D4，D8的下一个状态是D4，D6，D8的转换概率也都一样是1/3。这样设定是为了最开始容易说清楚，但是我们其实是可以随意设定转换概率的。比如，我们可以这样定义，D6后面不能接D4，D6后面是D6的概率是0.9，是D8的概率是0.1。这样就是一个新的HMM。</p><p>同样的，尽管可见状态之间没有转换概率，但是隐含状态和可见状态之间有一个概率叫做输出概率（emission probability）。就我们的例子来说，六面骰（D6）产生1的输出概率是1/6。产生2，3，4，5，6的概率也都是1/6。我们同样可以对输出概率进行其他定义。比如，我有一个被赌场动过手脚的六面骰子，掷出来是1的概率更大，是1/2，掷出来是2，3，4，5，6的概率是1/10。</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593864632072.png" alt="1593864632072"></p><p>回到正题，和HMM模型相关的算法主要分为三类，分别解决三种问题： </p><p> <strong>1）知道骰子有几种（隐含状态数量），每种骰子是什么（转换概率），根据掷骰子掷出的结果（可见状态链），我想知道每次掷出来的都是哪种骰子（隐含状态链）。</strong> </p><p> 这个问题呢，在语音识别领域呢，叫做<strong>解码问题</strong>。这个问题其实有两种解法，会给出两个不同的答案。每个答案都对，只不过这些答案的意义不一样。第一种解法求<strong>最大似然状态路径</strong>，说通俗点呢，就是我求一串骰子序列，这串骰子序列产生观测结果的概率最大。第二种解法呢，就不是求一组骰子序列了，而是求每次掷出的骰子分别是某种骰子的概率。比如说我看到结果后，我可以求得第一次掷骰子是D4的概率是0.5，D6的概率是0.3，D8的概率是0.2.第一种解法我会在下面说到，但是第二种解法我就不写在这里了，如果大家有兴趣，我们另开一个问题继续写吧。</p><p><strong>2）还是知道骰子有几种**</strong></p><p>（隐含状态数量），每种骰子是什么（<strong>转换概率</strong>），根据掷骰子掷出的结果（可见状态链），我想知道掷出这个结果的概率。**<br>   看似这个问题意义不大，因为你掷出来的结果很多时候都对应了一个比较大的概率。问这个问题的目的呢，其实是检测观察到的结果和已知的模型是否吻合。如果很多次结果都对应了比较小的概率，那么就说明我们已知的模型很有可能是错的，有人偷偷把我们的骰子給换了。</p><p><strong>3）知道骰子有几种**</strong></p><p>（隐含状态数量），不知道每种骰子是什么（<strong>转换概率</strong>），观测到很多次掷骰子的结果（可见状态链），我想反推出每种骰子是什么（转换概率）。**<br>   这个问题很重要，因为这是最常见的情况。很多时候我们只有<strong>可见结果，不知道HMM模型里的参数，我们需要从可见结果估计出这些参数</strong>，这是建模的一个必要步骤。</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865330505.png" alt="1593865330505"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865385128.png" alt="1593865350351"></p><h2 id="隐马尔科夫模型"><a href="#隐马尔科夫模型" class="headerlink" title="隐马尔科夫模型"></a>隐马尔科夫模型</h2><p>总结就是一个<strong>学习问题</strong>，</p><p>然后判断时有监督学习还是无监督学习</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865770153.png" alt="1593865770153"></p><p><strong>有监督学习</strong>：观测序列和状态序列都要有： 极大似然法（pi, A, B）</p><p>无监督学习：观测序列,em算法，</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865922973.png" alt="1593865922973"></p><p>马尔科夫模型是一种具有代表性的一阶概率统计模型。隐马尔科夫模型<br>强调了不确定性和潜在性，正是由于这种性质，满足现实生活中诸多问题的<br>基本要求，因此研究人员经常用该模型进行实际状态与行为之间问题的抽象<br>研究与概况。隐马尔科夫模型对于潜在和随机的真实问题有着高度的拟合性，<br>也存在着诸多的优势。隐马尔科夫模型是一个双重随机概率模型，该该型的<br>一般结构是 </p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593866078621.png" alt="1593866078621"></p><h3 id="隐马尔科夫模型的三个基本问题"><a href="#隐马尔科夫模型的三个基本问题" class="headerlink" title="隐马尔科夫模型的三个基本问题"></a>隐马尔科夫模型的三个基本问题</h3><h4 id="（1）评估问题"><a href="#（1）评估问题" class="headerlink" title="（1）评估问题"></a>（1）评估问题</h4><p>隐马尔科夫模型的评估问题是，已知一个隐藏状态序列对应的观察值序<br>列 O=O1O2…OT，同时已知确定了基本组成矩阵的模型 λ(π，Q，A)的条件下，<br>输入一组待实现的观察值样本序列，计算得到该模型条件下生成该样本序列<br>的概率，即 P（O/λ） 。在隐马尔科夫模型的评估问题中，计算得到已知模型<br>组成部分下的条件概率的算法被称为前向算法。评估问题的目的是在于根据<br>模型产生待实现的观察值序列的大小，如果产生该序列的概率越大，则说明<br>模型解决该样本序列作为实际问题的能力就越强，进而判断已知模型对待解<br>决问题的适用性。  （2）解码问题 </p><p>隐马尔科夫模型的评估问题是，已知一个隐藏状态序列对应的观察值序<br>列 O=O1O2…OT，同时已知确定了基本组成矩阵的模型 λ(π，Q，A)的条件下，<br>利用算法进行计算，能够快速有效的选择一定程度下的最好的状态序列<br>Q=Q1Q2。 。 。QT，生成这一隐藏状态序列的概率值最大，能够很好的满足对观<br>察值序列的解释。隐马尔科夫模型的评估问题使用的算法为维特比算法，解<br>码问题的目的是确定最适宜的隐藏状态量的序列，这种最适合并没有明确的<br>定义和规范，根据具体的现实研究问题进行具体的界定。 </p><h4 id="（3）学习问题"><a href="#（3）学习问题" class="headerlink" title="（3）学习问题"></a>（3）学习问题</h4><p>隐马尔科夫模型的学习问题是实际问题中最常见的问题类型。在隐马尔<br>科夫模型的学习问题中，仅仅能够已知一组输出的模型状态观察值的序列<br>O=O1O2…OT，对隐马尔科夫模型 λ(π，Q，A)中的基本组成部分并不能直接<br>确定，根据已有的观察值样本数据，对模型进行反复的训练和评价，调节模<br>型 λ(π，Q，A)中的三个基本部分的参数，使得输出该观察值序列的概率值<br>最大，即通过学习训练过程使得该模型具备最优的拟合程度。隐马尔科夫模<br>型的学习问题中，主要是通过<strong>前向后向算法（Baum-Welch 算法）</strong>来进行训<br>练和学习的；在模型训练学习中，最常见的是采用<strong>贝叶斯分析方法和最大似</strong><br><strong>然估计方法</strong>，对模型中的参数进行评估和优化，保证模型至少达到局部最优。</p><p>在实际问题的研究中，通常都只能<strong>获取到输出序列值</strong>，因此<strong>前向-后向</strong><br><strong>算法实现隐马尔科夫模型的训练学习问题</strong>具有广泛应用。</p><p>2、模型学习问题：已知观测序列，估计模型中的参数，使得在该模型下观测序列概率最大，即用极大似然估计的方法估计参数。</p><p>Baum-Welch算法解决的是一个模型训练问题，即参数估计，是一种无监督的训练方法，主要通过EM迭代实现；即只有观测序列，无状态序列时训练模型。</p><p>极大似然估计：观测序列和相应的状态序列都存在的监督学习算法，用来估计参数。</p><p>主要用到这两个，然后现在就是学习EM迭代，和用最大似然估计来确定参数！</p><p>第一步是确定，状态数目，或者是生产转移矩阵。</p><p><img src="http://pic.rmb.bdstatic.com/b86ca7466d43fae63a58735e15aa54c53717.jpeg@c_1,w_1280,h_1024,x_0,y_0" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HMM模型&quot;&gt;&lt;a href=&quot;#HMM模型&quot; class=&quot;headerlink&quot; title=&quot;HMM模型&quot;&gt;&lt;/a&gt;HMM模型&lt;/h1&gt;&lt;h2 id=&quot;马尔科夫模型&quot;&gt;&lt;a href=&quot;#马尔科夫模型&quot; class=&quot;headerlink&quot; title=&quot;马
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>交叉验证</title>
    <link href="https://esyyes.github.io/2020/07/02/sleep%20apnea%20and%20sleep%20stage/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/"/>
    <id>https://esyyes.github.io/2020/07/02/sleep%20apnea%20and%20sleep%20stage/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/</id>
    <published>2020-07-02T00:49:24.000Z</published>
    <updated>2020-07-02T00:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h1><h2 id="交叉验证：评估估算器的表现"><a href="#交叉验证：评估估算器的表现" class="headerlink" title="交叉验证：评估估算器的表现"></a>交叉验证：评估估算器的表现</h2><p>学习预测函数的参数，并在相同数据集上进行测试是一种错误的做法: 一个仅给出测试用例标签的模型将会获得极高的分数，但对于尚未出现过的数据它则无法预测出任何有用的信息。 这种情况称为 overfitting（过拟合）. 为了避免这种情况，在进行（监督）机器学习实验时，通常取出部分可利用数据作为 test set（测试数据集）</p><h2 id="置信区间"><a href="#置信区间" class="headerlink" title="置信区间"></a>置信区间</h2><p> <a href="https://baike.baidu.com/item/置信区间/7442583?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4/7442583?fr=aladdin</a> </p><p> 置信区间是指由<a href="https://baike.baidu.com/item/样本统计量/7378689" target="_blank" rel="noopener">样本统计量</a>所构造的总体参数的估计区间。在统计学中，一个<a href="https://baike.baidu.com/item/概率/828845" target="_blank" rel="noopener">概率</a>样本的置信区间（Confidence interval）是对这个样本的某个总体参数的<a href="https://baike.baidu.com/item/区间估计/6611490" target="_blank" rel="noopener">区间估计</a>。 </p><p> 置信区间与置信水平、样本量等因素均有关系，其中<a href="https://baike.baidu.com/item/样本量" target="_blank" rel="noopener">样本量</a>对置信区间的影响为：在<a href="https://baike.baidu.com/item/置信水平" target="_blank" rel="noopener">置信水平</a>固定的情况下，样本量越多，置信区间越窄。其次，在<a href="https://baike.baidu.com/item/样本量" target="_blank" rel="noopener">样本量</a>相同的情况下，置信水平越高，置信区间越宽 </p><p>95%置信区间（Confidence Interval,CI）：当给出某个估计值的95%置信区间为【a,b】时，可以理解为我们有95%的信心（Confidence）可以说样本的平均值介于a到b之间，而发生错误的概率为5%。 </p><p> 有时也会说90%，99%的置信区间，具体含义可参考95%置信区间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Accuracy: %0.2f (+/- %0.2f)"</span> % (scores.mean(), scores.std() * <span class="number">2</span>))</span><br><span class="line">Accuracy: <span class="number">0.98</span> (+/- <span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><h2 id="交叉验证-1"><a href="#交叉验证-1" class="headerlink" title="交叉验证"></a>交叉验证</h2><p>用来验证分类器的性能一种统计分析方法，基本思想是把在某种意义下将原始数据(data set)进行分组，一部分做为训练集(training set)，另一部分做为验证集(validation set)，首先用训练集对分类器进行训练，在利用验证集来测试训练得到的模型(model)，以此来做为评价分类器的性能指标。</p><h3 id="k折交叉验证-k-fold-cross-validation"><a href="#k折交叉验证-k-fold-cross-validation" class="headerlink" title="k折交叉验证(k-fold cross validation)"></a>k折交叉验证(k-fold cross validation)</h3><p>将数据集无替换的随机分为k份，k-1份用来训练模型，剩下一份用来模型性能评估。重复k次，得到k个模型和性能评估结果。得到k个性能评估后，取平均求出最终性能评估。即：<br>第一步：不重复抽样将原始数据随机分为k份。<br>第二步：每一次挑选其中 1 份作为测试集，剩余k-1份作为训练集用于模型训练。<br>第三步：重复第二步k次，每个子集都有一次作为测试集，其余子集作为训练集。在每个训练集上训练后得到一个模型，用这个模型在相应测试集上测试，计算并保存模型的评估指标。<br>第四步：计算k组测试结果的平均值作为模型精度的估计，并作为当前k折交叉验证下模型的性能指标。</p><p>优点：分组后取平均减少方差，使得模型对数据划分不敏感。<br>缺点：k取值需要尝试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/30 0030</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> acr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feature = pd.read_excel(<span class="string">'D:/zccode/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">note = pd.read_excel(<span class="string">'D:/zccode/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定固定的特征值</span></span><br><span class="line">feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % <span class="number">2</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:<span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">std_data = data_pre(data[df.keys()])</span><br><span class="line">label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), <span class="number">2</span>:<span class="number">3</span>])</span><br><span class="line">scores = cross_val_score(RandomForestClassifier(), std_data, label, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;scores&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">"Accuracy: %0.2f (+/- %0.2f)"</span> % (scores.mean(), scores.std() * <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0.88</span>       <span class="number">0.92</span>       <span class="number">0.86956522</span> <span class="number">0.91304348</span> <span class="number">0.95652174</span> <span class="number">1.</span></span><br><span class="line"> <span class="number">1.</span>         <span class="number">0.86363636</span> <span class="number">1.</span>         <span class="number">0.59090909</span>]</span><br><span class="line">Accuracy: <span class="number">0.90</span> (+/- <span class="number">0.23</span>)</span><br></pre></td></tr></table></figure><p>交叉验证K值的确定，找一个样本很平均的，然后再去利用样本来进行判定</p><h2 id="交叉验证的作用："><a href="#交叉验证的作用：" class="headerlink" title="交叉验证的作用："></a>交叉验证的作用：</h2><h3 id="评估模型的稳定性及调参"><a href="#评估模型的稳定性及调参" class="headerlink" title="评估模型的稳定性及调参"></a>评估模型的稳定性及调参</h3><p>比如5折交叉验证，在参数确定了的情况下，我们可以将数据弄成五份，每一份中80%训练，20%作为测试集，这样可以训练五个模型，这五个模型除了训练集测试集不同外，其他的都相同，这样我们可以得到五个模型的评估指标比如<strong>auc</strong>,计算五个模型得到的<strong>auc的方差</strong>，如果方差小说明模型的泛化性比较好，模型比较稳定是个好模型，否则说明模型泛化性不好。<br>xgboost中cv函数返回的值包括两个，一个是单模型的评价指标（比如auc），另外一个是模型的方差。</p><p>参数不确定的情况下，我们通过<strong>模型的准确性和稳定性</strong>来选择最合适的参数。<br> <a href="https://blog.csdn.net/weixin_41060109/article/details/80878325?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41060109/article/details/80878325?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase</a> </p><p> 在实际训练中，模型通常对训练数据好，但是对训练数据之外的数据拟合程度差。用于<strong>评价模型的泛化能力</strong>，从而进行<strong>模型选择</strong>。 </p><h2 id="交叉验证的初步目标"><a href="#交叉验证的初步目标" class="headerlink" title="交叉验证的初步目标"></a>交叉验证的初步目标</h2><p>初步选择大部分的模型，然后通过交叉验证，例如：10次10折，先初步去筛选得到性能效果好的模型，然后再对这几个好的模型，进行网格搜索的超参数优化</p><p>交叉验证得到一个准确率，但是不能用准确率这个指标去直接判定分类器的性能</p><p>最后用混淆矩阵、精度、召回率等去评估分类的效果和性能</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593683305451&di=084be09798a996ba20acd53f72f8e663&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F1e4a2abbb0ec1309578de3741b1c7619c7a34c4f2834b-zmvQca_fw658" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;交叉验证&quot;&gt;&lt;a href=&quot;#交叉验证&quot; class=&quot;headerlink&quot; title=&quot;交叉验证&quot;&gt;&lt;/a&gt;交叉验证&lt;/h1&gt;&lt;h2 id=&quot;交叉验证：评估估算器的表现&quot;&gt;&lt;a href=&quot;#交叉验证：评估估算器的表现&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>中期答辩题目</title>
    <link href="https://esyyes.github.io/2020/06/29/sleep%20apnea%20and%20sleep%20stage/%E4%B8%AD%E6%9C%9F%E7%AD%94%E8%BE%A9%E9%A2%98%E7%9B%AE/"/>
    <id>https://esyyes.github.io/2020/06/29/sleep%20apnea%20and%20sleep%20stage/%E4%B8%AD%E6%9C%9F%E7%AD%94%E8%BE%A9%E9%A2%98%E7%9B%AE/</id>
    <published>2020-06-29T02:58:18.000Z</published>
    <updated>2020-06-29T02:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中期答辩题目"><a href="#中期答辩题目" class="headerlink" title="中期答辩题目"></a>中期答辩题目</h1><p>考虑睡眠分期、睡眠质量、睡眠呼吸暂停、心电信号、特征选择</p><p>​         睡眠相关的理论知识，包括睡眠周期性，睡眠分期方法以及睡眠呼吸暂停等。  </p><p>参考题目：基于PVDF的睡眠监测系统设计与实现</p><p>直接将睡眠这几个统计到睡眠</p><p>基于心电信号的特征选择和睡眠监测方法研究</p><p>基于心电信号的睡眠分期和阻塞性呼吸暂停相关性研究</p><p><strong>基于心电信号的睡眠分期和呼吸暂停检测算法的研究</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;中期答辩题目&quot;&gt;&lt;a href=&quot;#中期答辩题目&quot; class=&quot;headerlink&quot; title=&quot;中期答辩题目&quot;&gt;&lt;/a&gt;中期答辩题目&lt;/h1&gt;&lt;p&gt;考虑睡眠分期、睡眠质量、睡眠呼吸暂停、心电信号、特征选择&lt;/p&gt;
&lt;p&gt;​         睡眠相关的理论知
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>查看分类器对应的数据系列</title>
    <link href="https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E6%9F%A5%E7%9C%8B%E5%88%86%E7%B1%BB%E5%99%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B3%BB%E5%88%97/"/>
    <id>https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E6%9F%A5%E7%9C%8B%E5%88%86%E7%B1%BB%E5%99%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B3%BB%E5%88%97/</id>
    <published>2020-06-24T13:02:27.000Z</published>
    <updated>2020-06-24T13:02:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>不同特征数之间的分类模型比较</title>
    <link href="https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E4%B8%8D%E5%90%8C%E7%89%B9%E5%BE%81%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83/"/>
    <id>https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E4%B8%8D%E5%90%8C%E7%89%B9%E5%BE%81%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83/</id>
    <published>2020-06-24T02:57:17.000Z</published>
    <updated>2020-06-24T02:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不同特征数之间的分类模型比较"><a href="#不同特征数之间的分类模型比较" class="headerlink" title="不同特征数之间的分类模型比较"></a>不同特征数之间的分类模型比较</h1><p>首先确定特征的个数，确定index和特征数之间的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定固定的特征值</span></span><br><span class="line">feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % <span class="number">2</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="number">5</span>NN20    <span class="number">5</span>pNN20    <span class="number">5</span>pNN50     <span class="number">5</span>NN50</span><br><span class="line"><span class="number">0</span>  <span class="number">0.023794</span>  <span class="number">0.023346</span>  <span class="number">0.022757</span>  <span class="number">0.022194</span></span><br></pre></td></tr></table></figure><p>根据设定的index,还是取的是左闭右开，因此对于下面的特征，index 应该为特征数加1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">最大准确率时对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%特征数为<span class="number">15</span></span><br><span class="line">准确率降低<span class="number">1</span>%后对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">78.85</span>%比较筛选的准确率为<span class="number">78.86</span>%特征数为<span class="number">9</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">85.54</span>%比较筛选的准确率为<span class="number">85.66</span>%特征数为<span class="number">8</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">88.15</span>%比较筛选的准确率为<span class="number">88.22</span>%特征数为<span class="number">7</span></span><br></pre></td></tr></table></figure><p>重新跑下结果；</p><p>因此对于最大准确率时，基于特征数的分类模型就该为下面程序</p><h2 id="最大准确率时特征对应的分类结果"><a href="#最大准确率时特征对应的分类结果" class="headerlink" title="最大准确率时特征对应的分类结果"></a>最大准确率时特征对应的分类结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/23 0023</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sleep_class <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        index = <span class="number">24</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">        index = <span class="number">24</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        index = <span class="number">16</span></span><br><span class="line">        class_feature(k, index)</span><br></pre></td></tr></table></figure><h3 id="sleep-class-中的函数"><a href="#sleep-class-中的函数" class="headerlink" title="sleep class 中的函数"></a>sleep class 中的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/23 0023</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> classifiers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_feature</span><span class="params">(k, index)</span>:</span></span><br><span class="line">    class_scores = []</span><br><span class="line">    kappa_scores = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">        feature = pd.read_excel(<span class="string">'D:/zccode/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        note = pd.read_excel(<span class="string">'D:/zccode/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">        feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % (k+<span class="number">1</span>) + <span class="string">'.xlsx'</span>)</span><br><span class="line">        df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:index])</span><br><span class="line"></span><br><span class="line">        std_data = data_pre(data[df.keys()])</span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), k:k+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        class_score = []</span><br><span class="line">        kappa_score = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(std_data, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            score = run_classifiers(X_train, X_test, y_train, y_test)</span><br><span class="line">            class_score.append(score[<span class="number">0</span>])</span><br><span class="line">            kappa_score.append(score[<span class="number">1</span>])</span><br><span class="line">        class_scores.append([(np.array([class_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        kappa_scores.append([(np.array([kappa_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        print(<span class="string">f'已经运行<span class="subst">&#123;i&#125;</span>次'</span>)</span><br><span class="line"></span><br><span class="line">    class_total = pd.DataFrame(class_scores)</span><br><span class="line">    kappa_total = pd.DataFrame(kappa_scores)</span><br><span class="line"></span><br><span class="line">    class_total.to_excel(<span class="string">'feature_section_class'</span> + <span class="string">'%d'</span> % k + <span class="string">".xlsx"</span>)</span><br><span class="line">    kappa_total.to_excel(<span class="string">'feature_section_kappa'</span> + <span class="string">'%d'</span> % k + <span class="string">".xlsx"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'运行一次'</span></span><br></pre></td></tr></table></figure><h2 id="特征降维后的分类结果"><a href="#特征降维后的分类结果" class="headerlink" title="特征降维后的分类结果"></a>特征降维后的分类结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/23 0023</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sleep_class <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        index = <span class="number">10</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">        index = <span class="number">9</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        index = <span class="number">8</span></span><br><span class="line">        class_feature(k, index)</span><br></pre></td></tr></table></figure><p>保存名字为 <strong>features_section_class</strong></p><p>然后将其取平均值，并绘制柱状图</p><h2 id="分类结果"><a href="#分类结果" class="headerlink" title="分类结果"></a>分类结果</h2><p>文件保存为：</p><p>E:\feature section</p><p> <strong>features_section_class</strong>是降维后</p><p> <strong>feature_section_class</strong> 是最开始的数据分类结果</p><p>经过查看，在即使在最高分期准确率的结果下，都会出现数据一部分特别好一部分都很差的情况</p><p>暂时只进行数据的平均分类准确率，然后筛选出最优的分类模型，比较每个模型中最优的结果</p><p>然后再去考虑单独的人，为什么会差距这么大，是什么因素影响了分期准确率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">           <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>  ...         <span class="number">6</span>         <span class="number">7</span>         <span class="number">8</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0.785217</span>  <span class="number">0.862609</span>  <span class="number">0.828406</span>  ...  <span class="number">0.874493</span>  <span class="number">0.879130</span>  <span class="number">0.882029</span></span><br><span class="line"><span class="number">1</span>   <span class="number">0.789143</span>  <span class="number">0.824000</span>  <span class="number">0.843429</span>  ...  <span class="number">0.844952</span>  <span class="number">0.845714</span>  <span class="number">0.847810</span></span><br><span class="line"><span class="number">2</span>   <span class="number">0.834667</span>  <span class="number">0.866286</span>  <span class="number">0.857714</span>  ...  <span class="number">0.848381</span>  <span class="number">0.853524</span>  <span class="number">0.860381</span></span><br><span class="line"><span class="number">3</span>   <span class="number">0.881538</span>  <span class="number">0.890000</span>  <span class="number">0.886154</span>  ...  <span class="number">0.881795</span>  <span class="number">0.864615</span>  <span class="number">0.898718</span></span><br><span class="line"><span class="number">4</span>   <span class="number">0.601373</span>  <span class="number">0.694902</span>  <span class="number">0.687745</span>  ...  <span class="number">0.756569</span>  <span class="number">0.765588</span>  <span class="number">0.768333</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0.754366</span>  <span class="number">0.805540</span>  <span class="number">0.804131</span>  ...  <span class="number">0.850704</span>  <span class="number">0.847512</span>  <span class="number">0.827793</span></span><br><span class="line"><span class="number">6</span>   <span class="number">0.615450</span>  <span class="number">0.674597</span>  <span class="number">0.664171</span>  ...  <span class="number">0.706161</span>  <span class="number">0.702749</span>  <span class="number">0.715735</span></span><br><span class="line"><span class="number">7</span>   <span class="number">0.754732</span>  <span class="number">0.831122</span>  <span class="number">0.803415</span>  ...  <span class="number">0.840293</span>  <span class="number">0.824195</span>  <span class="number">0.845951</span></span><br><span class="line"><span class="number">8</span>   <span class="number">0.811746</span>  <span class="number">0.826984</span>  <span class="number">0.831429</span>  ...  <span class="number">0.822751</span>  <span class="number">0.834921</span>  <span class="number">0.844339</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0.915749</span>  <span class="number">0.928309</span>  <span class="number">0.927246</span>  ...  <span class="number">0.941739</span>  <span class="number">0.935556</span>  <span class="number">0.938744</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0.535238</span>  <span class="number">0.640173</span>  <span class="number">0.591602</span>  ...  <span class="number">0.674026</span>  <span class="number">0.670216</span>  <span class="number">0.669524</span></span><br><span class="line"><span class="number">11</span>  <span class="number">0.695733</span>  <span class="number">0.780800</span>  <span class="number">0.759822</span>  ...  <span class="number">0.809689</span>  <span class="number">0.798489</span>  <span class="number">0.795289</span></span><br><span class="line"><span class="number">12</span>  <span class="number">0.640356</span>  <span class="number">0.700889</span>  <span class="number">0.687911</span>  ...  <span class="number">0.690844</span>  <span class="number">0.696978</span>  <span class="number">0.705422</span></span><br><span class="line"><span class="number">13</span>  <span class="number">0.694667</span>  <span class="number">0.804148</span>  <span class="number">0.751852</span>  ...  <span class="number">0.786519</span>  <span class="number">0.801037</span>  <span class="number">0.811556</span></span><br><span class="line"><span class="number">14</span>  <span class="number">0.803824</span>  <span class="number">0.833137</span>  <span class="number">0.834608</span>  ...  <span class="number">0.841373</span>  <span class="number">0.833529</span>  <span class="number">0.850392</span></span><br><span class="line"><span class="number">15</span>  <span class="number">0.646479</span>  <span class="number">0.679531</span>  <span class="number">0.723192</span>  ...  <span class="number">0.772582</span>  <span class="number">0.776901</span>  <span class="number">0.803474</span></span><br><span class="line"><span class="number">16</span>  <span class="number">0.682636</span>  <span class="number">0.745271</span>  <span class="number">0.743101</span>  ...  <span class="number">0.760930</span>  <span class="number">0.770078</span>  <span class="number">0.758140</span></span><br><span class="line"><span class="number">17</span>  <span class="number">0.668372</span>  <span class="number">0.708837</span>  <span class="number">0.700465</span>  ...  <span class="number">0.719535</span>  <span class="number">0.696744</span>  <span class="number">0.721395</span></span><br></pre></td></tr></table></figure><p>如下表所示，有些列的数据对应起来就并不好，先基于平均值然后再去筛选为什么为地域80%的原因，找单独的数据序列，去对应查看其中的影响因素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>  ...         <span class="number">6</span>         <span class="number">7</span>         <span class="number">8</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0.721449</span>  <span class="number">0.851304</span>  <span class="number">0.764348</span>  ...  <span class="number">0.848116</span>  <span class="number">0.836232</span>  <span class="number">0.851594</span></span><br><span class="line"><span class="number">1</span>   <span class="number">0.712571</span>  <span class="number">0.770095</span>  <span class="number">0.768381</span>  ...  <span class="number">0.808571</span>  <span class="number">0.814476</span>  <span class="number">0.769714</span></span><br><span class="line"><span class="number">2</span>   <span class="number">0.806476</span>  <span class="number">0.858286</span>  <span class="number">0.844000</span>  ...  <span class="number">0.837524</span>  <span class="number">0.842095</span>  <span class="number">0.861905</span></span><br><span class="line"><span class="number">3</span>   <span class="number">0.818205</span>  <span class="number">0.846154</span>  <span class="number">0.870513</span>  ...  <span class="number">0.854103</span>  <span class="number">0.851538</span>  <span class="number">0.856410</span></span><br><span class="line"><span class="number">4</span>   <span class="number">0.495882</span>  <span class="number">0.645000</span>  <span class="number">0.575392</span>  ...  <span class="number">0.700294</span>  <span class="number">0.696961</span>  <span class="number">0.682059</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0.720845</span>  <span class="number">0.784695</span>  <span class="number">0.757934</span>  ...  <span class="number">0.818592</span>  <span class="number">0.814554</span>  <span class="number">0.764225</span></span><br><span class="line"><span class="number">6</span>   <span class="number">0.521991</span>  <span class="number">0.613175</span>  <span class="number">0.576967</span>  ...  <span class="number">0.637820</span>  <span class="number">0.638768</span>  <span class="number">0.635735</span></span><br><span class="line"><span class="number">7</span>   <span class="number">0.676488</span>  <span class="number">0.782634</span>  <span class="number">0.677366</span>  ...  <span class="number">0.799707</span>  <span class="number">0.803220</span>  <span class="number">0.807902</span></span><br><span class="line"><span class="number">8</span>   <span class="number">0.782540</span>  <span class="number">0.819153</span>  <span class="number">0.817460</span>  ...  <span class="number">0.810794</span>  <span class="number">0.820106</span>  <span class="number">0.832698</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0.906377</span>  <span class="number">0.917005</span>  <span class="number">0.916908</span>  ...  <span class="number">0.920000</span>  <span class="number">0.916908</span>  <span class="number">0.920483</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0.484762</span>  <span class="number">0.586667</span>  <span class="number">0.511688</span>  ...  <span class="number">0.642511</span>  <span class="number">0.638182</span>  <span class="number">0.614978</span></span><br><span class="line"><span class="number">11</span>  <span class="number">0.683378</span>  <span class="number">0.739111</span>  <span class="number">0.730667</span>  ...  <span class="number">0.785156</span>  <span class="number">0.779111</span>  <span class="number">0.758222</span></span><br><span class="line"><span class="number">12</span>  <span class="number">0.637956</span>  <span class="number">0.688356</span>  <span class="number">0.688267</span>  ...  <span class="number">0.670578</span>  <span class="number">0.679467</span>  <span class="number">0.688533</span></span><br><span class="line"><span class="number">13</span>  <span class="number">0.528741</span>  <span class="number">0.705778</span>  <span class="number">0.642519</span>  ...  <span class="number">0.723852</span>  <span class="number">0.733333</span>  <span class="number">0.690519</span></span><br><span class="line"><span class="number">14</span>  <span class="number">0.736569</span>  <span class="number">0.810686</span>  <span class="number">0.774216</span>  ...  <span class="number">0.818431</span>  <span class="number">0.817647</span>  <span class="number">0.819118</span></span><br><span class="line"><span class="number">15</span>  <span class="number">0.490704</span>  <span class="number">0.595869</span>  <span class="number">0.573052</span>  ...  <span class="number">0.724413</span>  <span class="number">0.706291</span>  <span class="number">0.639531</span></span><br><span class="line"><span class="number">16</span>  <span class="number">0.666977</span>  <span class="number">0.746202</span>  <span class="number">0.727907</span>  ...  <span class="number">0.754884</span>  <span class="number">0.753488</span>  <span class="number">0.760310</span></span><br><span class="line"><span class="number">17</span>  <span class="number">0.595814</span>  <span class="number">0.668372</span>  <span class="number">0.650233</span>  ...  <span class="number">0.676279</span>  <span class="number">0.657209</span>  <span class="number">0.696279</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/24</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最高准确率时对应特征数，对应的分类准确率</span></span><br><span class="line">feature = pd.read_excel(<span class="string">'E:/feature section'</span> + <span class="string">'/feature_section_class'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">data.rename(columns=&#123;<span class="number">0</span>: <span class="string">'SGD'</span>, <span class="number">1</span>: <span class="string">'SVM'</span>, <span class="number">2</span>: <span class="string">'LSVM'</span>, <span class="number">3</span>: <span class="string">'LR'</span>, <span class="number">4</span>: <span class="string">'KNN'</span>, <span class="number">5</span>: <span class="string">'DT'</span>, <span class="number">6</span>: <span class="string">'RF'</span>, <span class="number">7</span>: <span class="string">'GBT'</span>, <span class="number">8</span>: <span class="string">'NN'</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过1%牺牲后的分类准确率</span></span><br><span class="line">section = pd.read_excel(<span class="string">'E:/feature section'</span> + <span class="string">'/features_section_class'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">df = pd.get_dummies(section.iloc[<span class="number">0</span>:len(section), <span class="number">1</span>:])</span><br><span class="line">df.rename(columns=&#123;<span class="number">0</span>: <span class="string">'SGD'</span>, <span class="number">1</span>: <span class="string">'SVM'</span>, <span class="number">2</span>: <span class="string">'LSVM'</span>, <span class="number">3</span>: <span class="string">'LR'</span>, <span class="number">4</span>: <span class="string">'KNN'</span>, <span class="number">5</span>: <span class="string">'DT'</span>, <span class="number">6</span>: <span class="string">'RF'</span>, <span class="number">7</span>: <span class="string">'GBT'</span>, <span class="number">8</span>: <span class="string">'NN'</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">9</span>)</span><br><span class="line">y1 = [(np.array([np.array(data).tolist()[i][j] * <span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>)])).mean() <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line">y2 = [(np.array([np.array(df).tolist()[i][j] * <span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>)])).mean() <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line">width = <span class="number">0.4</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">7</span>, <span class="number">5</span>))</span><br><span class="line">rects1 = ax.bar(x - width/<span class="number">2</span>, y1, width, color=<span class="string">'SkyBlue'</span>, label=<span class="string">'Before dimensionality reduction'</span>)</span><br><span class="line">rects2 = ax.bar(x + width/<span class="number">2</span>, y2, width, color=<span class="string">'IndianRed'</span>, label=<span class="string">'After dimensionality reduction'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(x, (df.keys()), fontsize=<span class="number">10</span>, rotation=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">'Average Accuracy/%'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">ax.set_title(<span class="string">'DLRW主题下降维前后准确率对比'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">plt.ylim((<span class="number">60</span>, <span class="number">95</span>))</span><br><span class="line">new_ticks = np.linspace(<span class="number">60</span>, <span class="number">95</span>, <span class="number">5</span>)</span><br><span class="line">plt.yticks(new_ticks, fontsize=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> rects1+rects2:</span><br><span class="line">    h = y.get_height()</span><br><span class="line">    ax.text(y.get_x()+y.get_width()/<span class="number">2</span>, h, <span class="string">'%.1f'</span> % h, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.show()</span><br><span class="line">fig.savefig(<span class="string">'feature_class4_number.png'</span>, dpi=<span class="number">1600</span>, bbox_inches=<span class="string">'tight'</span>)</span><br></pre></td></tr></table></figure><p>感觉效果并不好，考虑下一个步骤</p><p><img src="/images/feature_class3_number.png" alt="feature_class3_number"></p><p><img src="http://b-ssl.duitang.com/uploads/item/201610/09/20161009160331_YNsHu.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不同特征数之间的分类模型比较&quot;&gt;&lt;a href=&quot;#不同特征数之间的分类模型比较&quot; class=&quot;headerlink&quot; title=&quot;不同特征数之间的分类模型比较&quot;&gt;&lt;/a&gt;不同特征数之间的分类模型比较&lt;/h1&gt;&lt;p&gt;首先确定特征的个数，确定index和特征数之
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>特征数的确定</title>
    <link href="https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E7%89%B9%E5%BE%81%E6%95%B0%E7%9A%84%E7%A1%AE%E5%AE%9A/"/>
    <id>https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E7%89%B9%E5%BE%81%E6%95%B0%E7%9A%84%E7%A1%AE%E5%AE%9A/</id>
    <published>2020-06-24T01:42:09.000Z</published>
    <updated>2020-06-24T01:42:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特征数的确定"><a href="#特征数的确定" class="headerlink" title="特征数的确定"></a>特征数的确定</h1><p>经过50次平均值筛选后，可看出对应3分期时，特征数为15,4、5分期的特征数都为23，此时为最高的特征值。</p><p><img src="/images/features_section.png" alt="features section"></p><p>为了确定特征数对准确率的影响，第一个方案</p><p>选择(10-22)个特征，将每个特征都用于分类，然后将对比看看分类的结果</p><h2 id="特征缩减"><a href="#特征缩减" class="headerlink" title="特征缩减"></a>特征缩减</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/17</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> classifiers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">22</span>):</span><br><span class="line">    class_scores = []</span><br><span class="line">    kappa_scores = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">        feature = pd.read_excel(<span class="string">'D:/zccode/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        note = pd.read_excel(<span class="string">'D:/zccode/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选定固定的特征值</span></span><br><span class="line">        feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % <span class="number">2</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">        df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:index])</span><br><span class="line"></span><br><span class="line">        std_data = data_pre(data[df.keys()])</span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        class_score = []</span><br><span class="line">        kappa_score = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(std_data, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            score = run_classifiers(X_train, X_test, y_train, y_test)</span><br><span class="line">            class_score.append(score[<span class="number">0</span>])</span><br><span class="line">            kappa_score.append(score[<span class="number">1</span>])</span><br><span class="line">        class_scores.append([(np.array([class_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        kappa_scores.append([(np.array([kappa_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        print(<span class="string">f'已经运行<span class="subst">&#123;i&#125;</span>次'</span>)</span><br><span class="line"></span><br><span class="line">    class_total = pd.DataFrame(class_scores)</span><br><span class="line">    kappa_total = pd.DataFrame(kappa_scores)</span><br><span class="line">    class_total.to_excel(<span class="string">'no RFE classf'</span> + <span class="string">'%d'</span> % index + <span class="string">".xlsx"</span>)</span><br><span class="line">    kappa_total.to_excel(<span class="string">'no RFE kappaf'</span> + <span class="string">'%d'</span> % index + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><p>此次方案，在进行分类时，直接选用的是固定的特征，即迭代50次特征贡献度，平均后的结果，用固定特征对应的特征数，去进行分类。</p><h2 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/15</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> cohen_kappa_score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_gbt</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = GradientBoostingClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_knn</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = KNeighborsClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_dt</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = DecisionTreeClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_svm</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = SVC()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_lsvm</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = LinearSVC()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_lr</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = LogisticRegression()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_ml</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = MLPClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_sgd</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = SGDClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接运行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_classifiers</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    rf = run_rf(train_x, test_x, train_y, test_y)</span><br><span class="line">    gbt = run_gbt(train_x, test_x, train_y, test_y)</span><br><span class="line">    knn = run_knn(train_x, test_x, train_y, test_y)</span><br><span class="line">    dt = run_dt(train_x, test_x, train_y, test_y)</span><br><span class="line">    svm = run_svm(train_x, test_x, train_y, test_y)</span><br><span class="line">    lsvm = run_lsvm(train_x, test_x, train_y, test_y)</span><br><span class="line">    lr = run_lr(train_x, test_x, train_y, test_y)</span><br><span class="line">    ml = run_ml(train_x, test_x, train_y, test_y)</span><br><span class="line">    sgd = run_sgd(train_x, test_x, train_y, test_y)</span><br><span class="line"></span><br><span class="line">    class_s = [sgd[<span class="number">0</span>], svm[<span class="number">0</span>], lsvm[<span class="number">0</span>], lr[<span class="number">0</span>], knn[<span class="number">0</span>], dt[<span class="number">0</span>], rf[<span class="number">0</span>], gbt[<span class="number">0</span>], ml[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    kappa_s = [sgd[<span class="number">1</span>], svm[<span class="number">1</span>], lsvm[<span class="number">1</span>], lr[<span class="number">1</span>], knn[<span class="number">1</span>], dt[<span class="number">1</span>], rf[<span class="number">1</span>], gbt[<span class="number">1</span>], ml[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [class_s, kappa_s]</span><br></pre></td></tr></table></figure><p>分类模型对应的为以下9种，并分别计算出的kappa值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sgd[<span class="number">0</span>], svm[<span class="number">0</span>], lsvm[<span class="number">0</span>], lr[<span class="number">0</span>], knn[<span class="number">0</span>], dt[<span class="number">0</span>], rf[<span class="number">0</span>], gbt[<span class="number">0</span>], ml[<span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p>文件保存为： E:\sleep_stage</p><p>例如：no RFE class10.xlsx</p><p><strong>10其实对应的是9，在index中，而且不一定对应的是9还可能是对应的8，这点待会儿还需要检验下，直接进行最高的和牺牲对比的</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对比结果发现，特征越多，准确率越高，在其他分类模型中，随机森林相对变化不大</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><h3 id="最大准确率"><a href="#最大准确率" class="headerlink" title="最大准确率"></a>最大准确率</h3><p>虽然此时的max对应的特征数已经确定，但是可以明显看出，从特征数7-9这些开始已经没有太多的明显变化</p><p>所以为了进一步的缩减特征值，在此次方案中采取牺牲1%的准确率，来降低特征数的方针。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/24</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">all_section = []</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    data = pd.read_excel(<span class="string">'E:/features'</span> + <span class="string">'/themes'</span> + <span class="string">'%s'</span> % q + <span class="string">'.xlsx'</span>)</span><br><span class="line">    train_data = np.array(data).tolist()</span><br><span class="line">    list_mean = [[np.array([eval(train_data[i][k])[j] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>)]</span><br><span class="line">    feature_section = [np.array([list_mean[j][i] * <span class="number">100</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">18</span>)]).mean() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>)]</span><br><span class="line">    all_section.append(feature_section)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">26</span>)</span><br><span class="line">class_5 = all_section[<span class="number">0</span>]</span><br><span class="line">class_4 = all_section[<span class="number">1</span>]</span><br><span class="line">class_3 = all_section[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">class_num = [x[all_section[i].index(max(all_section[i]))] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">class_max = [max(all_section[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><p>先找到对应的最大值对应的位置class_num和值class_max</p><p>[23, 23, 15]</p><p>[79.64724146295774, 86.40048338502821, 89.03929260177847]</p><p>来个制表符，直接输出，让他看起来好看点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">f'分期为<span class="subst">&#123;<span class="number">5</span>-i&#125;</span>时'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'最高准确率为%.2f%%'</span> % max(all_section[i]), end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'特征数为<span class="subst">&#123;x[all_section[i].index(max(all_section[i]))]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>输出要%时，即为%%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%特征数为<span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="降低1-后对应结果"><a href="#降低1-后对应结果" class="headerlink" title="降低1%后对应结果"></a>降低1%后对应结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f'准确率降低1%后对应的特征数'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">f'分期为<span class="subst">&#123;<span class="number">5</span>-i&#125;</span>时'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'最高准确率为%.2f%%'</span> % max(all_section[i]), end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'最高准确率降低1%%后为%.2f%%'</span> % (max(all_section[i]) * <span class="number">0.99</span>), end=<span class="string">'\t'</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(all_section[i])):</span><br><span class="line">        <span class="keyword">if</span> (max(all_section[i]) * <span class="number">0.99</span>) &lt; all_section[i][j]:</span><br><span class="line">            print(<span class="string">f'比较筛选的准确率为%.2f%%'</span> % (all_section[i][j]), end=<span class="string">'\t'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">f'特征数为<span class="subst">&#123;x[all_section[i].index(all_section[i][j])]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">最大准确率时对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%特征数为<span class="number">15</span></span><br><span class="line">准确率降低<span class="number">1</span>%后对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">78.85</span>%比较筛选的准确率为<span class="number">78.86</span>%特征数为<span class="number">9</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">85.54</span>%比较筛选的准确率为<span class="number">85.66</span>%特征数为<span class="number">8</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">88.15</span>%比较筛选的准确率为<span class="number">88.22</span>%特征数为<span class="number">7</span></span><br></pre></td></tr></table></figure><p><img src="http://pic1.win4000.com/wallpaper/1/5450829edeb96.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特征数的确定&quot;&gt;&lt;a href=&quot;#特征数的确定&quot; class=&quot;headerlink&quot; title=&quot;特征数的确定&quot;&gt;&lt;/a&gt;特征数的确定&lt;/h1&gt;&lt;p&gt;经过50次平均值筛选后，可看出对应3分期时，特征数为15,4、5分期的特征数都为23，此时为最高的特征值。&lt;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
</feed>
