<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESY</title>
  
  <subtitle>mengxin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://esyyes.github.io/"/>
  <updated>2019-12-26T06:34:05.000Z</updated>
  <id>https://esyyes.github.io/</id>
  
  <author>
    <name>esy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>去趋势波动分析DFA</title>
    <link href="https://esyyes.github.io/2019/12/26/%E5%8E%BB%E8%B6%8B%E5%8A%BF%E6%B3%A2%E5%8A%A8%E5%88%86%E6%9E%90DFA/"/>
    <id>https://esyyes.github.io/2019/12/26/%E5%8E%BB%E8%B6%8B%E5%8A%BF%E6%B3%A2%E5%8A%A8%E5%88%86%E6%9E%90DFA/</id>
    <published>2019-12-26T06:34:05.000Z</published>
    <updated>2019-12-26T06:34:05.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LV-3</title>
    <link href="https://esyyes.github.io/2019/12/26/python%E8%B0%83%E7%94%A8wfdb/"/>
    <id>https://esyyes.github.io/2019/12/26/python%E8%B0%83%E7%94%A8wfdb/</id>
    <published>2019-12-26T02:33:29.000Z</published>
    <updated>2019-12-26T02:33:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python中的WFDB库使用"><a href="#python中的WFDB库使用" class="headerlink" title="python中的WFDB库使用"></a>python中的WFDB库使用</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python中的WFDB库使用&quot;&gt;&lt;a href=&quot;#python中的WFDB库使用&quot; class=&quot;headerlink&quot; title=&quot;python中的WFDB库使用&quot;&gt;&lt;/a&gt;python中的WFDB库使用&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matlab中的插值</title>
    <link href="https://esyyes.github.io/2019/12/18/matlab%E4%B8%AD%E7%9A%84%E6%8F%92%E5%80%BC/"/>
    <id>https://esyyes.github.io/2019/12/18/matlab%E4%B8%AD%E7%9A%84%E6%8F%92%E5%80%BC/</id>
    <published>2019-12-18T00:50:08.000Z</published>
    <updated>2019-12-18T00:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matlab中的插值函数"><a href="#Matlab中的插值函数" class="headerlink" title="Matlab中的插值函数"></a>Matlab中的插值函数</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=850775&auto=1&height=66"></iframe># interp1<p>一维数据插值（表查找）</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vq = interp1(x,v,xq)</span><br><span class="line">vq = interp1(x,v,xq,method)</span><br><span class="line">vq = interp1(x,v,xq,method,extrapolation)</span><br><span class="line">vq = interp1(v,xq)</span><br><span class="line">vq = interp1(v,xq,method)</span><br><span class="line">vq = interp1(v,xq,method,extrapolation)</span><br><span class="line">pp = interp1(x,v,method,<span class="string">'pp'</span>)</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>vq = interp1(x,v,xq)</code> 使用线性插值返回一维函数在特定查询点的插入值。向量 <code>x</code> 包含样本点，<code>v</code> 包含对应值 v(x)。向量 <code>xq</code> 包含查询点的坐标。</p><p>如果您有多个在同一点坐标采样的数据集，则可以将 <code>v</code> 以数组的形式进行传递。数组 <code>v</code> 的每一列都包含一组不同的一维样本值。</p><p><code>vq = interp1(x,v,xq,method)</code> 指定备选插值方法：<code>&#39;linear&#39;</code>、<code>&#39;nearest&#39;</code>、<code>&#39;next&#39;</code>、<code>&#39;previous&#39;</code>、<code>&#39;pchip&#39;</code>、<code>&#39;cubic&#39;</code>、<code>&#39;v5cubic&#39;</code>、<code>&#39;makima&#39;</code> 或 <code>&#39;spline&#39;</code>。默认方法为 <code>&#39;linear&#39;</code>。</p><p><code>vq = interp1(x,v,xq,method,extrapolation)</code> 用于指定外插策略，来计算落在 <code>x</code> 域范围外的点。如果希望使用 <code>method</code> 算法进行外插，可将 <code>extrapolation</code> 设置为 <code>&#39;extrap&#39;</code>。您也可以指定一个标量值，这种情况下，<code>interp1</code> 将为所有落在 <code>x</code> 域范围外的点返回该标量值。</p><p><code>vq = interp1(v,xq)</code> 返回插入的值，并假定一个样本点坐标默认集。默认点是从 <code>1</code> 到 <code>n</code> 的数字序列，其中 <code>n</code>取决于 <code>v</code> 的形状：</p><ul><li>当 v 是向量时，默认点是 <code>1:length(v)</code>。</li><li>当 v 是数组时，默认点是 <code>1:size(v,1)</code>。</li></ul><p>如果您不在意点之间的绝对距离，则可使用此语法。</p><p><code>vq = interp1(v,xq,method)</code> 指定备选插值方法中的任意一种，并使用默认样本点。</p><p><code>vq = interp1(v,xq,method,extrapolation)</code> 指定外插策略，并使用默认样本点。</p><p><code>pp = interp1(x,v,method,&#39;pp&#39;)</code> 使用 <code>method</code> 算法返回分段多项式形式的 v(x)。</p><p>根据需求确定的语法：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vq = interp1(x,v,xq,method)</span><br></pre></td></tr></table></figure><h1 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h1><p><strong>x</strong> :样本点****</p><p><strong>x</strong> :样本点，指定为一行或一列实数向量。<code>x</code> 中的值必须各不相同。<code>x</code> 的长度必须符合以下要求之一：</p><ul><li>如果 <code>v</code> 为向量，则 <code>length(x)</code> 必须等于 <code>length(v)</code>。</li><li>如果 <code>v</code> 为数组，则 <code>length(x)</code> 必须等于 <code>size(v,1)</code></li></ul><p><strong>V:样本值</strong></p><p>样本值，指定为实数/复数向量、矩阵或数组。如果 <code>v</code> 是矩阵或数组，则每列包含单独的一组一维值。</p><p>如果 <code>v</code> 包含复数，则 <code>interp1</code> 将分别插入实部和虚部。</p><p><strong>xq: 查询点</strong></p><p>查询点，指定为实数标量、向量、矩阵或数组。</p><p><strong>method- 插值方法</strong></p><table><thead><tr><th align="left">方法</th><th align="left">说明</th><th align="left">连续性</th><th align="center">注释</th></tr></thead><tbody><tr><td align="left"><code>&#39;linear&#39;</code></td><td align="left">线性插值。在查询点插入的值基于各维中邻点网格点处数值的线性插值。这是默认插值方法。</td><td align="left">C0</td><td align="center">需要至少 2 个点。比最近邻点插值需要更多内存和计算时间。</td></tr><tr><td align="left"><code>&#39;nearest&#39;</code></td><td align="left">最近邻点插值。在查询点插入的值是距样本网格点最近的值。</td><td align="left">不连续</td><td align="center">需要至少 2 个点。最低内存要求最快计算时间</td></tr><tr><td align="left"><code>&#39;next&#39;</code></td><td align="left">下一个邻点插值。在查询点插入的值是下一个抽样网格点的值。</td><td align="left">不连续</td><td align="center">需要至少 2 个点。内存要求和计算时间与 <code>&#39;nearest&#39;</code> 相同</td></tr><tr><td align="left"><code>&#39;previous&#39;</code></td><td align="left">上一个邻点插值。在查询点插入的值是上一个抽样网格点的值。</td><td align="left">不连续</td><td align="center">需要至少 2 个点。内存要求和计算时间与 <code>&#39;nearest&#39;</code> 相同</td></tr><tr><td align="left"><code>&#39;pchip&#39;</code></td><td align="left">保形分段三次插值。在查询点插入的值基于邻点网格点处数值的保形分段三次插值。</td><td align="left">C1</td><td align="center">需要至少 4 个点。比 <code>&#39;linear&#39;</code> 需要更多内存和计算时间</td></tr><tr><td align="left"><code>&#39;cubic&#39;</code>注意<code>interp1(...,&#39;cubic&#39;)</code>的行为在以后的版本中会有所变化。在以后的版本中，此方法将执行三次卷积。</td><td align="left">与 <code>&#39;pchip&#39;</code> 相同。</td><td align="left">C1</td><td align="center">此方法目前返回与 <code>&#39;pchip&#39;</code> 相同的结果。</td></tr><tr><td align="left"><code>&#39;v5cubic&#39;</code></td><td align="left">用于 MATLAB® 5 的三次卷积。</td><td align="left">C1</td><td align="center">点之间的间距必须均匀。<code>&#39;cubic&#39;</code> 将在以后的版本中替代 <code>&#39;v5cubic&#39;</code>。</td></tr><tr><td align="left"><code>&#39;makima&#39;</code></td><td align="left">修改后的 Akima 三次 Hermite 插值。在查询点插入的值基于次数最大为 3 的多项式的分段函数。为防过冲，已改进 Akima 公式。</td><td align="left">C1</td><td align="center">需要至少 2 个点。产生的波动比 <code>&#39;spline&#39;</code> 小，但不像 <code>&#39;pchip&#39;</code> 那样急剧变平计算成本高于 <code>&#39;pchip&#39;</code>，但通常低于 <code>&#39;spline&#39;</code>内存要求与 <code>&#39;spline&#39;</code> 类似</td></tr><tr><td align="left"><code>&#39;spline&#39;</code></td><td align="left">使用非结终止条件的样条插值。在查询点插入的值基于各维中邻点网格点处数值的三次插值。</td><td align="left">C2</td><td align="center">需要至少 4 个点。比 <code>&#39;pchip&#39;</code> 需要更多内存和计算时间</td></tr></tbody></table><p>选择spline。参考文献：<strong>基于时频分析的心率变异性研究</strong></p><h2 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h2><p><strong>vq- 输出的插值</strong></p><p>插入的值，以标量、向量、矩阵或数组的形式返回。<code>vq</code> 的大小取决于 <code>v</code> 和 <code>xq</code> 的形状。</p><table><thead><tr><th align="left">v 的形状</th><th align="left">xq 的形状</th><th align="left">Vq 的大小</th><th align="center">示例</th></tr></thead><tbody><tr><td align="left">向量</td><td align="left">向量</td><td align="left"><code>size(xq)</code></td><td align="center">如果 <code>size(v) = [1 100]</code> 且 <code>size(xq) = [1 500]</code>， 则 <code>size(vq) = [1 500]</code>。</td></tr><tr><td align="left">向量</td><td align="left">矩阵  或 N 维数组</td><td align="left"><code>size(xq)</code></td><td align="center">如果 <code>size(v) = [1 100]</code> 且 <code>size(xq) = [50 30]</code>， 则 <code>size(vq) = [50 30]</code>。</td></tr><tr><td align="left">矩阵  或 N 维数组</td><td align="left">向量</td><td align="left"><code>[length(xq) size(v,2),...,size(v,n)]</code></td><td align="center">如果 <code>size(v) = [100 3]</code> 且 <code>size(xq) = [1 500]</code>， 则 <code>size(vq) = [500 3]</code>。</td></tr><tr><td align="left">矩阵  或 N 维数组</td><td align="left">矩阵  或 N 维数组</td><td align="left"><code>[size(xq,1),...,size(xq,n),... size(v,2),...,size(v,m)]</code></td><td align="center">如果 <code>size(v) = [4 5 6]</code> 且 <code>size(xq) = [2 3 7]</code>， 则 <code>size(vq) = [2 3 7 5 6]</code>。</td></tr></tbody></table><p><a href="http://www.360doc.com/content/18/0201/11/12548572_726900990.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/18/0201/11/12548572_726900990.shtml</a></p><h2 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">load ekg.mat; <span class="comment">%读入ecg信号</span></span><br><span class="line"></span><br><span class="line">[map,r,delay]=pan_tompkin(ecg,fs,<span class="number">0</span>);<span class="comment">% 利用pan_tomkin算法找到R点</span></span><br><span class="line"></span><br><span class="line">[a,l]=<span class="built_in">size</span>(r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:l;</span><br><span class="line"></span><br><span class="line">t(<span class="built_in">i</span><span class="number">-1</span>)=r(<span class="built_in">i</span>)-r(<span class="built_in">i</span><span class="number">-1</span>); <span class="comment">%求出R-R间的时间值，即使HRV</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">x=r(<span class="number">2</span>:<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">y=interp1(x,t,r(<span class="number">2</span>):<span class="number">1</span>:r(<span class="number">19</span>),<span class="string">'spline'</span>); <span class="comment">%利用插值法求出以原ecg信号的采样率fs的拟合函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(y);<span class="built_in">hold</span> on,</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(r(<span class="number">2</span>:<span class="number">19</span>)-r(<span class="number">2</span>),t(<span class="number">1</span>:<span class="number">18</span>));</span><br></pre></td></tr></table></figure><h2 id="进行插值并实现重采样，代码如下："><a href="#进行插值并实现重采样，代码如下：" class="headerlink" title="进行插值并实现重采样，代码如下："></a>进行插值并实现重采样，代码如下：</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%对其进行三次样本插值</span></span><br><span class="line">sRR = interp1(locs(<span class="number">2</span>:<span class="built_in">length</span>(locs),<span class="number">1</span>),RR, locs(<span class="number">2</span>):<span class="number">1</span>:locs(<span class="built_in">length</span>(locs)), <span class="string">'spline'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%利用散点图将图像进行标记</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">plot</span>(sRR);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">scatter</span>(locs(<span class="number">2</span>:<span class="built_in">length</span>(locs),<span class="number">1</span>) - locs(<span class="number">2</span>),RR(<span class="number">1</span>:<span class="built_in">length</span>(locs)<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">%原来的采样率为250Hz,进行重采样为2.4Hz，%输出为等间隔的数据信号</span></span><br><span class="line">VRR = resample(sRR, <span class="number">720</span>, <span class="number">74651</span>);</span><br><span class="line">VRR = VRR';</span><br><span class="line">Fs = <span class="number">2.4</span>;</span><br><span class="line">N_RR = <span class="built_in">length</span>(VRR);<span class="comment">%采样数</span></span><br><span class="line">fen1 = N_RR / (<span class="number">60</span> * Fs);</span><br><span class="line">m = <span class="number">1</span> : N_RR;</span><br><span class="line">t = m / Fs;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">plot</span>(t, VRR);</span><br><span class="line"></span><br><span class="line"><span class="comment">%对数据进行切片30S</span></span><br><span class="line">XRR = [];</span><br><span class="line"><span class="built_in">i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt;= <span class="number">10</span></span><br><span class="line"><span class="built_in">j</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">j</span> &lt;= <span class="number">72</span></span><br><span class="line">        XRR(<span class="built_in">j</span>, <span class="built_in">i</span>) = VRR(<span class="built_in">j</span> * <span class="built_in">i</span>, <span class="number">1</span>); </span><br><span class="line">        <span class="built_in">j</span> = <span class="built_in">j</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> +<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576660259221&di=127d3ef16eaff007d35877ac99af1c4a&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201811%2F03%2F20181103144533_neboc.thumb.700_0.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Matlab中的插值函数&quot;&gt;&lt;a href=&quot;#Matlab中的插值函数&quot; class=&quot;headerlink&quot; title=&quot;Matlab中的插值函数&quot;&gt;&lt;/a&gt;Matlab中的插值函数&lt;/h1&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;
      
    
    </summary>
    
    
      <category term="-工作 -matlab" scheme="https://esyyes.github.io/categories/%E5%B7%A5%E4%BD%9C-matlab/"/>
    
    
  </entry>
  
  <entry>
    <title>matlab中的重采样</title>
    <link href="https://esyyes.github.io/2019/12/17/matlab%E4%B8%AD%E7%9A%84%E9%87%8D%E9%87%87%E6%A0%B7/"/>
    <id>https://esyyes.github.io/2019/12/17/matlab%E4%B8%AD%E7%9A%84%E9%87%8D%E9%87%87%E6%A0%B7/</id>
    <published>2019-12-17T06:14:28.000Z</published>
    <updated>2019-12-17T06:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28732503&auto=1&height=66"></iframe>## Matlab中的重采样<p>选取3条插值重采样</p><p>重采样函数Resample：将统一或非统一数据重新采样为新的固定速率</p><p>语法：</p><p>y = resample(x, p, q)</p><p>y = resample(x, tx, __, method)</p><p>指定插值方法以及该组中以前语法中的任何参数。内插方法可以是<code>&#39;linear&#39;</code>，<code>&#39;pchip&#39;</code>，或<code>&#39;spline&#39;</code>。</p><p><strong>注：</strong>  如果<code>x</code>没有变化缓慢，可以考虑使用<a href="https://ww2.mathworks.cn/help/matlab/ref/interp1.html" target="_blank" rel="noopener"><code>interp1</code></a>与<code>&#39;pchip&#39;</code>插值方法。</p><h2 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h2><p>输入信号，指定为矢量或矩阵。如果<code>x</code>是矩阵，则将其列视为独立通道。<code>x</code>可以包含<code>NaN</code>。<code>NaN</code>将s视为丢失的数据，并从重采样中排除。double</p><p>p, q:重采样因子，指定为正整数。如需要原采样频率的1/5,即p=1,q=5</p><h3 id="n—-相邻词号-10（默认）-正整数"><a href="#n—-相邻词号-10（默认）-正整数" class="headerlink" title="n— 相邻词号 10（默认）| 正整数"></a><code>n</code>— 相邻词号 10（默认）| 正整数</h3><p>邻居项号，指定为正整数。如果<code>n</code> = 0，则执行最近邻插值。抗混叠FIR滤波器的长度与成正比。较大的值提供更好的精度，但要花费更多的计算时间。<code>resample``n``n</code></p><p><strong>资料类型：</strong> <code>double</code></p><h3 id="Kaiser窗口5的-Shape参数（默认）-正实标量"><a href="#Kaiser窗口5的-Shape参数（默认）-正实标量" class="headerlink" title="Kaiser窗口5的 Shape参数（默认）| 正实标量"></a>Kaiser窗口5的 Shape参数（默认）| 正实标量</h3><p>Kaiser窗口的Shape参数，指定为正实标量。增大<code>beta</code>加宽用于设计抗混叠滤波器的窗口的主瓣，并减小窗口旁瓣的幅度。</p><p><strong>资料类型：</strong> `double</p><h3 id="b—-FIR滤波器系数-矢量"><a href="#b—-FIR滤波器系数-矢量" class="headerlink" title="b— FIR滤波器系数 矢量"></a><code>b</code>— FIR滤波器系数 矢量</h3><p>FIR滤波器系数，指定为矢量。默认情况下，使用Kaiser窗口设计过滤器。补偿延迟时，假定具有奇数长度和线性相位。<code>resample</code><a href="https://ww2.mathworks.cn/help/signal/ref/firls.html" target="_blank" rel="noopener"><code>firls</code></a><code>resample``b</code></p><p><strong>示例：</strong><code>fir1(4,0.5)</code>指定一个四阶低通滤波器，其归一化截止频率为0.5πrad /样本。</p><p><strong>资料类型：</strong> <code>double</code></p><h3 id="tx—-时间瞬间-非负实矢量-datetime数组"><a href="#tx—-时间瞬间-非负实矢量-datetime数组" class="headerlink" title="tx— 时间瞬间 非负实矢量 | datetime数组"></a><code>tx</code>— 时间瞬间 非负实矢量 | <code>datetime</code>数组</h3><p>时间瞬间，指定为非负实向量或<code>datetime</code>数组。<code>tx</code>必须单调增加，但不必均匀间隔。<code>tx</code>可以包含<code>NaN</code>或<code>NaT</code>。这些值被视为丢失的数据，并从重新采样中排除。</p><p><strong>数据类型：</strong><code>double</code> |<code>datetime</code></p><h3 id="fs—-采样率-正标量"><a href="#fs—-采样率-正标量" class="headerlink" title="fs— 采样率 正标量"></a><code>fs</code>— 采样率 正标量</h3><p>采样率，指定为正标量。采样率是每单位时间的采样数。如果时间单位是秒，则采样率以Hz为单位。</p><p><strong>资料类型：</strong> <code>double</code></p><h3 id="method—-插值方法-39-linear-39-（默认）-39-pchip-39-39-spline-39"><a href="#method—-插值方法-39-linear-39-（默认）-39-pchip-39-39-spline-39" class="headerlink" title="method— 插值方法 &#39;linear&#39;（默认）| &#39;pchip&#39;|&#39;spline&#39;"></a><code>method</code>— 插值方法 <code>&#39;linear&#39;</code>（默认）| <code>&#39;pchip&#39;</code>|<code>&#39;spline&#39;</code></h3><p>插值方法，规定为一个<code>&#39;linear&#39;</code>，<code>&#39;pchip&#39;</code>或<code>&#39;spline&#39;</code>：</p><ul><li><code>&#39;linear&#39;</code> - 线性插值。</li><li><code>&#39;pchip&#39;</code> —保形分段三次插值。</li><li><code>&#39;spline&#39;</code> —使用非终止条件进行样条插值。</li></ul><h2 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h2><h3 id="y—-重采样的信号-向量-矩阵"><a href="#y—-重采样的信号-向量-矩阵" class="headerlink" title="y— 重采样的信号 向量| 矩阵"></a><code>y</code>— 重采样的信号 向量| 矩阵</h3><p>重新采样的信号，以向量或矩阵形式返回。如果<a href="https://ww2.mathworks.cn/help/signal/ref/resample.html?searchHighlight=resample&s_tid=doc_srchtitle#bumhz33-x" target="_blank" rel="noopener"><code>x</code></a>是的长度的信号<em>Ñ</em>并指定<a href="https://ww2.mathworks.cn/help/signal/ref/resample.html?searchHighlight=resample&s_tid=doc_srchtitle#bumhz33-pq" target="_blank" rel="noopener"><code>p</code></a>和 <a href="https://ww2.mathworks.cn/help/signal/ref/resample.html?searchHighlight=resample&s_tid=doc_srchtitle#bumhz33-pq" target="_blank" rel="noopener"><code>q</code></a>，然后<code>y</code>是长度⌈ <em>Ñ</em> × <code>p</code>/ <code>q</code>⌉。</p><h3 id="b—-FIR滤波器系数-矢量-1"><a href="#b—-FIR滤波器系数-矢量-1" class="headerlink" title="b— FIR滤波器系数 矢量"></a><code>b</code>— FIR滤波器系数 矢量</h3><p>FIR滤波器系数，以向量形式返回。</p><h3 id="ty—输出瞬间-非负实矢量"><a href="#ty—输出瞬间-非负实矢量" class="headerlink" title="ty—输出瞬间 非负实矢量"></a><code>ty</code>—输出瞬间 非负实矢量</h3><p>输出瞬间，作为非负实向量返回。</p><p>需求：</p><p>1.将信号采样为2Hz</p><p>2.用3次插值</p><p>3.等间隔</p><p>method: “pchip”三次插值</p><p>是先插值，再重采样！！！！！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=2873
      
    
    </summary>
    
    
      <category term="-工作 -matlab" scheme="https://esyyes.github.io/categories/%E5%B7%A5%E4%BD%9C-matlab/"/>
    
    
      <category term="-malab -毕业" scheme="https://esyyes.github.io/tags/malab-%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>心率变异性</title>
    <link href="https://esyyes.github.io/2019/12/16/%E5%BF%83%E7%8E%87%E5%8F%98%E5%BC%82%E6%80%A7/"/>
    <id>https://esyyes.github.io/2019/12/16/%E5%BF%83%E7%8E%87%E5%8F%98%E5%BC%82%E6%80%A7/</id>
    <published>2019-12-16T13:31:31.000Z</published>
    <updated>2019-12-16T13:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="心率变异性"><a href="#心率变异性" class="headerlink" title="心率变异性"></a>心率变异性</h1><p><strong>心率变异性(heart rate variability, HRV)</strong>,即指连续<strong>两次心跳时间间隔的微小变化</strong>，HRV 产生于自主神经系统（Autonomic Nervous System  ，ANS）对心脏窦房结的调制，使得心搏间期一般存在几十毫秒的差异或波动，HRV 是了解 ANS 状态的有用信号，心率（Heart Rate, HR）的正常变异是由于心脏和循环系统的自主神经调节。</p><p>目前，HRV 分析方法主要分为三类，即<strong>时域分析法、频域分析法和非线性分析法</strong>。其中，时域分析和频域分析法是线性分析，计算简单且各项指标的含义明确。</p><p><strong>时域分析法</strong>是基于统计学原理来量化 <strong>RR 间期序列</strong>以及心率序列的变化差异，主要是计算各项统计指标。 </p><p><strong>频域分析法</strong>是将 <strong>RR 间期序列</strong>通过傅里叶变换或小波变换的方法由时域转换到频率域上，计算各频段的频谱功率。频域分析法通常采用快速傅里叶变换法(FFT)或小波变换来计算 HRV 的功率谱密度及各频段的频谱功率。</p><p>文献中常用的方法是试图使用从<strong>混沌理论或分形过程</strong>得出的<strong>非线性</strong>统计指标来量化心率的复杂性，如<strong><em>去趋势波动分析</em>、Poincare 散点图、李雅普诺夫指数、相关维度、近似熵、样本熵、多尺度熵、复杂度</strong>等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;心率变异性&quot;&gt;&lt;a href=&quot;#心率变异性&quot; class=&quot;headerlink&quot; title=&quot;心率变异性&quot;&gt;&lt;/a&gt;心率变异性&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;心率变异性(heart rate variability, HRV)&lt;/strong&gt;,即指连续&lt;s
      
    
    </summary>
    
    
      <category term="-工作" scheme="https://esyyes.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>matplotlib图像绘制学习</title>
    <link href="https://esyyes.github.io/2019/12/10/matplotlib%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2019/12/10/matplotlib%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-10T14:37:17.000Z</published>
    <updated>2019-12-10T14:37:17.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2019/12/10</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标名称图像绘制还有标题 </span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">x1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y1 = [<span class="number">15</span>, <span class="number">17</span>, <span class="number">14</span>]</span><br><span class="line"><span class="comment"># 定义线段的名字可以在后面加label=‘’，即为legend效果</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y, label=<span class="string">'First Line'</span>)</span><br><span class="line">plt.plot(x1, y1, label=<span class="string">'Second Line'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'plot xnumber'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'plot ynumber'</span>)</span><br><span class="line">plt.title(<span class="string">'plot tu\ncheck it out'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>绘制图像，同理在python中bar是直方图</p><p>加颜色：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, label=<span class="string">'First Line'</span>, color=<span class="string">'r'</span>)</span><br><span class="line">plt.plot(x1, y1, label=<span class="string">'Second Line'</span>, color=<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><p>在pycharm中还是直接运行，当需要查看变量时，点击下面的Python Console,可在里面查看变量值。</p><p>点击run file in console,即可运行到console中，可查看变量。</p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575301201485&di=45041ef6a8b44ba8808313a156dda62f&imgtype=0&src=http%3A%2F%2Fpic.downcc.com%2Fupload%2F2015-8%2F2015824101012.jpg" alt="嘤嘤嘤"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=412327101&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>升级conda</title>
    <link href="https://esyyes.github.io/2019/12/10/%E5%8D%87%E7%BA%A7conda/"/>
    <id>https://esyyes.github.io/2019/12/10/%E5%8D%87%E7%BA%A7conda/</id>
    <published>2019-12-10T02:54:05.000Z</published>
    <updated>2019-12-10T02:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-conda-软件包升级"><a href="#python-conda-软件包升级" class="headerlink" title="python conda 软件包升级"></a>python conda 软件包升级</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=40915694&auto=1&height=66"></iframe>conda:<p>运行Anaconda Prompt</p><ol><li>升级conda(升级Anaconda前需要先升级conda)：<strong>conda update conda</strong> </li><li>升级anaconda：conda update anaconda </li><li>升级spyder：conda update spyder</li><li>更新所有包：<strong>conda update –all</strong></li><li>安装包：conda install package</li><li>更新包：conda update package</li></ol><p>查询某个conda指令使用-h后缀，如conda update -h</p><p>因为是用Prcharm调用anaconda里面的python的库函数，一般情况下，升级python还有IPython即可</p><p>pip:</p><p>升级pip</p><p>python -m pip install –upgrade pip</p><p>pip升级包</p><p>pip install –upgrade 要升级的包名</p><p>Commands:<br>             install           安装包.<br>             uninstall          卸载包.<br>             freeze           按着一定格式输出已安装包列表<br>             list              列出已安装包.<br>             show            显示包详细信息.<br>             search           搜索包，类似yum里的search.<br>             wheel            Buildwheelsfromyourrequirements.<br>             zip              不推荐.Zipindividualpackages.<br>            unzip            不推荐.Unzipindividualpackages.<br>            bundle           不推荐.Createpybundles.<br>             help             当前帮助.</p><p>pip list –outdate 查看可以升级的包</p><p>总结：</p><p>我也想要小爱心点击效果</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575956998200&di=3ce4c2ff26bc042c4ad38b8c2d59fccc&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201811%2F03%2F20181103013454_fjdom.jpg" alt="jiujiu"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-conda-软件包升级&quot;&gt;&lt;a href=&quot;#python-conda-软件包升级&quot; class=&quot;headerlink&quot; title=&quot;python conda 软件包升级&quot;&gt;&lt;/a&gt;python conda 软件包升级&lt;/h1&gt;&lt;iframe f
      
    
    </summary>
    
    
      <category term="-升级conda" scheme="https://esyyes.github.io/categories/%E5%8D%87%E7%BA%A7conda/"/>
    
    
      <category term="-python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>LV-2</title>
    <link href="https://esyyes.github.io/2019/12/08/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%97%E8%A1%A8/"/>
    <id>https://esyyes.github.io/2019/12/08/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%97%E8%A1%A8/</id>
    <published>2019-12-08T13:00:32.000Z</published>
    <updated>2019-12-08T13:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=22705492&auto=1&height=66"></iframe># 转移程序时遇到的问题<h2 id="1-列表只提取一部分数据：即切片"><a href="#1-列表只提取一部分数据：即切片" class="headerlink" title="1.列表只提取一部分数据：即切片"></a>1.列表只提取一部分数据：即切片</h2><p>序列[开始位置下标:结束位置下标:步长]</p><blockquote><p>注意</p></blockquote><ol><li><p>不包含结束位置下标对应的数据， 正负整数均可；</p></li><li><p>步长是选取间隔，正负整数均可，默认步长为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abcdefg"</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line">print(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line">print(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line">print(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line">print(name[:<span class="number">-1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line">print(name[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># def</span></span><br><span class="line">print(name[::<span class="number">-1</span>])  <span class="comment"># gfedcba</span></span><br></pre></td></tr></table></figure><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li><p>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</p><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote></li></ol><ul><li>下标<ul><li>计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li>切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列名[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>find()</li><li>index()</li></ul></li></ul><p>python切片，一切取单个值，即data[i]下标即可，可用负数查找</p><p>切取完整的对象：data[:],从左往右，data[::],从左往右，data[::-1],从右往左</p><p>data[1:6],数值即为12345,左闭右开，</p><h2 id="2-列表进行倒置"><a href="#2-列表进行倒置" class="headerlink" title="2.列表进行倒置"></a>2.列表进行倒置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据进行转置ecg = ecg.transpose()</span></span><br></pre></td></tr></table></figure><p>并没有把行数据转换为列数据</p><p>python中的行数据和列数据的形式？感觉没啥用</p><p>一直觉得图错了，原来是在列表查找时设置的是data[1]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找data字典中的valkey值</span></span><br><span class="line">data = data[<span class="string">'val'</span>]</span><br><span class="line"><span class="comment"># 读取第一个列表</span></span><br><span class="line">data = data[<span class="number">0</span>]</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>读取的是列表的第二个，导致图像一直错误！！！</p><p>(～￣(OO)￣)ブ</p><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1.列表"></a>1.列表</h2><h3 id="1-1列表的格式"><a href="#1-1列表的格式" class="headerlink" title="1.1列表的格式"></a>1.1列表的格式</h3><p>[数据1, 数据2, 数据3, 数据4……]</p><p>列表可以一次性存储多个数据，且可以为不同数据类型。</p><p>1.列表的行和列的区别？</p><p>2.列表中的行绘制和列绘制的区别</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575957107705&di=c5ac892ff543bd0c3ca943c91073a4ce&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201811%2F03%2F20181103013451_varba.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=2270
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matlab中的function函数</title>
    <link href="https://esyyes.github.io/2019/12/04/matlab%E4%B8%AD%E7%9A%84function%E5%87%BD%E6%95%B0/"/>
    <id>https://esyyes.github.io/2019/12/04/matlab%E4%B8%AD%E7%9A%84function%E5%87%BD%E6%95%B0/</id>
    <published>2019-12-04T08:46:53.000Z</published>
    <updated>2019-12-04T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matlab中的function函数"><a href="#matlab中的function函数" class="headerlink" title="matlab中的function函数"></a>matlab中的function函数</h1><h1 id="1-function函数在matlab中的构建"><a href="#1-function函数在matlab中的构建" class="headerlink" title="1.function函数在matlab中的构建"></a>1.function函数在matlab中的构建</h1><p><strong>funciton:</strong> 声明函数名称、输入和输出</p><p>在matlab中，新建 - 函数，即为一个函数样本。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[outputArg1,outputArg2]</span> = <span class="title">untitled2</span><span class="params">(inputArg1,inputArg2)</span></span></span><br><span class="line"><span class="comment">%UNTITLED2 此处显示有关此函数的摘要</span></span><br><span class="line"><span class="comment">%   此处显示详细说明</span></span><br><span class="line">outputArg1 = inputArg1;</span><br><span class="line">outputArg2 = inputArg2;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[outputArg1,outputArg2]</span> = <span class="title">untitled2</span><span class="params">(inputArg1,inputArg2)</span></span></span><br></pre></td></tr></table></figure><p>声明名为 untitled2 的函数,即文件的取名<strong>封装名</strong>，此声明语句必须是函数的<strong>第一个可执行代码行</strong>。有效的函数名称以<strong>字母字符</strong>开头，并且可以包含<strong>字母、数字或下划线</strong>。</p><p>可以将函数保存在以下位置：</p><ol><li>只包含<strong>函数定义的函数文件</strong>中。<strong>文件的名称应与文件中其函数的名称一致。</strong></li><li>包含命令和函数定义的脚本文件中。<strong>函数必须位于该文件的末尾</strong>。<strong>脚本文件不能与文件中的函数具有相同</strong>的名称。R2016b 或更高版本的脚本中支持函数。</li></ol><p>文件可以包含多个局部函数或嵌套函数。为提高可读性，可使用 <strong>end</strong>关键字来表示文件中每个函数的末尾。以下情况下需要<strong>end关键字</strong>:</p><ol><li>文件中有任意函数包含<strong>嵌套函数</strong>。</li><li>该函数是函数文件中的<strong>局部函数</strong>，并且文件中有局部函数使用 <strong>end</strong>关键字。</li><li>该函数是<strong>脚本文件</strong>内的<strong>局部函数</strong>。</li></ol><h2 id="2-构建一个多输入，多输出的函数"><a href="#2-构建一个多输入，多输出的函数" class="headerlink" title="2.构建一个多输入，多输出的函数"></a>2.构建一个多输入，多输出的函数</h2><p>输入： a b</p><p>输出： jia jie cheng chu</p><p>函数命名为： jibenyunsuan</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[jia, jian, cheng, chu]</span> = <span class="title">jibenyunsuan</span><span class="params">(a, b)</span></span></span><br><span class="line"><span class="comment">%jibenyunsuan 此处显示有关此函数的摘要:</span></span><br><span class="line"><span class="comment">%   完成函数的加减乘除运算</span></span><br><span class="line">jia = a + b;</span><br><span class="line">jian = a - b;</span><br><span class="line">cheng = a * b;</span><br><span class="line">chu = a / b; </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>函数名字最好跟文件名字一样好找，输出结果也最好能直接好理解的；</p><p>在别的文件夹下运算：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">60</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line">[jia, jian, cheng, chu] = jibenyunsuan(a, b)；</span><br></pre></td></tr></table></figure><p>直接调用函数即可，输出的前面最好按照好理解的方式定义名字。</p><p><strong>前面的命名是否可更改</strong>？</p><p><strong>可以进行</strong>更改，前面的命名是按照自我的定义，是输出，自己改动，前面的function里面的输出定义项也会相继改动。</p><p>主函数只能有一个，其余的函数均为子函数。</p><h2 id="3-构建一个循环的函数"><a href="#3-构建一个循环的函数" class="headerlink" title="3.构建一个循环的函数"></a>3.构建一个循环的函数</h2><p>构建一个NN50特征</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[NN50q, NN50h, PNN50q, PNN50h]</span> = <span class="title">NN50tezheng</span><span class="params">(a)</span></span></span><br><span class="line"><span class="comment">%UNTITLED5 此处显示有关此函数的摘要</span></span><br><span class="line"><span class="comment">%   相邻RR间期大于50ms的RR期数量，NN50q前面大于后面,NN50后面大于前面</span></span><br><span class="line"><span class="comment">%   PNN50为分别占总的RR间期的百分比</span></span><br><span class="line"><span class="built_in">i</span> = <span class="number">1</span>;</span><br><span class="line">NN50q = <span class="number">0</span>;</span><br><span class="line">NN50h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt; <span class="built_in">length</span>(a)</span><br><span class="line">    <span class="keyword">if</span> a(<span class="built_in">i</span>) - a(<span class="built_in">i</span>+<span class="number">1</span>) &gt; <span class="number">50</span></span><br><span class="line">        NN50q = NN50q + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">elseif</span>  a(<span class="built_in">i</span>+<span class="number">1</span>) - a(<span class="built_in">i</span>) &gt; <span class="number">50</span></span><br><span class="line">        NN50h = NN50h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> +<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PNN50q = NN50q / <span class="built_in">length</span>(a);</span><br><span class="line">PNN50h = NN50h / <span class="built_in">length</span>(a);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="/images/jia.jpg" alt="12"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;matlab中的function函数&quot;&gt;&lt;a href=&quot;#matlab中的function函数&quot; class=&quot;headerlink&quot; title=&quot;matlab中的function函数&quot;&gt;&lt;/a&gt;matlab中的function函数&lt;/h1&gt;&lt;h1 id=&quot;1
      
    
    </summary>
    
    
      <category term="-matlab -工作" scheme="https://esyyes.github.io/categories/matlab-%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="-malab -毕业" scheme="https://esyyes.github.io/tags/malab-%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>hexo学习</title>
    <link href="https://esyyes.github.io/2019/12/03/hexo%E5%AD%A6%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2019/12/03/hexo%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-03T05:42:05.000Z</published>
    <updated>2019-12-03T05:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo学习"><a href="#hexo学习" class="headerlink" title="hexo学习"></a>hexo学习</h1><h2 id="1-hexo书写"><a href="#1-hexo书写" class="headerlink" title="1.hexo书写"></a>1.hexo书写</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> -分类<span class="number">1</span></span><br><span class="line"> -分类<span class="number">2</span></span><br><span class="line">tags:</span><br><span class="line"> -标签<span class="number">1</span></span><br><span class="line"> -标签<span class="number">2</span></span><br></pre></td></tr></table></figure><p>按照上述方式进行分类和标签，一直没进行标签和分类的整理。</p><h3 id="1-1-hexo的字体、颜色、字号、位置"><a href="#1-1-hexo的字体、颜色、字号、位置" class="headerlink" title="1.1 hexo的字体、颜色、字号、位置"></a>1.1 hexo的字体、颜色、字号、位置</h3><p>p align=”right”&gt;font face=”微软雅黑” color=”red” size=”28”&gt;字体颜色大小</font></p><p align="right"><font face="微软雅黑" color="red" size="28">字体颜色大小</font><h2 id="2-配置hexo里面的插入图片"><a href="#2-配置hexo里面的插入图片" class="headerlink" title="2.配置hexo里面的插入图片"></a>2.配置hexo里面的插入图片</h2><h3 id="2-1插入本地图片"><a href="#2-1插入本地图片" class="headerlink" title="2.1插入本地图片"></a>2.1插入本地图片</h3><p>方式1：</p><p>必须在source文件夹下建立一个空的文件，其实必须是/斜杠才能读取地址</p><p>格式为![] (/images/图片名字)【】里面的内容为取名</p><p>可以img但是要改方向</p><p>方式2：</p><p>使用img src=”” alt=”” 还是跟上面的加入/images/图片名字。alt= “”来命名</p><p>也可以直接插入但是要换斜杠的方向</p><p><img src="/images/sja.jpg" alt="z"></p><p><img src="/images/SAD.jpg" alt="s"></p><p><img src="/images/sdaff.jpg" alt="d"></p><img src="/images/sja.jpg" alt="z"><h3 id="2-2插入网络图片"><a href="#2-2插入网络图片" class="headerlink" title="2.2插入网络图片"></a>2.2插入网络图片</h3><p>在网上找到图片，直接复制图片的地址，</p><p>使用img src=”加入链接” alt=””    alt= “”来命名</p><img src="https://i0.hdslb.com/bfs/album/e47e84ca42b456b308e2d262d2e9c5d56e447634.jpg@1036w_1e_1c.jpg" alt="z"><img src="http://cdn.duitang.com/uploads/item/201508/16/20150816171059_uc4PV.thumb.700_0.jpeg" alt="z"><p><img src="/images/sa.png" alt="sa"></p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575301201485&di=45041ef6a8b44ba8808313a156dda62f&imgtype=0&src=http%3A%2F%2Fpic.downcc.com%2Fupload%2F2015-8%2F2015824101012.jpg" alt="嘤嘤嘤"><p><img src="http://dm.kantsuu.com/UploadFiles_4524/201609/20160929100837335.jpg" alt=""></p><p>直接在![](后面加链接</p><h2 id="3-在hexo里面的插入视频"><a href="#3-在hexo里面的插入视频" class="headerlink" title="3.在hexo里面的插入视频"></a>3.在hexo里面的插入视频</h2><p>先上传，在网页视频上，在通过<strong>分享视频</strong>，点击分享，找到<strong>嵌入代码</strong>，复制粘贴即可。</p><iframe src="//player.bilibili.com/player.html?aid=23207325&cid=38634561&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>## 4.在hexo里面插入音频<p>在网易云里面进行插入。</p><p>首先：选择插入网页版；</p><p>？？？？由于版权保护无法生成什么鬼</p><p>解决办法<a href="https://www.shknn.com/music-163-gedan.html" target="_blank" rel="noopener">https://www.shknn.com/music-163-gedan.html</a></p><p>1.点开歌单，找到生成外链，右击找到检查；</p><p>2.接着找到生成外链播放器这段文字直接双击复制前面/outchain/0/2945719972/，就是外链的复制id</p><p>3.然后直接将/outchain/0/2945719972/放到网站后面直接打开即可</p><p><a href="https://music.163.com/" target="_blank" rel="noopener">https://music.163.com/</a> #/outchain/0/2945719972/</p><p>歌单全部生成外链，单独的直接点开生成即可。选择直接播放，就可以每次打开就有一首。</p><p>直接复制代码进来即可，跟视频放入一样。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=2945719972&auto=1&height=430"></iframe><h2 id="5-更改博客背景音乐"><a href="#5-更改博客背景音乐" class="headerlink" title="5.更改博客背景音乐"></a>5.更改博客背景音乐</h2><ol><li>打开主题下的_config.yml文件，有mp3歌曲</li><li>该歌曲是与直接插入不同，是通过外链转换为mp3进行切换</li><li>在网易云找到想听的歌，通过<a href="https://link.hhtjim.com/网站将其转换为mp3文件，复制进行即可" target="_blank" rel="noopener">https://link.hhtjim.com/网站将其转换为mp3文件，复制进行即可</a></li></ol><h2 id="6-默认文章封面图的切换"><a href="#6-默认文章封面图的切换" class="headerlink" title="6.默认文章封面图的切换"></a>6.默认文章封面图的切换</h2><p>需求：发现每篇文章的封面图都为一样，想每篇换个封面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo学习&quot;&gt;&lt;a href=&quot;#hexo学习&quot; class=&quot;headerlink&quot; title=&quot;hexo学习&quot;&gt;&lt;/a&gt;hexo学习&lt;/h1&gt;&lt;h2 id=&quot;1-hexo书写&quot;&gt;&lt;a href=&quot;#1-hexo书写&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="-hexo完善" scheme="https://esyyes.github.io/categories/hexo%E5%AE%8C%E5%96%84/"/>
    
    
      <category term="-个人博客搭建" scheme="https://esyyes.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>LV-1.3</title>
    <link href="https://esyyes.github.io/2019/12/02/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://esyyes.github.io/2019/12/02/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-12-02T01:25:52.000Z</published>
    <updated>2019-12-04T03:04:01.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装配置破解专业版的Pycharm"><a href="#安装配置破解专业版的Pycharm" class="headerlink" title="安装配置破解专业版的Pycharm"></a>安装配置破解专业版的Pycharm</h1><h2 id="1-对图像进行绘制"><a href="#1-对图像进行绘制" class="headerlink" title="1.对图像进行绘制"></a>1.对图像进行绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sco</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> pl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位mat所在</span></span><br><span class="line">dataFile = <span class="string">'F://MITPSG//slp01am.mat'</span></span><br><span class="line"><span class="comment"># 使用loadmat函数进行读取</span></span><br><span class="line">data = sco.loadmat(dataFile)</span><br><span class="line"><span class="comment"># 查找data字典中的valkey值</span></span><br><span class="line">data = data[<span class="string">'val'</span>]</span><br><span class="line"><span class="comment"># 读取第一个列表</span></span><br><span class="line">data = data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文显示，为了标记横纵坐标</span></span><br><span class="line">pl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">pl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图像</span></span><br><span class="line">pl.xlabel(<span class="string">u"时间"</span>)</span><br><span class="line">pl.ylabel(<span class="string">u"幅值"</span>)</span><br><span class="line">pl.title(<span class="string">u"心电信号"</span>)</span><br><span class="line">pl.plot(data)</span><br><span class="line"><span class="comment"># 必须加show()才会出现图像</span></span><br><span class="line">pl.show()</span><br></pre></td></tr></table></figure><h2 id="2-配置hexo里面的插入图片"><a href="#2-配置hexo里面的插入图片" class="headerlink" title="2.配置hexo里面的插入图片"></a>2.配置hexo里面的插入图片</h2><h3 id="2-1插入本地图片"><a href="#2-1插入本地图片" class="headerlink" title="2.1插入本地图片"></a>2.1插入本地图片</h3><p>方式1：</p><p>必须在source文件夹下建立一个空的文件，其实必须是/斜杠才能读取地址</p><p>格式为![] (/images/图片名字)【】里面的内容为取名</p><p>可以img但是要改方向</p><p>方式2：</p><p>使用img src=”” alt=”” 还是跟上面的加入/images/图片名字。alt= “”来命名</p><p>也可以直接插入但是要换斜杠的方向</p><p><img src="/images/sja.jpg" alt="z"></p><p><img src="/images/SAD.jpg" alt="s"></p><p><img src="/images/sdaff.jpg" alt="d"></p><img src="/images/sja.jpg" alt="z"><h3 id="2-2插入网络图片"><a href="#2-2插入网络图片" class="headerlink" title="2.2插入网络图片"></a>2.2插入网络图片</h3><p>在网上找到图片，直接复制图片的地址，</p><p>使用img src=”加入链接” alt=””    alt= “”来命名</p><img src="https://i0.hdslb.com/bfs/album/e47e84ca42b456b308e2d262d2e9c5d56e447634.jpg@1036w_1e_1c.jpg" alt="z"><img src="http://cdn.duitang.com/uploads/item/201508/16/20150816171059_uc4PV.thumb.700_0.jpeg" alt="z"><p><img src="/images/sa.png" alt="sa"></p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575301201485&di=45041ef6a8b44ba8808313a156dda62f&imgtype=0&src=http%3A%2F%2Fpic.downcc.com%2Fupload%2F2015-8%2F2015824101012.jpg" alt="嘤嘤嘤"><p><img src="http://dm.kantsuu.com/UploadFiles_4524/201609/20160929100837335.jpg" alt=""></p><p>直接在![](后面加链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装配置破解专业版的Pycharm&quot;&gt;&lt;a href=&quot;#安装配置破解专业版的Pycharm&quot; class=&quot;headerlink&quot; title=&quot;安装配置破解专业版的Pycharm&quot;&gt;&lt;/a&gt;安装配置破解专业版的Pycharm&lt;/h1&gt;&lt;h2 id=&quot;1-对图像
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://esyyes.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>LV-1</title>
    <link href="https://esyyes.github.io/2019/12/01/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%98%E5%88%B6%E5%88%97%E8%A1%A8%E6%96%87%E4%BB%B6/"/>
    <id>https://esyyes.github.io/2019/12/01/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%98%E5%88%B6%E5%88%97%E8%A1%A8%E6%96%87%E4%BB%B6/</id>
    <published>2019-12-01T11:56:29.000Z</published>
    <updated>2019-12-02T12:47:02.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制LV-0中的data列表数据"><a href="#绘制LV-0中的data列表数据" class="headerlink" title="绘制LV-0中的data列表数据"></a>绘制LV-0中的data列表数据</h1><h2 id="1-import-numpy-as-np"><a href="#1-import-numpy-as-np" class="headerlink" title="1. import numpy as np"></a>1. import numpy as np</h2><p>由于<strong>机器学习算法</strong>在数据处理过程中大都涉及线性代数的知识，需要用到<strong>矩阵操作</strong>，<strong>Python本身没有</strong>处理矩阵的数据类型，因此<strong>需要使用附加的函数库</strong>。</p><p><strong>NumPy函数库</strong>是Python开发环境的一个独立模块，是Python的一种<strong>开源的数值计算扩展</strong>工具。</p><p>这种工具可以用来<strong>存储和处理大型多维矩阵</strong>，比Python自身的列表结构要高效的多。尽管Python的list类型已经提供了类似于矩阵的表示形式，但是NumPy提供了更多的科学计算函数。</p><p>NumPy被定位为数学基础库，属于比较底层的Python库，其地位趋向于成为一个被其它库调用的核心库。</p><p>在使用NumPy库之前，首先必须导入该函数库，导入方式如下：<strong>import numpy as np</strong># import 模块名 as 别名</p><h2 id="2-matplotlib绘图"><a href="#2-matplotlib绘图" class="headerlink" title="2.matplotlib绘图"></a>2.matplotlib绘图</h2><p><strong>Matplotlib 是 Python 的绘图库</strong>。 它可与 <strong>NumPy 一起使用</strong>，提供了一种有效的 <strong>MatLab 开源替代</strong>方案。 它也可以和图形工具包一起使用，如 <strong>PyQt 和 wxPython</strong>。</p><p>Matplotlib 默认情况<strong>不支持中文</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了显示中文，目的：标记横纵坐标</span></span><br><span class="line">pl.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>]</span><br><span class="line">pl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>参考如下对matplotlib绘制的讲解</p><p><a href="https://blog.csdn.net/gaotihong/article/details/80983937" target="_blank" rel="noopener">https://blog.csdn.net/gaotihong/article/details/80983937</a></p><p><strong>pylab 是 matplotlib 面向对象绘图库的一个接口</strong>，它的语法和 <strong>Matlab</strong> 十分相近，主要的绘图命令和 Matlab 对应的命令有相似的参数</p><p>暂时不对Matplotlib进行了解，初步选用pylab函数。</p><h2 id="3-pylab和pyplot函数"><a href="#3-pylab和pyplot函数" class="headerlink" title="3.pylab和pyplot函数"></a>3.pylab和pyplot函数</h2><p><strong>pylab</strong> 模块是一款由python提供的可以绘制<strong>二维，三维数据</strong>的工具模块，其中包括了绘图软件包 matplotlib,其可以生成<strong>matab绘图库的图像。</strong> </p><p>pylab将<strong>所有的功能函</strong>数（<strong>pyplot状态机函数</strong>，大部分时numpy里面的函数）<strong>全部导入</strong>其单独的命名空间内。为什么要这样做，是因为这样可以很好地与ipython（或者类似的IDE，比如pycharm）实现很好的交互模式，这个就和MATLAB差不多。</p><p><strong>pylab和pyplot的区别是</strong>，<strong>前者将numpy导入了其命名空间中</strong>。这样会使pylab表现的和matlab更加相似。现在来说我们经常使用pyplot，因为pyplot相比pylab更加纯粹。</p><p>总结：使用的只是pylab里面的plot功能，暂时先直接使用pyplot函数。</p><p>matplotlib.pyplot：提供一个类似matlab的绘图框架。</p><p>pylab将pyplot与numpy合并为一个命名空间。这对于交互式工作很方便，但是对于编程来说，建议将名称空间分开.</p><h3 id="3-1-pyplot函数"><a href="#3-1-pyplot函数" class="headerlink" title="3.1 pyplot函数"></a>3.1 pyplot函数</h3><p>Matplotlib.pyplot 常用方法（一）:</p><p><a href="https://blog.csdn.net/sinat_34022298/article/details/76348969" target="_blank" rel="noopener">https://blog.csdn.net/sinat_34022298/article/details/76348969</a></p><p>绘图函数是直接作用于当前axes（matplotlib中的专有名词，图形中组成部分，不是数学中的坐标系。</p><p>重大发现：</p><p>为啥我的pycharm好多功能没有！！！！！！！！！</p><p>PyCharm 在<strong>2017.3版本</strong>之后加入了Scientific Mode</p><p>2019版社区版为啥很多功能没有呢，社区版这么不给力嘛。。。下载破解版</p><p>对电脑访问权限的更改，明日任务，菜鸡问题多呀</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就是问题一大堆，明天继续弄，速度过度到python</p><p><img src="/img/suofei.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;绘制LV-0中的data列表数据&quot;&gt;&lt;a href=&quot;#绘制LV-0中的data列表数据&quot; class=&quot;headerlink&quot; title=&quot;绘制LV-0中的data列表数据&quot;&gt;&lt;/a&gt;绘制LV-0中的data列表数据&lt;/h1&gt;&lt;h2 id=&quot;1-import-
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://esyyes.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>LV.0</title>
    <link href="https://esyyes.github.io/2019/12/01/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AF%BB%E5%8F%96mat%E6%96%87%E4%BB%B6/"/>
    <id>https://esyyes.github.io/2019/12/01/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AF%BB%E5%8F%96mat%E6%96%87%E4%BB%B6/</id>
    <published>2019-12-01T04:21:31.000Z</published>
    <updated>2019-12-02T12:48:43.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对MIT数据库中的mat文件进行读取"><a href="#对MIT数据库中的mat文件进行读取" class="headerlink" title="对MIT数据库中的mat文件进行读取"></a>对MIT数据库中的mat文件进行读取</h1><h2 id="1-MIT数据库数据"><a href="#1-MIT数据库数据" class="headerlink" title="1.MIT数据库数据"></a>1.MIT数据库数据</h2><p><strong>数据库：</strong>MIT-BIH Polysomnographic Database</p><p><strong>数据来源：</strong><a href="https://archive.physionet.org/cgi-bin/atm/ATM" target="_blank" rel="noopener">https://archive.physionet.org/cgi-bin/atm/ATM</a></p><p><strong>MIT-BIH多导睡眠图数据库</strong>是睡眠期间多种生理信号记录的集合。在波士顿的贝思以色列医院睡眠实验室对受试者进行了监测，以评估慢性阻塞性睡眠呼吸暂停综合症，并测试恒定的气道正压通气（CPAP）的效果，气道正压通气是一种标准的治疗手段，通常可预防或大幅减少这些患者的气道阻塞。该数据库包含价值超过80小时的四通道，六通道和七通道多导睡眠图记录，每条记录的<strong>心电图信号</strong>逐节拍，以及关于睡眠阶段和呼吸暂停的EEG和呼吸信号。 </p><h2 id="2-数据下载及保存"><a href="#2-数据下载及保存" class="headerlink" title="2.数据下载及保存"></a>2.数据下载及保存</h2><h3 id="2-1-数据类型及说明"><a href="#2-1-数据类型及说明" class="headerlink" title="2.1 数据类型及说明"></a>2.1 数据类型及说明</h3><p><strong>.st文件</strong>为数据的注释文件，对睡眠/呼吸暂停进行注释；</p><p><strong>.ecg文件</strong>为数据的心电节拍注释文件，即心率ECG的R峰值点</p><p><strong>.dat文件</strong>为4个通道的所有数据文件</p><p><strong>.hea文件</strong>为文件的标头</p><p>主要参考利用<strong>ATM</strong>下载的<strong>mat文件</strong></p><p>主要需要读取的文件格式 <strong>.txt .dat .mat .xls</strong></p><h3 id="2-2-数据保存位置"><a href="#2-2-数据保存位置" class="headerlink" title="2.2 数据保存位置"></a>2.2 数据保存位置</h3><p>F:\MITPSG</p><p>例如<strong>文件</strong>：F:\py\读取.py</p><h2 id="3-对-mat进行读取"><a href="#3-对-mat进行读取" class="headerlink" title="3 对.mat进行读取"></a>3 对.mat进行读取</h2><h3 id="3-1-mat文件"><a href="#3-1-mat文件" class="headerlink" title="3.1 mat文件"></a>3.1 mat文件</h3><p><strong>mat数据格式</strong>是<strong>Matlab</strong>的数据存储的标准格式。在Matlab中主要使用<strong>load()函数</strong>导入一个mat文件，使用<strong>save()</strong>函数保存一个mat文件。 </p><p>在MATLAB中导入slp01am.mat文件：程序：F:\matlabchengxu\clus1.m</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load(<span class="string">'slp01am.mat'</span>)</span><br></pre></td></tr></table></figure><p>生成一个val变量，该变量为一个4*900,000数组，只需要对1-ECG和4-resq信号进行处理</p><h3 id="3-2-在python中导入mat文件"><a href="#3-2-在python中导入mat文件" class="headerlink" title="3.2 在python中导入mat文件"></a>3.2 在python中导入mat文件</h3><p>  在python中可以使用<strong>scipy.io</strong>中的函数<strong>loadmat()</strong>读取mat文件，函数<strong>savemat</strong>保存文件。 </p><h4 id="3-2-1-调用函数模块"><a href="#3-2-1-调用函数模块" class="headerlink" title="3.2.1 调用函数模块"></a>3.2.1 调用函数模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sci</span><br><span class="line"><span class="comment"># import 模块名 as 别名</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-读取mat文件"><a href="#3-2-2-读取mat文件" class="headerlink" title="3.2.2 读取mat文件"></a>3.2.2 读取mat文件</h4><p>文件保存位置：F:\MITPSG\slp01am.mat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sco</span><br><span class="line">dataFile = <span class="string">'F://MITPSG//slp01am.mat'</span></span><br><span class="line">data = sco.loadmat(dataFile)</span><br></pre></td></tr></table></figure><h4 id="3-3-在Pycharm中查看变量"><a href="#3-3-在Pycharm中查看变量" class="headerlink" title="3.3 在Pycharm中查看变量"></a>3.3 在Pycharm中查看变量</h4><ol><li>在需要查看那一行进行断点标记</li><li>运行debug</li><li>Variables窗口中的变量可以右击，Add to Watches，然后在Watches窗口中可以看到所选数据的具体信息，包括数值。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印data文件查看其形式</span></span><br><span class="line">print(data)</span><br><span class="line"><span class="comment"># data文件是字典形式&#123;中间有hea文件开头&#125;</span></span><br><span class="line"><span class="comment"># 在matlab中自动省去开头文件没有进行提取，所以是个字典形式</span></span><br><span class="line">print(type(data))</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191201194613788.png" alt=""></p><h4 id="3-4-读取val变量中的1-4列表"><a href="#3-4-读取val变量中的1-4列表" class="headerlink" title="3.4 读取val变量中的1.4列表"></a>3.4 读取val变量中的1.4列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查找data字典中的valkey值</span><br><span class="line">data = data[&apos;val&apos;]</span><br><span class="line"># 读取第一个列表</span><br><span class="line">data = data[1]</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191201195020086.png" alt=""></p><h4 id="3-5-字典的读取"><a href="#3-5-字典的读取" class="headerlink" title="3.5 字典的读取"></a>3.5 字典的读取</h4><p>字典特点：</p><ul><li>符号为==大括号==</li><li>数据为==键值对==形式出现</li><li>各个键值对之间用==逗号==隔开</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;</span><br><span class="line">print(dict1[&apos;name&apos;])  # Tom</span><br><span class="line">print(dict1[&apos;id&apos;])  # 报错</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>初步完成了mat文件的读取</li><li>调用python的库时遇到各种奇奇怪怪的问题，还有些未解决，暂时现在py文件夹进行处理</li><li>pycharm里面的字典、列表等需要随时查看，不能直接套用matlab的经验</li><li>同理val：4即为呼吸的数据</li><li>下一步对列表数据进行处理</li><li>小菜鸡加油</li></ol><p><img src="/img/hhh.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对MIT数据库中的mat文件进行读取&quot;&gt;&lt;a href=&quot;#对MIT数据库中的mat文件进行读取&quot; class=&quot;headerlink&quot; title=&quot;对MIT数据库中的mat文件进行读取&quot;&gt;&lt;/a&gt;对MIT数据库中的mat文件进行读取&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://esyyes.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>pyhon基础--函数</title>
    <link href="https://esyyes.github.io/2019/11/24/pyhon%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/"/>
    <id>https://esyyes.github.io/2019/11/24/pyhon%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/</id>
    <published>2019-11-24T12:57:32.000Z</published>
    <updated>2019-12-05T02:28:35.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="1-函数基本操作"><a href="#1-函数基本操作" class="headerlink" title="1.函数基本操作"></a>1.函数基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><pre><code>1. 不同的需求，参数可有可无。   2. 在Python中，函数必须==先定义后使用==。</code></pre><p>完成需求如下：一个函数完成两个数1和2的加法运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num1</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">add_num1()</span><br></pre></td></tr></table></figure><p>用户要在调用函数的时候指定具体数字，那么在定义函数的时候就需要接收用户指定的数字。函数调用时候指定的数字和定义函数时候接收的数字即是函数的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 定义函数时同时定义了接收用户数据的参数a和b，a和b是形参</span><br><span class="line">def add_num2(a, b):</span><br><span class="line">    result = a + b</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用函数时传入了真实的数据10 和 20，真实数据为实参</span><br><span class="line">add_num2(10, 20)</span><br></pre></td></tr></table></figure><p>需求：制作一个计算器，计算任意两数字之和，并保存结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用result变量保存函数返回值</span></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>定义函数的说明文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line">    <span class="string">""" 说明文档的位置 """</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>查看函数的说明文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(函数名)</span><br></pre></td></tr></table></figure><p>求三个数之和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(result)  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>函数的返回值</p><ul><li>作用：函数调用后，返回需要的计算结果</li><li>写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 表达式</span><br></pre></td></tr></table></figure><p>函数的说明文档</p><ul><li>作用：保存函数解释说明的信息</li><li>写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名():</span><br><span class="line">    &quot;&quot;&quot; 函数说明文档 &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>函数嵌套调用：一个函数内部嵌套调用另外一个函数</p><h2 id="2-函数的参数"><a href="#2-函数的参数" class="headerlink" title="2.函数的参数"></a>2.函数的参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global 关键字声明a是全局变量</span></span><br><span class="line"><span class="keyword">global</span> a</span><br></pre></td></tr></table></figure><blockquote><p>传递和定义参数的顺序及个数必须一致。</p></blockquote><p>函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(name, age, gender)</span>:</span></span><br><span class="line">    print(<span class="string">f'您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">'Rose'</span>, age=<span class="number">20</span>, gender=<span class="string">'女'</span>)</span><br><span class="line">user_info(<span class="string">'小明'</span>, gender=<span class="string">'男'</span>, age=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>注意：<strong>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</strong></p><p><strong>缺省参数</strong>也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(name, age, gender=<span class="string">'男'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">f'您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">user_info(<span class="string">'TOM'</span>, <span class="number">20</span>)</span><br><span class="line">user_info(<span class="string">'Rose'</span>, <span class="number">18</span>, <span class="string">'女'</span>)</span><br></pre></td></tr></table></figure><p>注意：函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</p><p><strong>不定长参数</strong>也叫<strong>可变参数</strong>。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用<strong>包裹(packing)位置</strong>参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"><span class="comment"># ('TOM',)</span></span><br><span class="line">user_info(<span class="string">'TOM'</span>)</span><br><span class="line"><span class="comment"># ('TOM', 18)</span></span><br><span class="line">user_info(<span class="string">'TOM'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>注意：传进的所有参数都会被<strong>args变量收集</strong>，它会根据传进参数的位置合并为<strong>一个元组(tuple)，args是元组类型</strong>，这就是包裹位置传递。</p><p>包裹关键字传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'name': 'TOM', 'age': 18, 'id': 110&#125;</span></span><br><span class="line">user_info(name=<span class="string">'TOM'</span>, age=<span class="number">18</span>, id=<span class="number">110</span>)</span><br></pre></td></tr></table></figure><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p><p>拆包：元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1, num2 = return_num()</span><br><span class="line">print(num1)  <span class="comment"># 100</span></span><br><span class="line">print(num2)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>拆包：字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'TOM'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典进行拆包，取出来的是字典的key</span></span><br><span class="line"></span><br><span class="line">print(a)  <span class="comment"># name</span></span><br><span class="line">print(b)  <span class="comment"># age</span></span><br><span class="line"></span><br><span class="line">print(dict1[a])  <span class="comment"># TOM</span></span><br><span class="line">print(dict1[b])  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><p>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变.</p><ul><li>可变类型<ul><li>列表</li><li>字典</li><li>集合</li></ul></li><li>不可变类型<ul><li>整型</li><li>浮点型</li><li>字符串</li><li>元组</li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>变量作用域<ul><li>全局：函数体内外都能生效</li><li>局部：当前函数体内部生效</li></ul></li><li>函数多返回值写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式<span class="number">1</span>, 表达式<span class="number">2.</span>..</span><br></pre></td></tr></table></figure><ul><li>函数的参数<ul><li>位置参数<ul><li>形参和实参的个数和书写顺序必须一致</li></ul></li><li>关键字参数<ul><li>写法： <code>key=value</code></li><li>特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</li></ul></li><li>缺省参数<ul><li>缺省参数就是默认参数</li><li>写法：<code>key=vlaue</code></li></ul></li><li>不定长位置参数<ul><li>收集所有位置参数，返回一个元组</li></ul></li><li>不定长关键字参数<ul><li>收集所有关键字参数，返回一个字典</li></ul></li></ul></li><li>引用：Python中，数据的传递都是通过引用</li></ul><h1 id="三-lambda-表达式"><a href="#三-lambda-表达式" class="headerlink" title="三. lambda 表达式"></a>三. lambda 表达式</h1><h2 id="3-1-lambda的应用场景"><a href="#3-1-lambda的应用场景" class="headerlink" title="3.1 lambda的应用场景"></a>3.1 lambda的应用场景</h2><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化。</p><h2 id="3-2-lambda语法"><a href="#3-2-lambda语法" class="headerlink" title="3.2 lambda语法"></a>3.2 lambda语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表 ： 表达式</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ul><li>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用。</li><li>lambda表达式能接收任何数量的参数但只能返回一个表达式的值。</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(fn1)</span><br><span class="line">print(fn1())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda表达式</span></span><br><span class="line">fn2 = <span class="keyword">lambda</span>: <span class="number">100</span></span><br><span class="line">print(fn2)</span><br><span class="line">print(fn2())</span><br></pre></td></tr></table></figure><blockquote><p>注意：直接打印lambda表达式，输出的是此lambda的内存地址</p></blockquote><h2 id="3-3-示例：计算a-b"><a href="#3-3-示例：计算a-b" class="headerlink" title="3.3 示例：计算a + b"></a>3.3 示例：计算a + b</h2><h3 id="3-3-1-函数实现"><a href="#3-3-1-函数实现" class="headerlink" title="3.3.1 函数实现"></a>3.3.1 函数实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><blockquote><p>思考：需求简单，是否代码多？</p></blockquote><h3 id="3-3-2-lambda实现"><a href="#3-3-2-lambda实现" class="headerlink" title="3.3.2 lambda实现"></a>3.3.2 lambda实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line">print(fn1(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="3-4-lambda的参数形式"><a href="#3-4-lambda的参数形式" class="headerlink" title="3.4 lambda的参数形式"></a>3.4 lambda的参数形式</h2><h3 id="3-4-1-无参数"><a href="#3-4-1-无参数" class="headerlink" title="3.4.1.无参数"></a>3.4.1.无参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span>: <span class="number">100</span></span><br><span class="line">print(fn1())</span><br></pre></td></tr></table></figure><h3 id="3-4-2-一个参数"><a href="#3-4-2-一个参数" class="headerlink" title="3.4.2.一个参数"></a>3.4.2.一个参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a: a</span><br><span class="line">print(fn1(<span class="string">'hello world'</span>))</span><br></pre></td></tr></table></figure><h3 id="3-4-3-默认参数"><a href="#3-4-3-默认参数" class="headerlink" title="3.4.3.默认参数"></a>3.4.3.默认参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b, c=<span class="number">100</span>: a + b + c</span><br><span class="line">print(fn1(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h3 id="3-4-4-可变参数：-args"><a href="#3-4-4-可变参数：-args" class="headerlink" title="3.4.4.可变参数：*args"></a>3.4.4.可变参数：*args</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> *args: args</span><br><span class="line">print(fn1(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的可变参数传入到lambda之后，返回值为元组。</p></blockquote><h3 id="3-4-5-可变参数：-kwargs"><a href="#3-4-5-可变参数：-kwargs" class="headerlink" title="3.4.5.可变参数：**kwargs"></a>3.4.5.可变参数：**kwargs</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> **kwargs: kwargs</span><br><span class="line">print(fn1(name=<span class="string">'python'</span>, age=<span class="number">20</span>))</span><br></pre></td></tr></table></figure><h2 id="3-5-lambda的应用"><a href="#3-5-lambda的应用" class="headerlink" title="3.5 lambda的应用"></a>3.5 lambda的应用</h2><h3 id="3-5-1-带判断的lambda"><a href="#3-5-1-带判断的lambda" class="headerlink" title="3.5.1. 带判断的lambda"></a>3.5.1. 带判断的lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(fn1(<span class="number">1000</span>, <span class="number">500</span>))</span><br></pre></td></tr></table></figure><h3 id="3-5-2-列表数据按字典key的值排序"><a href="#3-5-2-列表数据按字典key的值排序" class="headerlink" title="3.5.2. 列表数据按字典key的值排序"></a>3.5.2. 列表数据按字典key的值排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'TOM'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'ROSE'</span>, <span class="string">'age'</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'Jack'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name值升序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">'name'</span>])</span><br><span class="line">print(students)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按name值降序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">'name'</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">print(students)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按age值升序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">'age'</span>])</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><h1 id="四-高阶函数"><a href="#四-高阶函数" class="headerlink" title="四. 高阶函数"></a>四. 高阶函数</h1><p>==把函数作为参数传入==，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p><h2 id="4-1-体验高阶函数"><a href="#4-1-体验高阶函数" class="headerlink" title="4.1 体验高阶函数"></a>4.1 体验高阶函数</h2><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">-10</span>)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p><code>round()</code>函数可以完成对数字的四舍五入计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">round(<span class="number">1.2</span>)  <span class="comment"># 1</span></span><br><span class="line">round(<span class="number">1.9</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>需求：任意两个数字，按照指定要求整理数字后再进行求和计算。</p><ul><li>方法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> abs(a) + abs(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = add_num(<span class="number">-1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><ul><li>方法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(a, b, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(a) + f(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">-1</span>, <span class="number">2</span>, abs)</span><br><span class="line">print(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。</p></blockquote><p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p><h2 id="4-2-内置高阶函数"><a href="#4-2-内置高阶函数" class="headerlink" title="4.2 内置高阶函数"></a>4.2 内置高阶函数</h2><h3 id="4-2-1-map"><a href="#4-2-1-map" class="headerlink" title="4.2.1 map()"></a>4.2.1 map()</h3><p>map(func, lst)，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的列表(Python2)/迭代器(Python3)返回。</p><p>需求：计算<code>list1</code>序列中各个数字的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = map(func, list1)</span><br><span class="line"></span><br><span class="line">print(result)  <span class="comment"># &lt;map object at 0x0000013769653198&gt;</span></span><br><span class="line">print(list(result))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-reduce"><a href="#4-2-2-reduce" class="headerlink" title="4.2.2 reduce()"></a>4.2.2 reduce()</h3><p>reduce(func，lst)，其中func必须有两个参数。每次func计算的结果继续和序列的下一个元素做累积计算。</p><blockquote><p>注意：reduce()传入的参数func必须接收2个参数。</p></blockquote><p>需求：计算<code>list1</code>序列中各个数字的累加和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = functools.reduce(func, list1)</span><br><span class="line"></span><br><span class="line">print(result)  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-filter"><a href="#4-2-3-filter" class="headerlink" title="4.2.3 filter()"></a>4.2.3 filter()</h3><p>filter(func, lst)函数用于过滤序列, 过滤掉不符合条件的元素, 返回一个 filter 对象。如果要转换为列表, 可以使用 list() 来转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = filter(func, list1)</span><br><span class="line"></span><br><span class="line">print(result)  <span class="comment"># &lt;filter object at 0x0000017AF9DC3198&gt;</span></span><br><span class="line">print(list(result))  <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><ul><li><p>递归</p><ul><li>函数内部自己调用自己</li><li>必须有出口</li></ul></li><li><p>lambda</p><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表: 表达式</span><br></pre></td></tr></table></figure><ul><li><p>lambda的参数形式</p><ul><li>无参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span>: 表达式</span><br></pre></td></tr></table></figure><ul><li>一个参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数: 表达式</span><br></pre></td></tr></table></figure><ul><li>默认参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> key=value: 表达式</span><br></pre></td></tr></table></figure><ul><li>不定长位置参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> *args: 表达式</span><br></pre></td></tr></table></figure><ul><li>不定长关键字参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> **kwargs: 表达式</span><br></pre></td></tr></table></figure></li></ul></li><li><p>高阶函数</p><ul><li>作用：把函数作为参数传入，化简代码</li><li>内置高阶函数<ul><li>map()</li><li>reduce()</li><li>filter()</li></ul></li></ul></li></ul><p><img src="/images/ka.jpg" alt="ka"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h2 id=&quot;1-函数基本操作&quot;&gt;&lt;a href=&quot;#1-函数基本操作&quot; class=&quot;headerlink&quot; title=&quot;1.函数基本操作&quot;
      
    
    </summary>
    
    
      <category term="-python基础" scheme="https://esyyes.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="-python -人工智能" scheme="https://esyyes.github.io/tags/python-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>pyhon基础--模块</title>
    <link href="https://esyyes.github.io/2019/11/24/pyhon%E5%9F%BA%E7%A1%80-%E6%A8%A1%E5%9D%97/"/>
    <id>https://esyyes.github.io/2019/11/24/pyhon%E5%9F%BA%E7%A1%80-%E6%A8%A1%E5%9D%97/</id>
    <published>2019-11-24T12:12:54.000Z</published>
    <updated>2019-11-24T12:51:10.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><h1 id="一-模块"><a href="#一-模块" class="headerlink" title="一. 模块"></a>一. 模块</h1><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><h2 id="1-1-导入模块"><a href="#1-1-导入模块" class="headerlink" title="1.1. 导入模块"></a>1.1. 导入模块</h2><h3 id="1-1-1-导入模块的方式"><a href="#1-1-1-导入模块的方式" class="headerlink" title="1.1.1 导入模块的方式"></a>1.1.1 导入模块的方式</h3><ul><li>import 模块名</li><li>from 模块名 import 功能名</li><li>from 模块名 import *</li><li>import 模块名 as 别名</li><li>from 模块名 import 功能名 as 别名</li></ul><h3 id="1-1-2-导入方式详解"><a href="#1-1-2-导入方式详解" class="headerlink" title="1.1.2 导入方式详解"></a>1.1.2 导入方式详解</h3><h4 id="1-1-2-1-import"><a href="#1-1-2-1-import" class="headerlink" title="1.1.2.1 import"></a>1.1.2.1 import</h4><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1. 导入模块</span><br><span class="line"></span><br><span class="line">import 模块名</span><br><span class="line">import 模块名1, 模块名2...</span><br><span class="line"></span><br><span class="line"># 2. 调用功能</span><br><span class="line"></span><br><span class="line">模块名.功能名()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">print(math.sqrt(36))</span><br></pre></td></tr></table></figure><h4 id="1-1-2-2-from-import"><a href="#1-1-2-2-from-import" class="headerlink" title="1.1.2.2 from..import.."></a>1.1.2.2 from..import..</h4><p>from 模块名 import 功能1, 功能2, 功能3…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from math import sqrt</span><br><span class="line">print(sqrt(36))</span><br></pre></td></tr></table></figure><h4 id="1-1-2-3-from-import"><a href="#1-1-2-3-from-import" class="headerlink" title="1.1.2.3 from .. import *"></a>1.1.2.3 from .. import *</h4><p>from 模块名 import *  # *指代所有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from math import *</span><br><span class="line">print(sqrt(36))</span><br></pre></td></tr></table></figure><h4 id="1-1-2-4-as定义别名"><a href="#1-1-2-4-as定义别名" class="headerlink" title="1.1.2.4 as定义别名"></a>1.1.2.4 as定义别名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 模块定义别名  ：即改名字</span><br><span class="line">import 模块名 as 别名</span><br><span class="line"></span><br><span class="line"># 功能定义别名</span><br><span class="line">from 模块名 import 功能 as 别名</span><br></pre></td></tr></table></figure><h2 id="1-2-制作模块"><a href="#1-2-制作模块" class="headerlink" title="1.2. 制作模块"></a>1.2. 制作模块</h2><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。<strong>也就是说自定义模块名必须要符合标识符命名规则。</strong></p><h3 id="1-2-1-定义模块"><a href="#1-2-1-定义模块" class="headerlink" title="1.2.1 定义模块"></a>1.2.1 定义模块</h3><p>新建一个Python文件，命名为<code>my_module1.py</code>，并定义<code>testA</code>函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 完成加法运算</span><br><span class="line">def testA(a, b):</span><br><span class="line">    print(a + b)</span><br><span class="line"># 测试信息</span><br><span class="line">testA(1, 11)</span><br></pre></td></tr></table></figure><p>此时，无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行<code>testA</code>函数的调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def testA(a, b):</span><br><span class="line">    print(a + b)</span><br><span class="line"></span><br><span class="line"># 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行testA函数调用</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    testA(1, 11)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 调用</span><br><span class="line">import my_module</span><br><span class="line">my_module.testA(4, 6)</span><br></pre></td></tr></table></figure><p>如果使用<code>from .. import ..</code>或<code>from .. import *</code>导入多个模块的时候，且模块内有同名功能。当调用这个同名功能的时候，调用到的是后面导入的模块的功能。</p><h2 id="1-3-模块定位顺序"><a href="#1-3-模块定位顺序" class="headerlink" title="1.3. 模块定位顺序"></a>1.3. 模块定位顺序</h2><p>当导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li></ol><p>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p><h2 id="1-4-all"><a href="#1-4-all" class="headerlink" title="1.4. __all__"></a>1.4. <code>__all__</code></h2><p>如果一个模块文件中有<code>__all__</code>变量，当使用<code>from xxx import *</code>导入时，只能导入<strong>这个列表中的元素</strong>。</p><h1 id="二-包"><a href="#二-包" class="headerlink" title="二. 包"></a>二. 包</h1><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为包。</p><h2 id="2-1-制作包"><a href="#2-1-制作包" class="headerlink" title="2.1 制作包"></a>2.1 制作包</h2><p>[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</p><p>注意：新建包后，包内部会自动创建<code>__init__.py</code>文件，这个文件控制着包的导入行为。</p><h3 id="2-1-1-快速体验"><a href="#2-1-1-快速体验" class="headerlink" title="2.1.1 快速体验"></a>2.1.1 快速体验</h3><ol><li>新建包<code>mypackage</code></li><li>新建包内模块：<code>my_module1</code> 和 <code>my_module2</code></li><li>模块内代码如下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_module1</span></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'my_module1'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_module2</span></span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'my_module2'</span>)</span><br></pre></td></tr></table></figure><h2 id="2-2-导入包"><a href="#2-2-导入包" class="headerlink" title="2.2 导入包"></a>2.2 导入包</h2><h3 id="2-2-1-方法一"><a href="#2-2-1-方法一" class="headerlink" title="2.2.1 方法一"></a>2.2.1 方法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line">包名.模块名.目标</span><br></pre></td></tr></table></figure><h4 id="2-2-1-1-体验"><a href="#2-2-1-1-体验" class="headerlink" title="2.2.1.1 体验"></a>2.2.1.1 体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_package.my_module1</span><br><span class="line"></span><br><span class="line">my_package.my_module1.info_print1()</span><br></pre></td></tr></table></figure><h3 id="2-2-2-方法二"><a href="#2-2-2-方法二" class="headerlink" title="2.2.2 方法二"></a>2.2.2 方法二</h3><p>注意：必须在<code>__init__.py</code>文件中添加<code>__all__ = []</code>，控制允许导入的模块列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br><span class="line">模块名.目标</span><br></pre></td></tr></table></figure><h4 id="2-2-2-1-体验"><a href="#2-2-2-1-体验" class="headerlink" title="2.2.2.1 体验"></a>2.2.2.1 体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_package <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">my_module1.info_print1()</span><br></pre></td></tr></table></figure><h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><ul><li>导入模块方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 目标</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ul><li>导入包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ul><li><code>__all__ = []</code> ：允许导入的模块或功能列表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模块和包&quot;&gt;&lt;a href=&quot;#模块和包&quot; class=&quot;headerlink&quot; title=&quot;模块和包&quot;&gt;&lt;/a&gt;模块和包&lt;/h1&gt;&lt;h1 id=&quot;一-模块&quot;&gt;&lt;a href=&quot;#一-模块&quot; class=&quot;headerlink&quot; title=&quot;一. 模块&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python2</title>
    <link href="https://esyyes.github.io/2019/11/20/python%E5%9F%BA%E7%A1%80--%E5%BC%82%E5%B8%B8/"/>
    <id>https://esyyes.github.io/2019/11/20/python%E5%9F%BA%E7%A1%80--%E5%BC%82%E5%B8%B8/</id>
    <published>2019-11-20T13:59:36.000Z</published>
    <updated>2019-11-24T12:11:33.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-异常"><a href="#一-异常" class="headerlink" title="一.异常"></a>一.异常</h1><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。</p><h1 id="二-异常的写法"><a href="#二-异常的写法" class="headerlink" title="二. 异常的写法"></a>二. 异常的写法</h1><h2 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line">except:</span><br><span class="line">    如果出现异常执行的代码</span><br></pre></td></tr></table></figure><h2 id="2-2-捕获指定异常"><a href="#2-2-捕获指定异常" class="headerlink" title="2.2 捕获指定异常"></a>2.2 捕获指定异常</h2><h3 id="2-2-1-语法"><a href="#2-2-1-语法" class="headerlink" title="2.2.1 语法"></a>2.2.1 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line">except 异常类型:</span><br><span class="line">    如果捕获到该异常类型执行的代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(num)</span><br><span class="line">except NameError:</span><br><span class="line">    print(&apos;有错误&apos;)</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</li><li>一般try下方只放一行尝试执行的代码。</li></ol><h3 id="2-2-2-捕获多个指定异常"><a href="#2-2-2-捕获多个指定异常" class="headerlink" title="2.2.2 捕获多个指定异常"></a>2.2.2 捕获多个指定异常</h3><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(1/0)</span><br><span class="line"></span><br><span class="line">except (NameError, ZeroDivisionError):</span><br><span class="line">    print(&apos;有错误&apos;)</span><br></pre></td></tr></table></figure><h3 id="2-2-3-捕获异常描述信息"><a href="#2-2-3-捕获异常描述信息" class="headerlink" title="2.2.3 捕获异常描述信息"></a>2.2.3 捕获异常描述信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(num)</span><br><span class="line">except (NameError, ZeroDivisionError) as result:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h3 id="2-2-4-捕获所有异常"><a href="#2-2-4-捕获所有异常" class="headerlink" title="2.2.4 捕获所有异常"></a>2.2.4 捕获所有异常</h3><p>Exception是所有程序异常类的父类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(num)</span><br><span class="line">except Exception as result:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h2 id="2-3-异常的else"><a href="#2-3-异常的else" class="headerlink" title="2.3 异常的else"></a>2.3 异常的else</h2><p>else表示的是如果没有异常要执行的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(1)</span><br><span class="line">except Exception as result:</span><br><span class="line">    print(result)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;我是else，是没有异常的时候执行的代码&apos;)</span><br></pre></td></tr></table></figure><h2 id="2-4-异常的finally"><a href="#2-4-异常的finally" class="headerlink" title="2.4 异常的finally"></a>2.4 异常的finally</h2><p>finally表示的是无论是否异常都要执行的代码</p><h2 id="2-5-自定义异常"><a href="#2-5-自定义异常" class="headerlink" title="2.5 自定义异常"></a>2.5 自定义异常</h2><p>在Python中，抛出自定义异常的语法为<code>raise 异常类对象</code>。</p><h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><p>异常语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">  可能发生异常的代码</span><br><span class="line">except:</span><br><span class="line">  如果出现异常执行的代码</span><br><span class="line">else:</span><br><span class="line">  没有异常执行的代码</span><br><span class="line">finally:</span><br><span class="line">  无论是否异常都要执行的代码</span><br></pre></td></tr></table></figure><p>捕获异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">except 异常类型:</span><br><span class="line">  代码</span><br><span class="line"></span><br><span class="line">except 异常类型 as xx:</span><br><span class="line">代码</span><br></pre></td></tr></table></figure><p>自定义异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 1. 自定义异常类</span><br><span class="line"></span><br><span class="line">class 异常类类名(Exception):</span><br><span class="line">  代码</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    # 设置抛出异常的描述信息</span><br><span class="line">    def __str__(self):</span><br><span class="line">      return ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 抛出异常</span><br><span class="line"></span><br><span class="line">raise 异常类名()</span><br><span class="line"></span><br><span class="line"># 捕获异常</span><br><span class="line"></span><br><span class="line">except Exception...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-异常&quot;&gt;&lt;a href=&quot;#一-异常&quot; class=&quot;headerlink&quot; title=&quot;一.异常&quot;&gt;&lt;/a&gt;一.异常&lt;/h1&gt;&lt;p&gt;当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。&lt;/p&gt;
&lt;h1 id=&quot;二-异
      
    
    </summary>
    
    
      <category term="python基础" scheme="https://esyyes.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python1</title>
    <link href="https://esyyes.github.io/2019/11/20/python%E5%9F%BA%E7%A1%80--%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <id>https://esyyes.github.io/2019/11/20/python%E5%9F%BA%E7%A1%80--%E6%8E%A8%E5%AF%BC%E5%BC%8F/</id>
    <published>2019-11-20T08:29:46.000Z</published>
    <updated>2019-11-21T01:11:50.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PYTHON基础学习–推导式"><a href="#PYTHON基础学习–推导式" class="headerlink" title="PYTHON基础学习–推导式"></a>PYTHON基础学习–推导式</h1><h2 id="⼀-列表推导式"><a href="#⼀-列表推导式" class="headerlink" title="⼀. 列表推导式"></a>⼀<strong>.</strong> 列表推导式</h2><p>作⽤：⽤⼀个表达式创建⼀个有规律的列表或控制⼀个有规律列表。 </p><p>列表推导式⼜叫列表⽣成式。</p><h3 id="1-1-while循环实现"><a href="#1-1-while循环实现" class="headerlink" title="1.1 while循环实现"></a>1.1 while循环实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">i = 0</span><br><span class="line">while i &lt; 10:</span><br><span class="line">    list1.append(i)</span><br><span class="line">    i += 1</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><h3 id="1-2-for循环实现"><a href="#1-2-for循环实现" class="headerlink" title="1.2 for循环实现"></a>1.2 for循环实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">for i in range(10):</span><br><span class="line">    list1.append(i)</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><h3 id="1-3-list推导式"><a href="#1-3-list推导式" class="headerlink" title="1.3 list推导式"></a>1.3 list推导式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i for i in range(10)]</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><h3 id="1-4-带if的列表推导式"><a href="#1-4-带if的列表推导式" class="headerlink" title="1.4 带if的列表推导式"></a>1.4 带if的列表推导式</h3><p>需求：创建0-10的偶数列表</p><p>range()步长实现：range左闭右开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i for i in range(0, 10, 2)]</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><p>if实现推导式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i for i in range(0, 10) if i % 2 == 0]</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><h3 id="1-5-多个for循环推导式"><a href="#1-5-多个for循环推导式" class="headerlink" title="1.5 多个for循环推导式"></a>1.5 多个for循环推导式</h3><p>需求：创建列表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1, 3):</span><br><span class="line">    for j in range(3):</span><br><span class="line">        print((i, j), end=&apos;&apos;)</span><br></pre></td></tr></table></figure><p>推导式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 =[(i, j) for i in range(1, 3) for j in range(3)]</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>推导式的作⽤：简化代码 </p><p>推导式写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 列表推导式</span><br><span class="line">[xx for xx in range()]</span><br><span class="line"># 字典推导式</span><br><span class="line">&#123;xx1: xx2 for ... in ...&#125;</span><br><span class="line"># 集合推导式</span><br><span class="line">&#123;xx for xx in ...&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PYTHON基础学习–推导式&quot;&gt;&lt;a href=&quot;#PYTHON基础学习–推导式&quot; class=&quot;headerlink&quot; title=&quot;PYTHON基础学习–推导式&quot;&gt;&lt;/a&gt;PYTHON基础学习–推导式&lt;/h1&gt;&lt;h2 id=&quot;⼀-列表推导式&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="python基础" scheme="https://esyyes.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
</feed>
