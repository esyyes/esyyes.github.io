<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESY</title>
  
  <subtitle>mengxin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://esyyes.github.io/"/>
  <updated>2020-05-18T07:17:42.000Z</updated>
  <id>https://esyyes.github.io/</id>
  
  <author>
    <name>esy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VF基础知识</title>
    <link href="https://esyyes.github.io/2020/05/18/VF/VF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://esyyes.github.io/2020/05/18/VF/VF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-05-18T07:17:42.000Z</published>
    <updated>2020-05-18T07:17:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="心室纤颤-Ventricular-Fibrillation-，VF"><a href="#心室纤颤-Ventricular-Fibrillation-，VF" class="headerlink" title="心室纤颤(Ventricular Fibrillation ，VF)"></a>心室纤颤(Ventricular Fibrillation ，VF)</h2><p>心室纤颤(Ventricular Fibrillation ，VF)特点：</p><p>QRS-T波群完全消失，代之以形态不同、大小各异间距极不匀齐的颤动波(f波)，频率为250～500次/分钟，颤动波之间无等电线。</p><p><strong>心室扑动典型的心电图特点</strong></p><p>连续而规则、宽大、畸形的QRS波，即心室扑动波。QRS波的时限长，在0.12s以上，QRS波呈向上向下的波幅似正弦样曲线与T波无法分开，QRS波之间无等电线。QRS波频率多在180～250次/分钟，有时可低达150次/分钟或高达300次/分钟。P波消失。</p><h2 id="心室纤颤的数据库："><a href="#心室纤颤的数据库：" class="headerlink" title="心室纤颤的数据库："></a>心室纤颤的数据库：</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%BF%83%E7%94%B5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200519141433962"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cvfdb%E4%BB%8B%E7%BB%8D.png" alt="image-20200519141519264"></p><h2 id="数据长短："><a href="#数据长短：" class="headerlink" title="数据长短："></a>数据长短：</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E9%95%BF%E7%9F%AD.png" alt="image-20200519141626942"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CMITDB%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9" alt="image-20200519141744095"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>直接选择数据库为VFDB，室颤的，然后根据标签选择室颤的信号，筛选10个的样子，每个10s，然后生成excel表格，再选择正常的数据10段，最后来区分，利用利用python直接来读取数据，然后生成数据组合!再进行预处理。最后筛选出一个算法进行进行分类，并有个准确率输出。</p><h1 id="VF数据库"><a href="#VF数据库" class="headerlink" title="VF数据库"></a>VF数据库</h1><p>含有室颤的数据有：424,426,430</p><p>数据长短为：2100s，35min</p><p>采样率为：250</p><p>首先确定VF和VFIB的位置，将其生成excel文档，10s长短，即2500数据点，</p><h2 id="python-wfdb截取数据"><a href="#python-wfdb截取数据" class="headerlink" title="python-wfdb截取数据"></a>python-wfdb截取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签筛选出室颤信号</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/VF/VFDB/424'</span>, channels=[<span class="number">0</span>], sampfrom=<span class="number">314749</span>, sampto=<span class="number">341173</span>)</span><br><span class="line">VF = record.p_signal</span><br><span class="line"></span><br><span class="line">vf = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(record.sig_len):</span><br><span class="line">    vf.append(VF[i][<span class="number">0</span>])</span><br><span class="line">vf = vf[<span class="number">5000</span>:<span class="number">7500</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot(vf, linewidth=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">"U/mv"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.xlabel(<span class="string">"time/s"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(vf)</span><br><span class="line">data.to_excel(<span class="string">"vf1.xlsx"</span>)</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CVF%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%AC10s%E7%9A%84%E3%80%91.png" alt="image-20200520104746150"></p><p><strong>筛选10个数据片段</strong></p><p><strong>筛选正常数据</strong></p><p>下一步就是用算法将其判断出来，写个循环看看，Ndata数据的效果，用pt算法，另外一个也试试</p><p>数据片段的筛选，重新保存筛选，先选择算法进行分析。</p><p>TCI算法：</p><p><a href="https://link.springer.com/article/10.1186/1475-925X-4-60" target="_blank" rel="noopener">https://link.springer.com/article/10.1186/1475-925X-4-60</a></p><p>随便设定一个大于250和小于250就行了</p><p> 纪念下人生第一单哈哈哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;close all</span><br><span class="line">% 读取室颤数据</span><br><span class="line">data = xlsread(&apos;F:\VF\VFdata\0.xlsx&apos;);</span><br><span class="line">% 读取正常数据</span><br><span class="line">% data = xlsread(&apos;F:\VF\Ndata\0.xlsx&apos;);</span><br><span class="line"></span><br><span class="line">% 采样频率</span><br><span class="line">fs = 250;</span><br><span class="line"></span><br><span class="line">% 想要采样的时间长度为10s，所以数据长短通通为2500</span><br><span class="line">vf = data(2:2501, 2);</span><br><span class="line"></span><br><span class="line">% 将采样点的横坐标转换为s</span><br><span class="line">N = length(vf);</span><br><span class="line">m = 0 : N-1;</span><br><span class="line">t = m / fs;</span><br><span class="line"></span><br><span class="line">% 绘制出原始数据</span><br><span class="line">subplot(2,1,1)</span><br><span class="line">plot(t,vf,&apos;b&apos;);</span><br><span class="line"></span><br><span class="line">title(&apos;原始信号&apos;);</span><br><span class="line">xlabel(&apos;time/s&apos;);</span><br><span class="line">ylabel(&apos;U/mV&apos;);</span><br><span class="line"></span><br><span class="line">% 可要可不要这一步将数据平滑一下</span><br><span class="line">subplot(2,1,2)</span><br><span class="line">df = smooth(vf,3);</span><br><span class="line">plot(t,df);</span><br><span class="line">title(&apos;平滑后的信号&apos;);</span><br><span class="line">xlabel(&apos;time/s&apos;);</span><br><span class="line">ylabel(&apos;U/mV&apos;);</span><br><span class="line"></span><br><span class="line">% 利用TCI (Threshold crossing intervals)算法对TCI值进行判断</span><br><span class="line">% verbose = 0数据直接输出8个3s窗口的平均值，verbose = 1，进入调试界面</span><br><span class="line">verbose = 1;</span><br><span class="line">tci = VF_TCI(vf,fs,10,verbose);</span><br><span class="line"></span><br><span class="line">% VF的频率为250～500次/分钟，转换为ms为120-240ms，即可判定为室颤</span><br><span class="line">if (tci &gt;= 120) &amp;&amp; (tci &lt;= 240)</span><br><span class="line">    disp(&apos;该信号为室颤信号&apos;)</span><br><span class="line">else</span><br><span class="line">    disp(&apos;该信号为正常信号&apos;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>读取单个的图</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;close all</span><br><span class="line"></span><br><span class="line"><span class="comment">% 数据标签，将VF数据判定为1，正常的判定为0</span></span><br><span class="line">tag = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">i</span> &lt;= <span class="number">18</span></span><br><span class="line">        tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 循环读取数据，将VF数据判定为1，正常的判定为0</span></span><br><span class="line">num_vf = <span class="number">0</span>;</span><br><span class="line">num_n = <span class="number">0</span>;</span><br><span class="line">all = [];</span><br><span class="line">TCI = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    data = xlsread([<span class="string">'F:\VF\all_data\', num2str(i), '</span>.xlsx']);</span><br><span class="line">    fs = <span class="number">250</span>;</span><br><span class="line">    vf = data(<span class="number">2</span>:<span class="number">2501</span>, <span class="number">2</span>);    </span><br><span class="line">    tci = VF_TCI(vf,fs,<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">    TCI(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = tci;</span><br><span class="line">    <span class="keyword">if</span> (tci &gt;= <span class="number">120</span>) &amp;&amp; (tci &lt;= <span class="number">240</span>)</span><br><span class="line">        num_vf = num_vf + <span class="number">1</span>;</span><br><span class="line">        all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num_n = num_n + <span class="number">1</span>;</span><br><span class="line">        all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 进行比较，用标签和这个你判定的数据进行比较</span></span><br><span class="line">ALL = <span class="number">32</span>;</span><br><span class="line">True = <span class="number">0</span>;</span><br><span class="line">F = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) == tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        True = True + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        F = F + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span>     </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 输出得到判定准确的值，差不多准确率就基本可以了，毕竟100%了，再转换为百分数</span></span><br><span class="line">ACR = True / ALL;</span><br><span class="line">accuracy = strcat(num2str(ACR * <span class="number">100</span>),<span class="string">'%'</span>);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'准确率为:'</span>,accuracy]);</span><br></pre></td></tr></table></figure><p>输出为准确率</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tci</span> = <span class="title">VF_TCI</span><span class="params">(xf,fs,wL,verbose)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">% INPUT:</span></span><br><span class="line"><span class="comment">% - xf: ecg signal (preprocessed)</span></span><br><span class="line"><span class="comment">% - fs: sampling frequency</span></span><br><span class="line"><span class="comment">% - wL: window length, in seconds </span></span><br><span class="line"><span class="comment">% - verbose: debugging variable (1: plot; 0: default, not ploting)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUT</span></span><br><span class="line"><span class="comment">% - tci parameter</span></span><br><span class="line"></span><br><span class="line">wl = <span class="number">1</span>*fs;  <span class="comment">% 1-sec window samples</span></span><br><span class="line">wa = <span class="number">3</span>*fs;  <span class="comment">% 3-sec window samples</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = wL<span class="number">-3</span>+<span class="number">1</span>; <span class="comment">% number of 3-sec windows in wl segment </span></span><br><span class="line"></span><br><span class="line"><span class="comment">%becg = zeros(1,wa);</span></span><br><span class="line">becg1 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line">becg2 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line">becg3 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line"></span><br><span class="line">tci6 = <span class="built_in">zeros</span>(<span class="number">1</span>,L);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">0</span>:L<span class="number">-1</span></span><br><span class="line">    wsamples1 = <span class="built_in">j</span>*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">1</span>)*wl;</span><br><span class="line">    wsamples2 = (<span class="built_in">j</span>+<span class="number">1</span>)*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">2</span>)*wl;</span><br><span class="line">    wsamples3 = (<span class="built_in">j</span>+<span class="number">2</span>)*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">3</span>)*wl;</span><br><span class="line">    </span><br><span class="line">    stage1 = xf(wsamples1)-<span class="built_in">mean</span>(xf(wsamples1)); maxv = <span class="built_in">max</span>(stage1); </span><br><span class="line">    th1 = <span class="number">0.2</span>*maxv; becg1(stage1&gt;th1) = <span class="number">1</span>;</span><br><span class="line">    stage2 = xf(wsamples2)-<span class="built_in">mean</span>(xf(wsamples2)); maxv = <span class="built_in">max</span>(stage2); </span><br><span class="line">    th2 = <span class="number">0.2</span>*maxv; becg2(stage2&gt;th2) = <span class="number">1</span>;</span><br><span class="line">    stage3 = xf(wsamples3)-<span class="built_in">mean</span>(xf(wsamples3)); maxv = <span class="built_in">max</span>(stage3); </span><br><span class="line">    th3 = <span class="number">0.2</span>*maxv; becg3(stage3&gt;th3) = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    becg = [becg1 becg2 becg3];</span><br><span class="line">    </span><br><span class="line">    aux = [<span class="number">0</span> diff(becg)];</span><br><span class="line">    </span><br><span class="line">    s1 = <span class="built_in">find</span>(aux(<span class="number">1</span>:wl)==<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(s1)</span><br><span class="line">        t1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t1 = (wl-s1(<span class="keyword">end</span>))/fs;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    index = <span class="built_in">find</span>(aux(wl+<span class="number">1</span>:<span class="number">2</span>*wl));</span><br><span class="line">    s2 = aux(wl+<span class="number">1</span>:<span class="number">2</span>*wl);</span><br><span class="line">    pulses = s2(index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pulses(<span class="number">1</span>) == <span class="number">-1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">-1</span></span><br><span class="line">        t2 = <span class="number">0</span>;</span><br><span class="line">        t3 = (wl-index(<span class="keyword">end</span>))/fs;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">1</span></span><br><span class="line">        t2 = index(<span class="number">1</span>)/fs;</span><br><span class="line">        t3 = <span class="number">0</span>;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">-1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">1</span></span><br><span class="line">        t2 = <span class="number">0</span>;</span><br><span class="line">        t3 = <span class="number">0</span>;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">-1</span></span><br><span class="line">        t2 = index(<span class="number">1</span>)/fs;</span><br><span class="line">        t3 = (wl-index(<span class="keyword">end</span>))/fs;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses))/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">'This should not be happening!'</span>)</span><br><span class="line">        keyboard; <span class="comment">%better to debug</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">       </span><br><span class="line">    s4 = <span class="built_in">find</span>(aux(<span class="number">2</span>*wl+<span class="number">1</span>:<span class="number">3</span>*wl)==<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(s4)</span><br><span class="line">        t4 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t4 = s4(<span class="number">1</span>)/fs;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">    tci6(<span class="built_in">j</span>+<span class="number">1</span>) = <span class="number">1000</span>/((N<span class="number">-1</span>)+(t2/(t1+t2))+(t3/(t3+t4)));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%Plot data</span></span><br><span class="line">    <span class="keyword">if</span> verbose</span><br><span class="line">        </span><br><span class="line">        f = <span class="built_in">figure</span>;</span><br><span class="line">        t = [wsamples1 wsamples2 wsamples3]/fs;</span><br><span class="line">        stage = [stage1' stage2' stage3'];</span><br><span class="line">        </span><br><span class="line">        subplot(<span class="number">211</span>)        </span><br><span class="line">        <span class="built_in">plot</span>(t,stage); <span class="built_in">hold</span> on;</span><br><span class="line">        <span class="built_in">plot</span>(t,[th1*<span class="built_in">ones</span>(<span class="number">1</span>,wl) th2*<span class="built_in">ones</span>(<span class="number">1</span>,wl) th3*<span class="built_in">ones</span>(<span class="number">1</span>,wl)],<span class="string">'r'</span>);</span><br><span class="line">        xlabel(<span class="string">'time/s'</span>);</span><br><span class="line">        ylabel(<span class="string">'ECG and threshold'</span>);</span><br><span class="line">        </span><br><span class="line">        subplot(<span class="number">212</span>);</span><br><span class="line">        <span class="built_in">plot</span>(t,becg,<span class="string">'k'</span>); <span class="built_in">hold</span> on; stem(t,aux,<span class="string">'r'</span>); <span class="built_in">hold</span> on;</span><br><span class="line">        line([<span class="built_in">j</span>+<span class="number">1</span> <span class="built_in">j</span>+<span class="number">1</span>],[<span class="number">-1.2</span> <span class="number">1.2</span>]);line([<span class="built_in">j</span>+<span class="number">2</span> <span class="built_in">j</span>+<span class="number">2</span>],[<span class="number">-1.2</span> <span class="number">1.2</span>]);</span><br><span class="line">        axis([t(<span class="number">1</span>) t(<span class="keyword">end</span>) <span class="number">-1.2</span> <span class="number">1.2</span>])</span><br><span class="line">        xlabel(<span class="string">'time/s'</span>);</span><br><span class="line">        ylabel(<span class="string">'pulses'</span>);</span><br><span class="line">        msg = sprintf(<span class="string">'t_1=%2.2f\t\t t_2=%2.2f\t\t t_3=%2.2f\t\t t_4=%2.2f'</span>,...</span><br><span class="line">            t1,t2,t3,t4);</span><br><span class="line">        title(msg)</span><br><span class="line">        text(<span class="built_in">j</span>+<span class="number">1.2</span>,<span class="number">-0.5</span>,[<span class="string">'TCI = '</span> num2str(tci6(<span class="built_in">j</span>+<span class="number">1</span>))])</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">hold</span> off</span><br><span class="line">        <span class="comment">% 是否进行调试，观看效果</span></span><br><span class="line">        keyboard;</span><br><span class="line">        close(f);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    becg1 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    becg2 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    becg3 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tci = <span class="built_in">mean</span>(tci6);</span><br></pre></td></tr></table></figure><p>TCI算法</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CTCI%E7%AE%97%E6%B3%95%E5%BE%97%E5%88%B0%E7%9A%84%E5%9B%BE" alt="image-20200520195855735"></p><p>准确率为100%结束</p><p><img src="http://img1.cache.netease.com/96/2014/8/12/2014081209202754754.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;心室纤颤-Ventricular-Fibrillation-，VF&quot;&gt;&lt;a href=&quot;#心室纤颤-Ventricular-Fibrillation-，VF&quot; class=&quot;headerlink&quot; title=&quot;心室纤颤(Ventricular Fibrillat
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>图像识别的目标</title>
    <link href="https://esyyes.github.io/2020/05/05/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
    <id>https://esyyes.github.io/2020/05/05/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E7%9A%84%E7%9B%AE%E6%A0%87/</id>
    <published>2020-05-05T13:54:25.000Z</published>
    <updated>2020-05-05T13:54:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像识别的学习目标"><a href="#图像识别的学习目标" class="headerlink" title="图像识别的学习目标"></a>图像识别的学习目标</h2><ol><li>写一篇专利</li></ol><p>专利：利用图像识别技术，识别QRS波形的R波</p><ol><li>写一个小论文</li></ol><p>利用图像识别来对睡眠进行分类，或者区分是否是OSA和健康人群</p><ol><li>把现在这篇小论文写完，然后重新学下数据处理方向的知识，图像处理还是要先理解</li><li>5月中旬争取写完小论文</li></ol><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%96%B5%E5%86%85.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像识别的学习目标&quot;&gt;&lt;a href=&quot;#图像识别的学习目标&quot; class=&quot;headerlink&quot; title=&quot;图像识别的学习目标&quot;&gt;&lt;/a&gt;图像识别的学习目标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;写一篇专利&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;专利：利用图像识别技术，识别QR
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-opencv基础入门</title>
    <link href="https://esyyes.github.io/2020/05/05/python-opencv%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://esyyes.github.io/2020/05/05/python-opencv%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2020-05-05T12:47:17.000Z</published>
    <updated>2020-05-05T12:47:17.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-Matplotlib视频讲解版</title>
    <link href="https://esyyes.github.io/2020/04/12/python-Matplotlib%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E7%89%88/"/>
    <id>https://esyyes.github.io/2020/04/12/python-Matplotlib%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E7%89%88/</id>
    <published>2020-04-12T04:22:04.000Z</published>
    <updated>2020-04-12T04:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-Matplotlib视频讲解版"><a href="#python-Matplotlib视频讲解版" class="headerlink" title="python-Matplotlib视频讲解版"></a>python-Matplotlib视频讲解版</h1><p>视频连接</p><p><a href="https://www.bilibili.com/video/BV1tt411e7zF?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1tt411e7zF?p=1</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制成一条线形式</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># xy范围</span></span><br><span class="line">plt.ylim((<span class="number">80</span>,<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 设定xy的尺度大小</span></span><br><span class="line">new_ticks = np.linspace(<span class="number">80</span>, <span class="number">100</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticks改变坐标轴的大小</span></span><br><span class="line">plt.yticks(new_ticks, fontsize=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变标签注释的大小</span></span><br><span class="line">plt.ylabel(<span class="string">'Average Accuracy/%'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改横坐标的标签和字体大小，以及转换方向</span></span><br><span class="line">plt.xticks(x,(df.keys()), fontsize=<span class="number">8</span>, rotation=<span class="number">0</span>)</span><br><span class="line">l1, = ax.plot(x,y1,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line">l2, = ax.plot(x,y2,color=<span class="string">'blue'</span>,linewidth=<span class="number">3.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment"># 标准图例</span></span><br><span class="line">plt.legend(handles=[l1,l2],labels=[<span class="string">'Original model'</span>,<span class="string">'Optimization model'</span>],loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment"># shift+tab可以查看图中函数的设置</span></span><br><span class="line"><span class="comment"># 改变图的边框颜色</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cimage-20200412210230713.png" alt="image-20200412210230713"></p><p><a href="https://jishuin.proginn.com/p/7056.html" target="_blank" rel="noopener">https://jishuin.proginn.com/p/7056.html</a></p><p>这个链接中描述了很多绘制</p><p>多用shift+tab加来查看函数的说明</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-Matplotlib视频讲解版&quot;&gt;&lt;a href=&quot;#python-Matplotlib视频讲解版&quot; class=&quot;headerlink&quot; title=&quot;python-Matplotlib视频讲解版&quot;&gt;&lt;/a&gt;python-Matplotlib视频讲
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_可视化之seaborn</title>
    <link href="https://esyyes.github.io/2020/03/26/python/python-%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bseaborn/"/>
    <id>https://esyyes.github.io/2020/03/26/python/python-%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bseaborn/</id>
    <published>2020-03-26T13:16:31.000Z</published>
    <updated>2020-03-26T13:16:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-可视化之seaborn"><a href="#python-可视化之seaborn" class="headerlink" title="python_可视化之seaborn"></a>python_可视化之seaborn</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><p>主题修改：</p><p><a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/introductory/customizing.html</a></p><p>将自己的主题设定为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.cntofu.com/book/172/docs/20.md" target="_blank" rel="noopener">https://www.cntofu.com/book/172/docs/20.md</a></p><p>后面还是参考上面网址进行学习，基本已经理清seaborn怎么绘制。</p><p>好吧还是使用这个！</p><p><a href="https://www.jb51.net/article/104924.htm" target="_blank" rel="noopener">https://www.jb51.net/article/104924.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-可视化之seaborn&quot;&gt;&lt;a href=&quot;#python-可视化之seaborn&quot; class=&quot;headerlink&quot; title=&quot;python_可视化之seaborn&quot;&gt;&lt;/a&gt;python_可视化之seaborn&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——读取excel文件之奇葩数据</title>
    <link href="https://esyyes.github.io/2020/03/25/python/python%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E4%B9%8B%E5%A5%87%E8%91%A9%E6%95%B0%E6%8D%AE/"/>
    <id>https://esyyes.github.io/2020/03/25/python/python%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E4%B9%8B%E5%A5%87%E8%91%A9%E6%95%B0%E6%8D%AE/</id>
    <published>2020-03-25T14:16:10.000Z</published>
    <updated>2020-03-25T14:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python——读取excel文件"><a href="#python——读取excel文件" class="headerlink" title="python——读取excel文件"></a>python——读取excel文件</h1><h2 id="对应3-25-RFE-RF特征选择进行绘图读取程序"><a href="#对应3-25-RFE-RF特征选择进行绘图读取程序" class="headerlink" title="对应3-25 RFE-RF特征选择进行绘图读取程序"></a>对应3-25 RFE-RF特征选择进行绘图读取程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取excel表格</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = pd.read_excel(<span class="string">'E:/features/%s.xlsx'</span>%<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">data.head()</span><br><span class="line">数据如下表所示，在生成excel的时候，直接存的列表，纯属失误</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right"></th><th align="left">0</th><th align="right">1</th></tr></thead><tbody><tr><td align="right">0</td><td align="left">[0.9420289855072463, 0.9710144927536232, 0.956…</td><td align="right">[0.9710144927536232, 0.9565217391304348, 0.956…</td></tr><tr><td align="right">1</td><td align="left">[0.7523809523809524, 0.7142857142857143, 0.742…</td><td align="right">[0.6285714285714286, 0.780952380952381, 0.7523…</td></tr><tr><td align="right">2</td><td align="left">[0.6761904761904762, 0.819047619047619, 0.9047…</td><td align="right">[0.7333333333333333, 0.7714285714285715, 0.847…</td></tr><tr><td align="right">3</td><td align="left">[0.7692307692307693, 0.8717948717948718, 0.910…</td><td align="right">[0.7307692307692307, 0.8846153846153846, 0.871…</td></tr><tr><td align="right">4</td><td align="left">[0.7230046948356808, 0.7981220657276995, 0.807…</td><td align="right">[0.6619718309859155, 0.7417840375586855, 0.737…</td></tr></tbody></table><p>一个空格中有运行的25个数据。需要将18个数据组，每个数据运行两次，25个数据，分别取对应的行进行求平均值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data = np.array(data)</span><br><span class="line">train_x_list = train_data.tolist() <span class="comment">#list</span></span><br><span class="line">train_x_list[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="string">'[0.9420289855072463, 0.9710144927536232, 0.9565217391304348, 0.9710144927536232, 0.9565217391304348, 0.9565217391304348, 0.9565217391304348, 0.9710144927536232, 0.9710144927536232, 0.9710144927536232, 0.9420289855072463, 0.9565217391304348, 0.9710144927536232, 0.9710144927536232, 0.9565217391304348, 0.9565217391304348, 0.9710144927536232, 0.9565217391304348, 0.9420289855072463, 0.9565217391304348, 0.9420289855072463, 0.9565217391304348, 0.9710144927536232, 0.9565217391304348, 0.9420289855072463]'</span></span><br></pre></td></tr></table></figure><p>先转换为列表，问题1，它表达的是字符串，要先去掉’’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(train_x_list[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 转换为列表。用eval()函数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list_mean = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">    list_x = eval(train_x_list[i][<span class="number">0</span>])</span><br><span class="line">    list_y = eval(train_x_list[i][<span class="number">1</span>])</span><br><span class="line">    list_m = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list_x)):</span><br><span class="line">        list_m.append((list_x[j] + list_y[j])/<span class="number">2</span>)</span><br><span class="line">    list_mean.append(list_m)</span><br></pre></td></tr></table></figure><p>生成一个含有18个小列表，已经求了一次平均，每个小列表里面有25个数据组</p><p>参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list_f = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>):</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        s.append(list_mean[i][j])</span><br><span class="line">    c = (np.array(s)).mean()</span><br><span class="line">    list_f.append(c)</span><br></pre></td></tr></table></figure><p>均值化，只有一个25数据的列表</p><p>根据这个画图即可</p><h2 id="参考-3-19-绘制特征选择曲线-程序"><a href="#参考-3-19-绘制特征选择曲线-程序" class="headerlink" title="参考 3-19 绘制特征选择曲线 程序"></a>参考 3-19 绘制特征选择曲线 程序</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python——读取excel文件&quot;&gt;&lt;a href=&quot;#python——读取excel文件&quot; class=&quot;headerlink&quot; title=&quot;python——读取excel文件&quot;&gt;&lt;/a&gt;python——读取excel文件&lt;/h1&gt;&lt;h2 id=&quot;对应3-2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_Accuracy,Precison,Recall,F1 score</title>
    <link href="https://esyyes.github.io/2020/03/22/python/python-Accuracy-Precison-Recall-F1-score/"/>
    <id>https://esyyes.github.io/2020/03/22/python/python-Accuracy-Precison-Recall-F1-score/</id>
    <published>2020-03-22T13:31:12.000Z</published>
    <updated>2020-03-22T13:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Accuracy-Precison-Recall-F1-score"><a href="#Accuracy-Precison-Recall-F1-score" class="headerlink" title="Accuracy,Precison,Recall,F1 score"></a>Accuracy,Precison,Recall,F1 score</h1><p>主要参考这两篇博文</p><p><a href="https://blog.csdn.net/u014380165/article/details/77493978" target="_blank" rel="noopener">https://blog.csdn.net/u014380165/article/details/77493978</a></p><p><a href="https://www.cnblogs.com/laozhanghahaha/p/12374027.html" target="_blank" rel="noopener">https://www.cnblogs.com/laozhanghahaha/p/12374027.html</a></p><p>假设一个二分类问题，样本有正负两个类别。那么模型预测的结果和真实标签的组合就有4种：<strong>TP，FP，FN，TN</strong>，如下图所示。这4个分别表示：实际为正样本你预测为正样本，实际为负样本你预测为正样本，实际为正样本你预测为负样本，实际为负样本你预测为负样本。<br><img src="https://img-blog.csdnimg.cn/20181214093105758.png" alt="在这里插入图片描述"></p><p><strong>TP(True Positive)</strong> －  被正确预测的正例．表示真实值为正，同时也被正确的预测为正；</p><p><strong>TN(True Negative)</strong> －被正确预测的反例．表示真实值为反例，也被正确的预测为反例；</p><p><strong>FP(False Positive)</strong> －  表示真实值为负例，被错误的预测为正例；</p><p><strong>FN(False Negative)－</strong>表示真实值为正例，被错误的预测为反例；</p><p>那么Precision和Recall表示什么意思？一般Precision和Recall都是针对某个类而言的，比如正类别的Recall，负类别的Recall等。如果<strong>你是10分类，那么可以有1这个类别的Precision，2这个类别的Precision，3这个类别的Recall等。而没有类似全部数据集的Recall或Precision这种说法。</strong></p><p>Precison,Recall都对应的2分类，是单独一个类别的准确率</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cprecison.png" alt="image-20200322213614527"></p><p><strong>Precision</strong>适用场景:当反例被错误的预测为正例（假正例）产生的代价很高的时候，适合用查准率，因为高查准率意味着低假正率/假阳性．比如在垃圾邮件检测中，假正例意味着非垃圾邮件（实际为负）被错误的预测为垃圾邮件（预测为正）．如果一个垃圾邮件监测系统的查准率不高导致很多非垃圾邮件被归到垃圾邮箱里去，那么邮箱用户可能会丢失或者漏看一些很重要的邮件．</p><p><strong>Recall</strong>使用场景:当正例被错误的预测为反例（假反例）产生很高的代价时，用查全率，因为高查全率意味着低假反率/假阴性．比如说在银行的欺诈检测或医院的病患者检测中，如果将欺诈性交易（实际为正）预测为非欺诈性交易（预测为负），则可能会给银行带来非常严重的损失。再比如以最近的新冠疫情为例，如果一个患病者（实际为正）经过试剂检测被预测为没有患病（预测为负），这样的假反例或者说假阴性产生的风险就非常大．</p><p>还有一个概念：<strong>Accuracy，表示你有多少比例的样本预测对了</strong>，公式如下，分母永远是全部样本的数量，很好理解。很容易扩展到多类别的情况，比如10分类，<strong>那么分子就是第一个类别预测对了多少个+第二个类别预测对了多少个+…+第十个类别预测对了多少个。</strong></p><p><img src="https://img-blog.csdn.net/20170823081655165?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDM4MDE2NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>所以用Accuracy来进行判断分类的准确率</p><p>F1score的计算是这样的：1/F1score = 1/2(1/recall + 1/precision)*，简单换算后就成了：F1score=2recallprecision/(recall+precision)。同样F1score也是针对某个样本而言的。一般而言F1score用来综合precision和recall作为一个评价指标。还有F1score的变形，主要是添加一个权重系数可以根据需要对recall和precision赋予不同的权重。<br><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CF1SCORE.png" alt="image-20200322214139789"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Accuracy-Precison-Recall-F1-score&quot;&gt;&lt;a href=&quot;#Accuracy-Precison-Recall-F1-score&quot; class=&quot;headerlink&quot; title=&quot;Accuracy,Precison,Recall,F
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_随机森林参数设置</title>
    <link href="https://esyyes.github.io/2020/03/22/python/python-%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
    <id>https://esyyes.github.io/2020/03/22/python/python-%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-03-22T05:37:20.000Z</published>
    <updated>2020-03-22T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i0.hdslb.com/bfs/archive/f252847e6071d16bf5f9b423d759b2c8a0c6eb3d.jpg" alt=""></p><p><img src="http://i2.hdslb.com/bfs/archive/2c891439af62694315487dc640d3beb6d5709593.jpg" alt=""></p><h1 id="随机森林参数设置"><a href="#随机森林参数设置" class="headerlink" title="随机森林参数设置"></a>随机森林参数设置</h1><h2 id="随机森林介绍"><a href="#随机森林介绍" class="headerlink" title="随机森林介绍"></a>随机森林介绍</h2><h3 id="随机森林定义"><a href="#随机森林定义" class="headerlink" title="随机森林定义"></a>随机森林定义</h3><p>在<a href="https://baike.baidu.com/item/机器学习" target="_blank" rel="noopener">机器学习</a>中，<strong>随机森林是一个包含多个决策树的<a href="https://baike.baidu.com/item/分类器" target="_blank" rel="noopener">分类器</a></strong>， 并且其输出的类别是由个别树输出的类别的众数而定。 Leo Breiman和Adele Cutler发展出推论出随机森林的算法。 而 “Random Forests” 是他们的<a href="https://baike.baidu.com/item/商标" target="_blank" rel="noopener">商标</a>。 这个术语是1995年由贝尔实验室的Tin Kam Ho所提出的随机决策森林（random decision forests）而来的。这个方法则是结合 Breimans 的 “Bootstrap aggregating” 想法和 Ho 的”random subspace method”以建造<a href="https://baike.baidu.com/item/决策树" target="_blank" rel="noopener">决策树</a>的集合。</p><h3 id="随机森林参数定义"><a href="#随机森林参数定义" class="headerlink" title="随机森林参数定义"></a>随机森林参数定义</h3><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html" target="_blank" rel="noopener">https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html</a></p><p><a href="https://blog.csdn.net/Longtermevolution/article/details/100919721" target="_blank" rel="noopener">https://blog.csdn.net/Longtermevolution/article/details/100919721</a></p><p><strong>n_estimators：</strong></p><p>森林中数的个数。<br>这个属性是典型的<strong>模型表现与模型效率成反比的影响因子</strong>，即便如此，你还是应该尽可能提高这个数字，以让你的模型更准确更稳定。</p><p><strong>criterion ：</strong></p><p>度量分裂的标准。可选值：“mse”，均方差（mean squared error）；“mae”，平均绝对值误差（mean absolute error） 支持的标准是基尼杂质的“<strong>gini（基尼）</strong>”和<strong>信息增益的“entropy（熵</strong>）”。注意：此参数是特定于树的。<strong>默认是基尼</strong></p><p><strong>max_features</strong> ：</p><p>寻找<strong>最佳分裂点时考虑的特征数目</strong>。可选值，int（具体的数目），float（数目的百分比），string（“auto”， “sqrt”，“log2”）.<br>这一属性是对单个树来设置的，通常来讲，<strong>这个值越大单棵树可以考虑的属性越多，则模型的表现就越好</strong>。但是这也不是肯定的，不过有一点是肯定的，增加这个值会导致算法运行速度变慢，所以需要我们考虑去达到一个平衡。</p><p><strong>max_depth :</strong>integer或者None。树的最大深度，如果None，节点扩展直到所有叶子是纯的或者所有叶子节点包含的样例数小于min_samples_split </p><p><strong>min_samples_split</strong> ： 分裂内部节点需要的最少样例数。int(具体数目),float(数目的百分比) </p><p><strong>min_samples_leaf</strong> ：叶子节点上应有的最少样例数。int(具体数目),float(数目的百分比)。<br>更少的节点数使得模型更容易遭受noise data的影响，我通常设置这个值大于50，但是你需要寻找最适合你的数值。 </p><p><strong>min_weight_fraction_leaf ：</strong> </p><p><strong>max_leaf_nodes ：</strong>以”最优优先方式”(best-first fashion),最优节点定义为:纯度的相对减少.如果None则不限制叶子节点个数;[float]<br><strong>min_impurity_split :</strong> 树增长提前结束的阈值.对于当前节点,大于这个阈值将分裂,否则就看做叶子节点; [float]<br><strong>min_impurity_decrease ：</strong>一个阈值,表示一个节点分裂的条件是:如果这次分裂纯度的减少大于等于这这个值.<br><strong>bootstrap</strong> ：构建数是不是采用有放回样本的方式(bootstrap samples); [True/False]<br><strong>oob_score ：</strong>交叉验证相关的属性。<br><strong>n_jobs ：</strong>设定fit和predict阶段并列执行的任务个数,<strong>如果设置为-1表示并行执行的任务数等于计算级核数</strong>; [integer, optional (default=1)]<br><strong>random_state</strong> ：如果是<strong>int数值表示它就是随机数产生器的种子</strong>.如果指定RandomState实例,它就是随机产生器的种子.如果是None,随机数产生器是np.random所用的RandomState实例; [int, RandomState instance or None, optional (default=None)]<br><strong>verbose ：</strong>控制<strong>构建数过程的冗长度</strong>; [int, optional (default=0)]<br><strong>warm_start ：</strong>当设置为True,重新使用之前的结构去拟合样例并且加入更多的估计器(estimators,在这里就是随机树)到组合器中; [True/False]<br><strong>class_weight: “</strong>banlanced”模式是根据y标签值自动调整权值与输入数据的类频率成反比,计算公式是:n_samples / (n_classes np.bincount(y)).“balanced_subsample”模式的与”balanced模式相同,只<strong>不过在每一次树增长过程中权值的计算是根据有放回样本的</strong>.</p><h2 id="模型调参利器-gridSearchCV（网格搜索）"><a href="#模型调参利器-gridSearchCV（网格搜索）" class="headerlink" title="模型调参利器 gridSearchCV（网格搜索）"></a>模型调参利器 gridSearchCV（网格搜索）</h2><p>GridSearchCV，它存在的意义就是<strong>自动调参</strong>，只要把参数输进去，就能给出<strong>最优化的结果和参数</strong>。但是这个方法适合于<strong>小数据集</strong>，一旦数据的量级上去了，很难得出结果。这个时候就是需要动脑筋了。数据量比较大的时候可以使用一个快速调优的方法——坐标下降。它其实是一种<strong>贪心算法</strong>：<strong>拿当前对模型影响最大的参数调优，直到最优化；再拿下一个影响最大的参数调优</strong>，如此下去，直到所有的参数调整完毕。这个方法的缺点就是可能会调到局部最优而不是全局最优，但是省时间省力，巨大的优势面前，还是试一试吧，后续可以再拿bagging再优化。</p><h2 id="2-参数说明"><a href="#2-参数说明" class="headerlink" title="2.参数说明"></a>2.参数说明</h2><p><em>class sklearn.model_selection.<strong>GridSearchCV</strong>(estimator, param_grid, scoring=None, fit_params=None, n_jobs=1, iid=True, refit=True, cv=None, verbose=0, pre_dispatch=‘2*n_jobs’, error_score=’raise’, return_train_score=’warn’)</em></p><p><strong>（1）</strong>    <strong><em>estimator\</em></strong></p><p>选择使用的分类器，并且传入除需要确定最佳的参数之外的其他参数。每一个分类器都需要一个scoring参数，或者score方法：estimator=RandomForestClassifier(min_samples_split=100,min_samples_leaf=20,max_depth=8,max_features=’sqrt’,random_state=10),</p><p><strong>（2）</strong>    <strong><em>param_grid\</em></strong></p><p>需要最优化的参数的取值，值为字典或者列表，例如：param_grid =param_test1，param_test1 = {‘n_estimators’:range(10,71,10)}。</p><p><strong>（3）</strong>    <strong><em>scoring=None\</em></strong></p><p>模型评价标准，默认None,这时需要使用score函数；或者如scoring=’roc_auc’，根据所选模型不同，评价准则不同。字符串（函数名），或是可调用对象，需要其函数签名形如：scorer(estimator, X, y)；如果是None，则使用estimator的误差估计函数。具体值的选取看本篇第三节内容。</p><p><strong>（4）</strong>    <strong><em>fit_params=None\</em></strong></p><p><strong>（5）</strong>    <strong><em>n_jobs=1\</em></strong></p><p>n_jobs: 并行数，int：个数,-1：跟CPU核数一致, 1:默认值</p><p><strong>（6）</strong>    <strong><em>iid=True\</em></strong></p><p><strong>iid</strong>:默认True,为True时，默认为各个样本fold概率分布一致，误差估计为所有样本之和，而非各个fold的平均。</p><p><strong>（7）</strong>    <strong><em>refit=True\</em></strong></p><p>默认为True,程序将会以交叉验证训练集得到的最佳参数，重新对所有可用的训练集与开发集进行，作为最终用于性能评估的最佳模型参数。即在搜索参数结束后，用最佳参数结果再次fit一遍全部数据集。</p><p><strong>（8）</strong>    <strong><em>cv=None\</em></strong></p><p>交叉验证参数，默认None，使用三折交叉验证。指定fold数量，默认为3，也可以是yield训练/测试数据的生成器。</p><p><strong>（9）</strong>    <strong><em>verbose=0\</em>, *scoring=None*</strong></p><p><strong>verbose</strong>：日志冗长度，int：冗长度，0：不输出训练过程，1：偶尔输出，&gt;1：对每个子模型都输出。</p><p><strong>（10）</strong>  <strong><em>pre_dispatch=‘2*n_jobs’\</em></strong></p><p>指定总共分发的并行任务数。当n_jobs大于1时，数据将在每个运行点进行复制，这可能导致OOM，而设置pre_dispatch参数，则可以预先划分总共的job数量，使数据最多被复制pre_dispatch次</p><p><strong>（11）</strong>  <strong><em>error_score=’raise’\</em></strong></p><p><strong>（12）</strong>  <strong><em>return_train_score=’warn’\</em></strong></p><p>如果“False”，cv_results_属性将不包括训练分数</p><p>回到sklearn里面的GridSearchCV，GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。</p><p><strong>打算使用网格搜索对模型进行调优，然后再进行交叉验证！</strong></p><h2 id="步骤实现："><a href="#步骤实现：" class="headerlink" title="步骤实现："></a>步骤实现：</h2><ol><li>想让树的数目从10到100</li></ol><p>生成一个10,100的列表</p><p>list(range(10,100))</p><ol start="2"><li>构建循环</li><li>实现代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">rfc = RandomForestClassifier()</span><br><span class="line"></span><br><span class="line">tuned_parameter = [&#123; <span class="string">'n_estimators'</span>:list(range(<span class="number">10</span>, <span class="number">100</span>))&#125;]</span><br><span class="line">对模型进行交叉验证，<span class="comment"># 将训练/测试数据集划分10个互斥子集</span></span><br><span class="line"><span class="comment"># kflod = StratifiedKFold(n_splits=10, shuffle = True,random_state=7)</span></span><br><span class="line"><span class="comment"># 将模型进行网格搜索调优</span></span><br><span class="line">clf = GridSearchCV(estimator=rfc,param_grid=tuned_parameter, cv=kflod, n_jobs=<span class="number">1</span>)</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"><span class="comment"># 将模型进行网格搜索调优</span></span><br><span class="line">print(<span class="string">"Best: %f using %s"</span> % (clf.best_score_,clf.best_params_))</span><br><span class="line">out：</span><br><span class="line">Best: <span class="number">0.912500</span> using &#123;<span class="string">'n_estimators'</span>: <span class="number">28</span>&#125;</span><br></pre></td></tr></table></figure><p>没啥必要循环了，每次都在变，选个最高的模型越复杂越好，就选14的倍数，<strong>28</strong></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a><strong>参考博客</strong></h2><p>参考这篇对模型进行优化，还可以用下这个模型</p><p><a href="https://blog.csdn.net/weixin_41988628/article/details/83098130" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41988628/article/details/83098130</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 数据科学计算工具</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 数值计算工具</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 可视化</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns <span class="comment"># matplotlib的高级API</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold <span class="comment">#交叉验证</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV <span class="comment">#网格搜索</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="comment">#将数据集分开成训练集和测试集</span></span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier                     <span class="comment">#xgboost</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pima = pd.read_csv(<span class="string">"pima_indians-diabetes.csv"</span>)</span><br><span class="line">print(pima.head())</span><br><span class="line"></span><br><span class="line">x = pima.iloc[:,<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">y = pima.iloc[:,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">seed = <span class="number">7</span> <span class="comment">#重现随机生成的训练</span></span><br><span class="line">test_size = <span class="number">0.33</span> <span class="comment">#33%测试，67%训练</span></span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=test_size, random_state=seed</span><br><span class="line">model = XGBClassifier()               </span><br><span class="line">learning_rate = [<span class="number">0.0001</span>,<span class="number">0.001</span>,<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>] <span class="comment">#学习率</span></span><br><span class="line">gamma = [<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.01</span>, <span class="number">0.001</span>]</span><br><span class="line"></span><br><span class="line">param_grid = dict(learning_rate = learning_rate,gamma = gamma)<span class="comment">#转化为字典格式，网络搜索要求</span></span><br><span class="line"></span><br><span class="line">kflod = StratifiedKFold(n_splits=<span class="number">10</span>, shuffle = <span class="literal">True</span>,random_state=<span class="number">7</span>)<span class="comment">#将训练/测试数据集划分10个互斥子集，</span></span><br><span class="line"></span><br><span class="line">grid_search = GridSearchCV(model,param_grid,scoring = <span class="string">'neg_log_loss'</span>,n_jobs = <span class="number">-1</span>,cv = kflod)</span><br><span class="line"><span class="comment">#scoring指定损失函数类型，n_jobs指定全部cpu跑，cv指定交叉验证</span></span><br><span class="line">grid_result = grid_search.fit(X_train, Y_train) <span class="comment">#运行网格搜索</span></span><br><span class="line">print(<span class="string">"Best: %f using %s"</span> % (grid_result.best_score_,grid_search.best_params_))</span><br><span class="line"><span class="comment">#grid_scores_：给出不同参数情况下的评价结果。best_params_：描述了已取得最佳结果的参数的组合</span></span><br><span class="line"><span class="comment">#best_score_：成员提供优化过程期间观察到的最好的评分</span></span><br><span class="line"><span class="comment">#具有键作为列标题和值作为列的dict，可以导入到DataFrame中。</span></span><br><span class="line"><span class="comment">#注意，“params”键用于存储所有参数候选项的参数设置列表。</span></span><br><span class="line">means = grid_result.cv_results_[<span class="string">'mean_test_score'</span>]</span><br><span class="line">params = grid_result.cv_results_[<span class="string">'params'</span>]</span><br><span class="line"><span class="keyword">for</span> mean,param <span class="keyword">in</span> zip(means,params):</span><br><span class="line">    print(<span class="string">"%f  with:   %r"</span> % (mean,param))</span><br></pre></td></tr></table></figure><h1 id="忽略警告"><a href="#忽略警告" class="headerlink" title="忽略警告"></a>忽略警告</h1><p>每次都会出现一大堆的红字，看到就不舒服，以后将这个作为第一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br></pre></td></tr></table></figure><p>在PyCharm中提示shadows name ‘xxxx’ from outer scope，当你在外部有个相同名称的变量在方法内部被重新指定了新的值，也就是说你在外部的相同名称的变量压根就没有任何作用。所以PyCharm就回提示这个信息。这个时候就需要我们去调整具体代码了。</p><p>意思就是在pycharm中，函数中的变量最好跟外部的变量不一样，要不然就会警告</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://i0.hdslb.com/bfs/archive/f252847e6071d16bf5f9b423d759b2c8a0c6eb3d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.hdslb.com/bfs/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_文件存取操作</title>
    <link href="https://esyyes.github.io/2020/03/21/python/python-%E6%96%87%E4%BB%B6%E5%AD%98%E5%8F%96%E6%93%8D%E4%BD%9C/"/>
    <id>https://esyyes.github.io/2020/03/21/python/python-%E6%96%87%E4%BB%B6%E5%AD%98%E5%8F%96%E6%93%8D%E4%BD%9C/</id>
    <published>2020-03-21T06:50:12.000Z</published>
    <updated>2020-03-21T06:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-文件存取操作"><a href="#python-文件存取操作" class="headerlink" title="python_文件存取操作"></a>python_文件存取操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取第一个数据</span></span><br><span class="line">f = open(<span class="string">r'E:/test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    result.append(list(map(str, line.split(<span class="string">','</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表中的数据从第5列后开始删除</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">    <span class="keyword">del</span> result[i][<span class="number">4</span>:]</span><br></pre></td></tr></table></figure><p><strong>删除列表后面的几列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> result[i][<span class="number">4</span>:]</span><br></pre></td></tr></table></figure><p>[‘1729162717’, ‘2169702956’, ‘57181’, ‘59445’]</p><p><strong>删除引号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/3/21</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取txt文件</span></span><br><span class="line">f = open(<span class="string">r'E:/test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    result.append(list(map(str, line.split(<span class="string">','</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">    <span class="keyword">del</span> result[i][<span class="number">-2</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">data2 = result</span><br><span class="line"><span class="comment"># # 将str数据转换为整数</span></span><br><span class="line"><span class="comment"># data2 = []</span></span><br><span class="line"><span class="comment"># for j in range(len(result)):</span></span><br><span class="line"><span class="comment">#     list2 = []</span></span><br><span class="line"><span class="comment">#     for i in range(len(result[j])):</span></span><br><span class="line"><span class="comment">#         list2.append(int(result[j][i]))</span></span><br><span class="line"><span class="comment">#     data2.append(list2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取xlsx文件，是转换为datarafme</span></span><br><span class="line">df = pd.read_excel(<span class="string">'E:/tt.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(df.iloc[<span class="number">0</span>:])</span><br><span class="line"><span class="comment"># 0插补</span></span><br><span class="line">data = data.fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其转换为数组</span></span><br><span class="line">train_data = np.array(data)</span><br><span class="line"><span class="comment"># 将其转换为列表</span></span><br><span class="line">train_x_list = train_data.tolist() <span class="comment">#list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表叠加到后面去</span></span><br><span class="line">data1 = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(train_x_list)):</span><br><span class="line">    list1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_x_list[j])):</span><br><span class="line">        list1.append(int(train_x_list[j][i]))</span><br><span class="line">    data1.append(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量保存文件</span></span><br><span class="line">now = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">90</span>):</span><br><span class="line">    shu = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data1)):</span><br><span class="line">        <span class="comment"># 指定列进行添加数据</span></span><br><span class="line">        data2[i].insert(<span class="number">7</span>, int(data1[i][j]))</span><br><span class="line">        shu.append(data2[i])</span><br><span class="line">    now.append(shu)</span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    np.savetxt(<span class="string">"E:/3211/%s.txt"</span>%j, now[j], fmt=<span class="string">'%s'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> range(len(data2)):</span><br><span class="line">        <span class="keyword">del</span> data2[s][<span class="number">-2</span>:<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">"1"</span>)</span><br></pre></td></tr></table></figure><p>其实根本没必要删除引号，再进行保存文件时，就已经删除了引号</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190120/efdb6b16121348c2bd19e0d017d7563e.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-文件存取操作&quot;&gt;&lt;a href=&quot;#python-文件存取操作&quot; class=&quot;headerlink&quot; title=&quot;python_文件存取操作&quot;&gt;&lt;/a&gt;python_文件存取操作&lt;/h1&gt;&lt;figure class=&quot;highlight pyth
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_Matplotlib</title>
    <link href="https://esyyes.github.io/2020/03/19/python/python-Matplotlib/"/>
    <id>https://esyyes.github.io/2020/03/19/python/python-Matplotlib/</id>
    <published>2020-03-19T07:38:53.000Z</published>
    <updated>2020-03-19T07:38:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-Matplotlib"><a href="#python-Matplotlib" class="headerlink" title="python_Matplotlib"></a>python_Matplotlib</h1><p>参考这个即可</p><p><a href="https://www.jb51.net/article/168302.htm" target="_blank" rel="noopener">https://www.jb51.net/article/168302.htm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>横纵坐标的确定，以绘制特征选择曲线为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">25</span>)</span><br><span class="line">y为N123RW,DLRW,SRW</span><br></pre></td></tr></table></figure><p>绘制最简单的图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">25</span>)</span><br><span class="line">y1 = N123RW</span><br><span class="line">y2 = DLRW</span><br><span class="line">y3 = SRW</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y1) </span><br><span class="line">plt.xlabel(<span class="string">"Characteristic number"</span>) </span><br><span class="line">plt.ylabel(<span class="string">"Accuracy of RF"</span>)</span><br><span class="line">plt.title(<span class="string">"Feature elimination based on DBT and RFE"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Ctest1.png" alt="image-20200319162254065"></p><h2 id="对点进行标记"><a href="#对点进行标记" class="headerlink" title="对点进行标记"></a>对点进行标记</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y1,<span class="string">"*r"</span>)</span><br><span class="line"><span class="comment"># 只有点</span></span><br><span class="line">plt.plot(x,y1,<span class="string">"*r--"</span>)</span><br><span class="line"><span class="comment"># 带虚线的点</span></span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Ctest2.png" alt="image-20200319162723556"></p><table><thead><tr><th><code>&#39;-&#39;</code></th><th>实线样式</th></tr></thead><tbody><tr><td><code>&#39;--&#39;</code></td><td>短横线样式</td></tr><tr><td><code>&#39;-.&#39;</code></td><td>点划线样式</td></tr><tr><td><code>&#39;:&#39;</code></td><td>虚线样式</td></tr><tr><td><code>&#39;.&#39;</code></td><td>点标记</td></tr><tr><td><code>&#39;,&#39;</code></td><td>像素标记</td></tr><tr><td><code>&#39;o&#39;</code></td><td>圆标记</td></tr><tr><td><code>&#39;v&#39;</code></td><td>倒三角标记</td></tr><tr><td><code>&#39;^&#39;</code></td><td>正三角标记</td></tr><tr><td><code>&#39;&lt;&#39;</code></td><td>左三角标记</td></tr><tr><td><code>&#39;&gt;&#39;</code></td><td>右三角标记</td></tr><tr><td><code>&#39;1&#39;</code></td><td>下箭头标记</td></tr><tr><td><code>&#39;2&#39;</code></td><td>上箭头标记</td></tr><tr><td><code>&#39;3&#39;</code></td><td>左箭头标记</td></tr><tr><td><code>&#39;4&#39;</code></td><td>右箭头标记</td></tr><tr><td><code>&#39;s&#39;</code></td><td>正方形标记</td></tr><tr><td><code>&#39;p&#39;</code></td><td>五边形标记</td></tr><tr><td><code>&#39;*&#39;</code></td><td>星形标记</td></tr><tr><td><code>&#39;h&#39;</code></td><td>六边形标记 1</td></tr><tr><td><code>&#39;H&#39;</code></td><td>六边形标记 2</td></tr><tr><td><code>&#39;+&#39;</code></td><td>加号标记</td></tr><tr><td><code>&#39;x&#39;</code></td><td>X 标记</td></tr><tr><td><code>&#39;D&#39;</code></td><td>菱形标记</td></tr><tr><td><code>&#39;d&#39;</code></td><td>窄菱形标记</td></tr><tr><td>`’</td><td>‘`</td></tr><tr><td><code>&#39;_&#39;</code></td><td>水平线标记</td></tr></tbody></table><table><thead><tr><th align="left">字符</th><th align="left">颜色</th></tr></thead><tbody><tr><td align="left"><code>&#39;b&#39;</code></td><td align="left">蓝色</td></tr><tr><td align="left"><code>&#39;g&#39;</code></td><td align="left">绿色</td></tr><tr><td align="left"><code>&#39;r&#39;</code></td><td align="left">红色</td></tr><tr><td align="left"><code>&#39;c&#39;</code></td><td align="left">青色</td></tr><tr><td align="left"><code>&#39;m&#39;</code></td><td align="left">品红色</td></tr><tr><td align="left"><code>&#39;y&#39;</code></td><td align="left">黄色</td></tr><tr><td align="left"><code>&#39;k&#39;</code></td><td align="left">黑色</td></tr><tr><td align="left"><code>&#39;w&#39;</code></td><td align="left">白色</td></tr></tbody></table><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>图像不清晰，横坐标想用12345-25表示，字体太小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">属性                      值类型</span><br><span class="line">alpha                   浮点值</span><br><span class="line">animated                [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">antialiased <span class="keyword">or</span> aa       [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">clip_box                matplotlib.transform.Bbox 实例</span><br><span class="line">clip_on                 [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">clip_path               Path 实例， Transform，以及Patch实例</span><br><span class="line">color <span class="keyword">or</span> c              任何 matplotlib 颜色</span><br><span class="line">contains                命中测试函数</span><br><span class="line">dash_capstyle           [<span class="string">'butt'</span> / <span class="string">'round'</span> / <span class="string">'projecting'</span>]</span><br><span class="line">dash_joinstyle          [<span class="string">'miter'</span> / <span class="string">'round'</span> / <span class="string">'bevel'</span>]</span><br><span class="line">dashes                  以点为单位的连接/断开墨水序列</span><br><span class="line">data                    (np.array xdata, np.array ydata)</span><br><span class="line">figure                  matplotlib.figure.Figure 实例</span><br><span class="line">label                   任何字符串</span><br><span class="line">linestyle <span class="keyword">or</span> ls         [ <span class="string">'-'</span> / <span class="string">'--'</span> / <span class="string">'-.'</span> / <span class="string">':'</span> / <span class="string">'steps'</span> / ...]</span><br><span class="line">linewidth <span class="keyword">or</span> lw         以点为单位的浮点值</span><br><span class="line">lod                     [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">marker                  [ <span class="string">'+'</span> / <span class="string">','</span> / <span class="string">'.'</span> / <span class="string">'1'</span> / <span class="string">'2'</span> / <span class="string">'3'</span> / <span class="string">'4'</span> ]</span><br><span class="line">markeredgecolor <span class="keyword">or</span> mec  任何 matplotlib 颜色</span><br><span class="line">markeredgewidth <span class="keyword">or</span> mew  以点为单位的浮点值</span><br><span class="line">markerfacecolor <span class="keyword">or</span> mfc  任何 matplotlib 颜色</span><br><span class="line">markersize <span class="keyword">or</span> ms        浮点值</span><br><span class="line">markevery               [ <span class="literal">None</span> / 整数值 / (startind, stride) ]</span><br><span class="line">picker                  用于交互式线条选择</span><br><span class="line">pickradius              线条的拾取选择半径</span><br><span class="line">solid_capstyle          [<span class="string">'butt'</span> / <span class="string">'round'</span> / <span class="string">'projecting'</span>]</span><br><span class="line">solid_joinstyle         [<span class="string">'miter'</span> / <span class="string">'round'</span> / <span class="string">'bevel'</span>]</span><br><span class="line">transform               matplotlib.transforms.Transform 实例</span><br><span class="line">visible                 [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">xdata                   np.array</span><br><span class="line">ydata                   np.array</span><br><span class="line">zorder                  任何数值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示中文</span></span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'FangSong'</span>] <span class="comment"># 指定默认字体 </span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span> <span class="comment"># 解决保存图像是负号'-'显示为方块的问题</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>黑体</th><th>SimHei</th></tr></thead><tbody><tr><td>微软雅黑</td><td>Microsoft YaHei</td></tr><tr><td>微软正黑体</td><td>Microsoft JhengHei</td></tr><tr><td>新宋体</td><td>NSimSun</td></tr><tr><td>新细明体</td><td>PMingLiU</td></tr><tr><td>细明体</td><td>MingLiU</td></tr><tr><td>标楷体</td><td>DFKai-SB</td></tr><tr><td>仿宋</td><td>FangSong</td></tr><tr><td>楷体</td><td>KaiTi</td></tr><tr><td>仿宋_GB2312</td><td>FangSong_GB2312</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#颜色、标记和线型</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment">##linestyle设置线型，color设置颜色,marker设置设置连接点</span></span><br><span class="line">plt.plot(numpy.random.randn(<span class="number">30</span>).cumsum(),linestyle=<span class="string">'--'</span>,color=<span class="string">'g'</span>,marker=<span class="string">'o'</span>)</span><br></pre></td></tr></table></figure><p>参考这个</p><p><a href="https://www.jb51.net/article/168302.htm" target="_blank" rel="noopener">https://www.jb51.net/article/168302.htm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置标题、轴标签，刻度以及刻度标签</span></span><br><span class="line">fig = plt.figure()   <span class="comment">#创建figure对象</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)   <span class="comment">#获得Axes对象</span></span><br><span class="line">ax.plot(numpy.random.randn(<span class="number">1000</span>).cumsum()) <span class="comment">#生成随机数</span></span><br><span class="line">ax.set_xticks([<span class="number">0</span>,<span class="number">250</span>,<span class="number">500</span>,<span class="number">750</span>,<span class="number">1000</span>])   <span class="comment">#设置x轴刻度</span></span><br><span class="line">ax.set_yticks([<span class="number">-20</span>,<span class="number">-10</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>])    <span class="comment">#设置y轴刻度</span></span><br><span class="line">ax.set_title(<span class="string">'My first matplotlib plot'</span>)  <span class="comment">#设置标题</span></span><br><span class="line">ax.set_xlabel(<span class="string">'Xtages'</span>)   <span class="comment">#设置x轴标签</span></span><br><span class="line">ax.set_ylabel(<span class="string">'Ytages'</span>)   <span class="comment">#设置y轴标签</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.annotate(<span class="string">"Important value"</span>, (<span class="number">55</span>,<span class="number">20</span>), xycoords=<span class="string">'data'</span>,  <span class="comment">#添加注释的方法</span></span><br><span class="line">     xytext=(<span class="number">5</span>, <span class="number">38</span>),</span><br><span class="line">     arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调整图像的大小</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment">#解决中文显示问题</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 标记图的序号</span></span><br><span class="line"><span class="comment"># fig.suptitle('1') </span></span><br><span class="line"><span class="comment"># 改变横纵坐标</span></span><br><span class="line">plt.xticks(x)</span><br><span class="line"><span class="comment"># 绘制图像，r*--颜色，点的标记，线段模式，label标签的名字，linewidth线的宽度</span></span><br><span class="line">plt.plot(x,y1,<span class="string">"r*--"</span>, label=<span class="string">'N123RW'</span>,linewidth=<span class="number">0.25</span> )</span><br><span class="line">plt.plot(x,y2,<span class="string">"ks--"</span>, label=<span class="string">'DLRW'</span>,linewidth=<span class="number">0.25</span>)</span><br><span class="line">plt.plot(x,y3,<span class="string">"gp--"</span>, label=<span class="string">'SRW'</span>,linewidth=<span class="number">0.25</span>)</span><br><span class="line"><span class="comment"># 显示标签，默认为axis=0左上角</span></span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment"># fontsize字体大小</span></span><br><span class="line">plt.xlabel(<span class="string">"Characteristic number"</span>, fontsize = <span class="number">15</span>) </span><br><span class="line">plt.xticks(fontsize=<span class="number">10</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Accuracy of RF"</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">10</span>)</span><br><span class="line">plt.title(<span class="string">"Feature elimination based on DBT and RFE"</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br><span class="line">fig.savefig(<span class="string">'features.png'</span>,dpi = <span class="number">400</span>,bbox_inches=<span class="string">'tight'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-Matplotlib&quot;&gt;&lt;a href=&quot;#python-Matplotlib&quot; class=&quot;headerlink&quot; title=&quot;python_Matplotlib&quot;&gt;&lt;/a&gt;python_Matplotlib&lt;/h1&gt;&lt;p&gt;参考这个即可&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——OpenCV初接触</title>
    <link href="https://esyyes.github.io/2020/03/08/opencv/python%E2%80%94%E2%80%94OpenCV%E5%88%9D%E6%8E%A5%E8%A7%A6/"/>
    <id>https://esyyes.github.io/2020/03/08/opencv/python%E2%80%94%E2%80%94OpenCV%E5%88%9D%E6%8E%A5%E8%A7%A6/</id>
    <published>2020-03-08T13:43:17.000Z</published>
    <updated>2020-03-08T13:43:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV初接触"><a href="#OpenCV初接触" class="headerlink" title="OpenCV初接触"></a>OpenCV初接触</h1><p><img src="https://i04piccdn.sogoucdn.com/6c5b8086d2535f2b" alt=""></p><h2 id="github问题解决"><a href="#github问题解决" class="headerlink" title="github问题解决"></a>github问题解决</h2><p>github出问题了公共秘钥的问题,不能进行打开和下载，而且github也出现问题，各种不显示。</p><p>已经解决：</p><ol><li>对浏览器进行删除浏览记录，消除cookie;然后可以正常进行登录了。</li><li>问题2，登录慢；ping github.com请求超时的问题；<a href="https://www.cnblogs.com/findview/p/11720245.html" target="_blank" rel="noopener">https://www.cnblogs.com/findview/p/11720245.html</a></li></ol><h2 id="opencv-python下载"><a href="#opencv-python下载" class="headerlink" title="opencv-python下载"></a>opencv-python下载</h2><p>pip insatll opencv-python</p><p>pip install opencv-contrib-python</p><p>pip install ptesseract</p><p>首先进行安装，实在是慢，我先看下文献；希望别出错！！！</p><h3 id="opencv-python安装"><a href="#opencv-python安装" class="headerlink" title="opencv-python安装"></a>opencv-python安装</h3><p>python版本：3.7.5</p><p>1.进入清华镜像</p><p><a href="https://blog.csdn.net/qq_38327353/article/details/88847694?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_38327353/article/details/88847694?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><p>2.下载opencv-python对应的版本，whl文件</p><p>3.用pip install (whl)文件进行安装</p><p>4.以后下载安装还是直接找包或者镜像，要不然国外的太慢。</p><h3 id="opencv-python测试"><a href="#opencv-python测试" class="headerlink" title="opencv-python测试"></a>opencv-python测试</h3><p>import cv2</p><p>测试成功。</p><h2 id="opencv-python图片读取问题"><a href="#opencv-python图片读取问题" class="headerlink" title="opencv-python图片读取问题"></a>opencv-python图片读取问题</h2><h3 id="opencv读取的图片格式"><a href="#opencv读取的图片格式" class="headerlink" title="opencv读取的图片格式"></a>opencv读取的图片格式</h3><p>cv2读取的图片通道是按照<strong>BGR排列</strong>的，而非RGB顺序。因此工程中opencv库与其他库混用的时候要注意，可以使用img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</p><p>貌似图片都可以读取</p><p>利用jupyter读取图片，毕竟这个可以保存。</p><h3 id="opencv读取图片"><a href="#opencv读取图片" class="headerlink" title="opencv读取图片"></a>opencv读取图片</h3><p>图片的样子</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1583842369695&di=54d84190d5a56d8bab0e400f6b31c051&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201803%2F26%2F20180326184016_z4sS5.thumb.700_0.jpeg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">img = cv.imread(<span class="string">"C:/Users/86184/Desktop/111.jfif"</span>) </span><br><span class="line">cv.imshow(<span class="string">"miao"</span>,img)</span><br><span class="line">cv.waitKey() <span class="comment">#在imshow之后如果没有waitkey语句则不会正常显示图像</span></span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cmiao.png" alt="image-20200310173233338"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenCV初接触&quot;&gt;&lt;a href=&quot;#OpenCV初接触&quot; class=&quot;headerlink&quot; title=&quot;OpenCV初接触&quot;&gt;&lt;/a&gt;OpenCV初接触&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i04piccdn.sogoucdn.com/6
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2-28汇报</title>
    <link href="https://esyyes.github.io/2020/02/28/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/2-28%E6%B1%87%E6%8A%A5/"/>
    <id>https://esyyes.github.io/2020/02/28/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/2-28%E6%B1%87%E6%8A%A5/</id>
    <published>2020-02-28T02:31:53.000Z</published>
    <updated>2020-02-28T02:31:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-28汇报"><a href="#2-28汇报" class="headerlink" title="2-28汇报"></a>2-28汇报</h1><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200228105810153.png" alt="image-20200228105810153"></p><p>按照AASM分期标准，以30s为一个分期间隔，而心率变异性按照（Heart rate variability：Standards of measurement, physiological interpretation, and clinical use）标准是5分钟为一个分析阶段，大部分文献都是直接将5分钟来替换对应的30s分期标准来进行特征分析，打算将对应的分期标签和5min和30s都进行分析特征，进行对比效果。</p><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200228120936461.png" alt="image-20200228120936461"></p><p>为了消除异常值的影响，将每个RR值与以测试值为中心的21点矩形窗口内的平均值(MRR)进行比较。如果RR小于0.5<em>MRR或大于1.5</em>MRR，则替换为MRR<br>创新点：即可描述为19个，小于0.55，大于1.55，将其进行比较，如果小于0.55，则判定为过检，则叠加到前一个数据，相应的删除对应的R峰值点的坐标<br>如果大于1.55，则判定为漏检，则将RR/MRR=m,取整m,再将RR分为m份，相应的横坐标locs则叠加mRR。</p><p>根据这个（Sleep stages classification based on heart rate variability and random forest）</p><p>文献说法：</p><p>为了消除异常值的影响，将每个RR值与以测试值为中心的21点矩形窗口内的平均值(MRR)进行比较。如果RR小于0.5<em>MRR*</em>或大于*<em>1.5</em>MRR，则替换为MRR </p><p>  自己处理：即可描述为19个，小于0.55，大于1.55，将其进行比较，如果小于0.55，则判定为过检，则叠加到前一个数据，相应的删除对应的R峰值点的坐标 如果大于1.55，则判定为漏检，则将RR/MRR=m,取整m,再将RR分为m份，相应的横坐标locs则叠加mRR。 总结7806个数据点，用算法提取到的是7810个，消除了4个，可以忽略不计，时频域的特征提取效果差别不大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-28汇报&quot;&gt;&lt;a href=&quot;#2-28汇报&quot; class=&quot;headerlink&quot; title=&quot;2-28汇报&quot;&gt;&lt;/a&gt;2-28汇报&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTyp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E5%91%BC%E5%90%B8%E9%9F%B3%E7%89%B9%E5%BE%81/"/>
    <id>https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E5%91%BC%E5%90%B8%E9%9F%B3%E7%89%B9%E5%BE%81/</id>
    <published>2020-02-26T12:58:00.000Z</published>
    <updated>2020-02-26T12:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>找到呼吸音的特征。已经ECG信号滤波为呼吸信号，这两个的特征，还有R峰值的信号点的特征</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;找到呼吸音的特征。已经ECG信号滤波为呼吸信号，这两个的特征，还有R峰值的信号点的特征&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——特征选择和优化</title>
    <link href="https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E5%92%8C%E4%BC%98%E5%8C%96/</id>
    <published>2020-02-26T07:33:12.000Z</published>
    <updated>2020-02-26T07:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1582731772546&di=0c7cc25ef625f6aabb335f05dac1e11e&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2Fff8803bc2acd19b79bee2b2621ea5f408e963cf1.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1582731772546&amp;di=0c7cc25ef625f6aabb335f05dac1e11e&amp;imgtype=0
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_wfdb使用</title>
    <link href="https://esyyes.github.io/2020/02/15/python/python-wfdb%E4%BD%BF%E7%94%A8/"/>
    <id>https://esyyes.github.io/2020/02/15/python/python-wfdb%E4%BD%BF%E7%94%A8/</id>
    <published>2020-02-15T14:42:29.000Z</published>
    <updated>2020-02-15T14:42:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-wfdb使用"><a href="#python-wfdb使用" class="headerlink" title="python_wfdb使用"></a>python_wfdb使用</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-wfdb使用&quot;&gt;&lt;a href=&quot;#python-wfdb使用&quot; class=&quot;headerlink&quot; title=&quot;python_wfdb使用&quot;&gt;&lt;/a&gt;python_wfdb使用&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python模块的构建和调用</title>
    <link href="https://esyyes.github.io/2020/02/09/python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E8%B0%83%E7%94%A8/"/>
    <id>https://esyyes.github.io/2020/02/09/python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E8%B0%83%E7%94%A8/</id>
    <published>2020-02-09T08:55:02.000Z</published>
    <updated>2020-02-09T08:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python模块的构建和调用"><a href="#python模块的构建和调用" class="headerlink" title="python模块的构建和调用"></a>python模块的构建和调用</h1><p>代码运行出来太大了，看起来没那么好看，所以，需要进行处理，异常点还是要处理下，毕竟还可以得到一个时域特征。</p><p>异常点处理还是需要考虑到漏点这些情况，在这个里面就不需要了，但是在其他程序里面还是需要，因此找下相关的R峰值点查找的问题。</p><p>模块又要考虑两个问题，一个函数的构建，一个事模块的构建和调用。先看下别人的博客，关于时频域特征的提取问题前面不是看到个。</p><h2 id="1-heartpy库"><a href="#1-heartpy库" class="headerlink" title="1.heartpy库"></a>1.heartpy库</h2><p><a href="https://blog.csdn.net/weixin_45414380/article/details/100084696" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45414380/article/details/100084696</a></p><p>直接对其进行应用</p><p><a href="https://github.com/paulvangentcom/heartrate_analysis_python" target="_blank" rel="noopener">https://github.com/paulvangentcom/heartrate_analysis_python</a></p><p>查看heartpy库的说明。</p><p><a href="https://python-heart-rate-analysis-toolkit.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://python-heart-rate-analysis-toolkit.readthedocs.io/en/latest/</a></p><p>有点不想看了。明天再说。</p><p>安装起了，把包都升级下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python模块的构建和调用&quot;&gt;&lt;a href=&quot;#python模块的构建和调用&quot; class=&quot;headerlink&quot; title=&quot;python模块的构建和调用&quot;&gt;&lt;/a&gt;python模块的构建和调用&lt;/h1&gt;&lt;p&gt;代码运行出来太大了，看起来没那么好看，所以，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——滑动切片之数组</title>
    <link href="https://esyyes.github.io/2020/02/08/python/python%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <id>https://esyyes.github.io/2020/02/08/python/python%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87%E4%B9%8B%E6%95%B0%E7%BB%84/</id>
    <published>2020-02-08T05:45:57.000Z</published>
    <updated>2020-02-08T05:45:57.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray.ndim</td><td align="left">秩，即轴的数量或维度的数量</td></tr><tr><td align="left">ndarray.shape</td><td align="left">数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td align="left">ndarray.size</td><td align="left">数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td align="left">ndarray.dtype</td><td align="left">ndarray 对象的元素类型</td></tr><tr><td align="left">ndarray.itemsize</td><td align="left">ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td align="left">ndarray.flags</td><td align="left">ndarray 对象的内存信息</td></tr><tr><td align="left">ndarray.real</td><td align="left">ndarray元素的实部</td></tr><tr><td align="left">ndarray.imag</td><td align="left">ndarray 元素的虚部</td></tr><tr><td align="left">ndarray.data</td><td align="left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><p>数组的切片：</p><p>ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。</p><p>ndarray 数组可以基于 0 - n 的下标进行索引，切片对象可以通过内置的 slice 函数，并设置 start, stop 及 step 参数进行，从原数组中切割出一个新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为 2</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>数组的详细介绍</p><p><a href="https://www.runoob.com/numpy/numpy-ndexing-and-slicing.html" target="_blank" rel="noopener">https://www.runoob.com/numpy/numpy-ndexing-and-slicing.html</a></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cimage-20200208142758066.png" alt="image-20200208142758066"></p><p>还是需要用到循环结果</p><p>进行30s切片，并得到RR系列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">locs_30s = []</span><br><span class="line">RR = []</span><br><span class="line"><span class="keyword">while</span> locs[i] &lt; <span class="number">7500</span>:</span><br><span class="line">    locs_30s.append(locs[i])</span><br><span class="line">    RR.append(locs[i+<span class="number">1</span>] - locs[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">RR.pop()</span><br><span class="line">print(RR)</span><br><span class="line">[<span class="number">215</span>, <span class="number">223</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">221</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">213</span>, <span class="number">217</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">245</span>, <span class="number">242</span>, <span class="number">239</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">228</span>, <span class="number">226</span>]</span><br></pre></td></tr></table></figure><p>循环切片先不管RR系列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 考虑它的片段个数240</span></span><br><span class="line"><span class="comment"># 先考虑ECG片段的分段，分为240个30s的数据，毕竟这个为等距离的，列表里面放列表</span></span><br><span class="line"><span class="comment"># 建立一个空元组</span></span><br><span class="line">tuple1 = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (ECG_LEN / <span class="number">250</span> / <span class="number">30</span>) - <span class="number">1</span>:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    locs_30s = []</span><br><span class="line"><span class="comment">#     RR = []</span></span><br><span class="line">    <span class="keyword">while</span> locs[j] &lt; <span class="number">7500</span> * (i + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> locs[j] &gt;= <span class="number">7500</span> * i:</span><br><span class="line">            locs_30s.append(locs[j])</span><br><span class="line"><span class="comment">#             C = locs[j+1] - locs[j]</span></span><br><span class="line"><span class="comment">#             RR.append(C) </span></span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    print(locs_30s)</span><br><span class="line">    tuple1.append(locs_30s)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(i)</span><br><span class="line">print(tuple1)</span><br><span class="line">[<span class="number">19</span>, <span class="number">234</span>, <span class="number">457</span>, <span class="number">687</span>, <span class="number">911</span>, <span class="number">1137</span>, <span class="number">1360</span>, <span class="number">1581</span>, <span class="number">1808</span>, <span class="number">2029</span>, <span class="number">2244</span>, <span class="number">2460</span>, <span class="number">2673</span>, <span class="number">2890</span>, <span class="number">3117</span>, <span class="number">3354</span>, <span class="number">3599</span>, <span class="number">3841</span>, <span class="number">4080</span>, <span class="number">4327</span>, <span class="number">4576</span>, <span class="number">4822</span>, <span class="number">5061</span>, <span class="number">5292</span>, <span class="number">5526</span>, <span class="number">5761</span>, <span class="number">5998</span>, <span class="number">6234</span>, <span class="number">6460</span>, <span class="number">6682</span>, <span class="number">6906</span>, <span class="number">7134</span>, <span class="number">7360</span>]</span><br><span class="line">[<span class="number">7578</span>, <span class="number">7787</span>, <span class="number">7993</span>, <span class="number">8202</span>, <span class="number">8418</span>, <span class="number">8643</span>, <span class="number">8874</span>, <span class="number">9104</span>, <span class="number">9352</span>, <span class="number">9606</span>, <span class="number">9857</span>, <span class="number">10106</span>, <span class="number">10343</span>, <span class="number">10577</span>, <span class="number">10808</span>, <span class="number">11038</span>, <span class="number">11268</span>, <span class="number">11490</span>, <span class="number">11710</span>, <span class="number">11933</span>, <span class="number">12165</span>, <span class="number">12407</span>, <span class="number">12647</span>, <span class="number">12873</span>, <span class="number">13093</span>, <span class="number">13306</span>, <span class="number">13520</span>, <span class="number">13736</span>, <span class="number">13954</span>, <span class="number">14176</span>, <span class="number">14414</span>, <span class="number">14664</span>, <span class="number">14912</span>]</span><br><span class="line">[<span class="number">15159</span>, <span class="number">15400</span>, <span class="number">15634</span>, <span class="number">15875</span>, <span class="number">16114</span>, <span class="number">16352</span>, <span class="number">16583</span>, <span class="number">16809</span>, <span class="number">17038</span>, <span class="number">17266</span>, <span class="number">17497</span>, <span class="number">17728</span>, <span class="number">17946</span>, <span class="number">18159</span>, <span class="number">18368</span>, <span class="number">18575</span>, <span class="number">18787</span>, <span class="number">19007</span>, <span class="number">19230</span>, <span class="number">19455</span>, <span class="number">19691</span>, <span class="number">19934</span>, <span class="number">20178</span>, <span class="number">20416</span>, <span class="number">20654</span>, <span class="number">20898</span>, <span class="number">21143</span>, <span class="number">21387</span>, <span class="number">21619</span>, <span class="number">21845</span>, <span class="number">22071</span>, <span class="number">22301</span>]</span><br><span class="line">[<span class="number">22532</span>, <span class="number">22757</span>, <span class="number">22968</span>, <span class="number">23180</span>, <span class="number">23393</span>, <span class="number">23612</span>, <span class="number">23842</span>, <span class="number">24077</span>, <span class="number">24325</span>, <span class="number">24582</span>, <span class="number">24846</span>, <span class="number">25109</span>, <span class="number">25362</span>, <span class="number">25608</span>, <span class="number">25856</span>, <span class="number">26106</span>, <span class="number">26356</span>, <span class="number">26598</span>, <span class="number">26830</span>, <span class="number">27055</span>, <span class="number">27280</span>, <span class="number">27498</span>, <span class="number">27710</span>, <span class="number">27921</span>, <span class="number">28133</span>, <span class="number">28352</span>, <span class="number">28585</span>, <span class="number">28819</span>, <span class="number">29057</span>, <span class="number">29306</span>, <span class="number">29554</span>, <span class="number">29798</span>]</span><br><span class="line">[<span class="number">30054</span>, <span class="number">30314</span>, <span class="number">30573</span>, <span class="number">30824</span>, <span class="number">31070</span>, <span class="number">31313</span>, <span class="number">31555</span>, <span class="number">31793</span>, <span class="number">32029</span>, <span class="number">32258</span>, <span class="number">32490</span>, <span class="number">32727</span>, <span class="number">32961</span>, <span class="number">33195</span>, <span class="number">33425</span>, <span class="number">33652</span>, <span class="number">33880</span>, <span class="number">34110</span>, <span class="number">34337</span>, <span class="number">34562</span>, <span class="number">34782</span>, <span class="number">35007</span>, <span class="number">35236</span>, <span class="number">35473</span>, <span class="number">35710</span>, <span class="number">35943</span>, <span class="number">36174</span>, <span class="number">36409</span>, <span class="number">36653</span>, <span class="number">36899</span>, <span class="number">37138</span>, <span class="number">37369</span>]</span><br></pre></td></tr></table></figure><p>得到一个大的列表，里面包含很多个小的列表，</p><p><strong>while i &lt; (ECG_LEN / 250 / 30) - 1:</strong>在编写时，一定要考虑i的区间范围，要不然会超出范围，导致程序出错，虽然有结果，但是无法正常运行，在进行时通过计算-1可得到完整的数据，毕竟后面有个 <strong>while locs[j] &lt; 7500 * (i + 1):</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">list_RR = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (ECG_LEN / <span class="number">250</span> / <span class="number">30</span>) - <span class="number">1</span>:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    locs_30s = []</span><br><span class="line">    RR = []</span><br><span class="line">    <span class="keyword">while</span> locs[j] &lt; <span class="number">7500</span> * (i + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> locs[j] &gt;= <span class="number">7500</span> * i:</span><br><span class="line">            locs_30s.append(locs[j])</span><br><span class="line">            C = locs[j+<span class="number">1</span>] - locs[j]</span><br><span class="line">            RR.append(C) </span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    print(RR)</span><br><span class="line">    list_RR.append(RR)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(i)</span><br><span class="line">print(list_RR)</span><br><span class="line">[<span class="number">215</span>, <span class="number">223</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">221</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">213</span>, <span class="number">217</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">245</span>, <span class="number">242</span>, <span class="number">239</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">218</span>]</span><br><span class="line">[<span class="number">209</span>, <span class="number">206</span>, <span class="number">209</span>, <span class="number">216</span>, <span class="number">225</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">248</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">249</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">232</span>, <span class="number">242</span>, <span class="number">240</span>, <span class="number">226</span>, <span class="number">220</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">216</span>, <span class="number">218</span>, <span class="number">222</span>, <span class="number">238</span>, <span class="number">250</span>, <span class="number">248</span>, <span class="number">247</span>]</span><br><span class="line">[<span class="number">241</span>, <span class="number">234</span>, <span class="number">241</span>, <span class="number">239</span>, <span class="number">238</span>, <span class="number">231</span>, <span class="number">226</span>, <span class="number">229</span>, <span class="number">228</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">218</span>, <span class="number">213</span>, <span class="number">209</span>, <span class="number">207</span>, <span class="number">212</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">236</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">238</span>, <span class="number">238</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">244</span>, <span class="number">232</span>, <span class="number">226</span>, <span class="number">226</span>, <span class="number">230</span>, <span class="number">231</span>]</span><br><span class="line">[<span class="number">225</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">219</span>, <span class="number">230</span>, <span class="number">235</span>, <span class="number">248</span>, <span class="number">257</span>, <span class="number">264</span>, <span class="number">263</span>, <span class="number">253</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">242</span>, <span class="number">232</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">218</span>, <span class="number">212</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">219</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">238</span>, <span class="number">249</span>, <span class="number">248</span>, <span class="number">244</span>, <span class="number">256</span>]</span><br></pre></td></tr></table></figure><p>得到以5分钟为片段的30s滑窗的矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">list_RR = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (ECG_LEN / <span class="number">250</span> / <span class="number">30</span>) - <span class="number">11</span>:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    locs_300s = []</span><br><span class="line">    RR = []</span><br><span class="line">    <span class="keyword">while</span> locs[j] &lt; <span class="number">75000</span> + <span class="number">7500</span> * i:</span><br><span class="line">        <span class="keyword">if</span> locs[j] &gt;= <span class="number">7500</span> * i:</span><br><span class="line">            locs_30s.append(locs[j])</span><br><span class="line">            C = locs[j+<span class="number">1</span>] - locs[j]</span><br><span class="line">            RR.append(C) </span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    RR.pop() <span class="comment"># 删除列表的最后一个，毕竟将数据多加了一个1，进行了运算</span></span><br><span class="line">    print(RR)</span><br><span class="line">    list_RR.append(RR) <span class="comment"># 将每个运行的列表叠加在一个列表上，构成一个大的列表</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(list_RR)</span><br><span class="line">[<span class="number">215</span>, <span class="number">223</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">221</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">213</span>, <span class="number">217</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">245</span>, <span class="number">242</span>, <span class="number">239</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">218</span>, <span class="number">209</span>, <span class="number">206</span>, <span class="number">209</span>, <span class="number">216</span>, <span class="number">225</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">248</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">249</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">232</span>, <span class="number">242</span>, <span class="number">240</span>, <span class="number">226</span>, <span class="number">220</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">216</span>, <span class="number">218</span>, <span class="number">222</span>, <span class="number">238</span>, <span class="number">250</span>, <span class="number">248</span>, <span class="number">247</span>, <span class="number">241</span>, <span class="number">234</span>, <span class="number">241</span>, <span class="number">239</span>, <span class="number">238</span>, <span class="number">231</span>, <span class="number">226</span>, <span class="number">229</span>, <span class="number">228</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">218</span>, <span class="number">213</span>, <span class="number">209</span>, <span class="number">207</span>, <span class="number">212</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">236</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">238</span>, <span class="number">238</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">244</span>, <span class="number">232</span>, <span class="number">226</span>, <span class="number">226</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">225</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">219</span>, <span class="number">230</span>, <span class="number">235</span>, <span class="number">248</span>, <span class="number">257</span>, <span class="number">264</span>, <span class="number">263</span>, <span class="number">253</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">242</span>, <span class="number">232</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">218</span>, <span class="number">212</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">219</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">238</span>, <span class="number">249</span>, <span class="number">248</span>, <span class="number">244</span>, <span class="number">256</span>, <span class="number">260</span>, <span class="number">259</span>, <span class="number">251</span>, <span class="number">246</span>, <span class="number">243</span>, <span class="number">242</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">229</span>, <span class="number">232</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">234</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">225</span>, <span class="number">220</span>, <span class="number">225</span>, <span class="number">229</span>, <span class="number">237</span>, <span class="number">237</span>, <span class="number">233</span>, <span class="number">231</span>, <span class="number">235</span>, <span class="number">244</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">229</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">226</span>, <span class="number">224</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">212</span>, <span class="number">216</span>, <span class="number">223</span>, <span class="number">232</span>, <span class="number">236</span>, <span class="number">238</span>, <span class="number">232</span>, <span class="number">240</span>, <span class="number">244</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">232</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">226</span>, <span class="number">235</span>, <span class="number">238</span>, <span class="number">238</span>, <span class="number">233</span>, <span class="number">227</span>, <span class="number">223</span>, <span class="number">214</span>, <span class="number">207</span>, <span class="number">202</span>, <span class="number">204</span>, <span class="number">210</span>, <span class="number">227</span>, <span class="number">245</span>, <span class="number">258</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">255</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">237</span>, <span class="number">227</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">227</span>, <span class="number">230</span>, <span class="number">229</span>, <span class="number">232</span>, <span class="number">237</span>, <span class="number">239</span>, <span class="number">237</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">228</span>, <span class="number">230</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">234</span>, <span class="number">244</span>, <span class="number">250</span>, <span class="number">247</span>, <span class="number">242</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">247</span>, <span class="number">242</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">228</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">229</span>, <span class="number">217</span>, <span class="number">207</span>, <span class="number">207</span>, <span class="number">207</span>, <span class="number">213</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">234</span>, <span class="number">238</span>, <span class="number">237</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">234</span>, <span class="number">232</span>, <span class="number">225</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">228</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">224</span>, <span class="number">217</span>, <span class="number">225</span>, <span class="number">231</span>, <span class="number">240</span>, <span class="number">246</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">247</span>, <span class="number">254</span>, <span class="number">249</span>, <span class="number">234</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">242</span>, <span class="number">241</span>, <span class="number">234</span>, <span class="number">227</span>, <span class="number">223</span>, <span class="number">214</span>, <span class="number">209</span>, <span class="number">208</span>, <span class="number">207</span>, <span class="number">210</span>, <span class="number">219</span>, <span class="number">227</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">231</span>, <span class="number">238</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">231</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">214</span>, <span class="number">207</span>, <span class="number">206</span>, <span class="number">212</span>, <span class="number">220</span>, <span class="number">230</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">236</span>, <span class="number">243</span>, <span class="number">246</span>, <span class="number">244</span>]</span><br></pre></td></tr></table></figure><p>两种情况都得到结果</p><p>下一步：得到RR序列，首先查看，那个库，然后进行时频域分析，我觉得还是要消除异常点，毕竟为了后面做准备，还可以将其作为一个时域特征。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1581244543642&di=eadb0d6f73d023fd1ad1f4944147a6be&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3Df77af06f942397ddd679980c6983b216%2F70e2ae2f070828388d72159cbd99a9014d08f15d.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;属性&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;ndarray.ndim&lt;/td&gt;
&lt;td ali
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python__滑动切片</title>
    <link href="https://esyyes.github.io/2020/02/08/python/python-%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87/"/>
    <id>https://esyyes.github.io/2020/02/08/python/python-%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87/</id>
    <published>2020-02-08T02:33:27.000Z</published>
    <updated>2020-02-08T02:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PYTHON——滑动切片"><a href="#PYTHON——滑动切片" class="headerlink" title="PYTHON——滑动切片"></a>PYTHON——滑动切片</h1><p>需求：1.所需要的数据是以5分钟为短程分析</p><p>2.注释是以30秒为一个间期</p><p>3.以5分钟为片段，30秒为滑动窗口，考虑样本采样率为250，滑动的间隔为250*30=7500个数据点</p><p>4.直接用采样峰值点来进行切片，最后放入一个（）中，每个间隔为小矩阵</p><p>若为了好写的话，可以直接在python里面找pt算法，在找异常点，在循环，按照matlab的步骤</p><p>后面分析的还是这个公开数据库的数据，所以我可以直接按照峰值点来进行计算。</p><p>数据样本直接按照读取的峰值点进行提取即可。</p><h2 id="1-选取5分钟作为切片"><a href="#1-选取5分钟作为切片" class="headerlink" title="1.选取5分钟作为切片"></a>1.选取5分钟作为切片</h2><p>首先判定里面数据的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(type(locs))</span><br><span class="line">print(type(ECG))</span><br><span class="line">[[<span class="number">0.085</span>]</span><br><span class="line"> [<span class="number">0.08</span> ]</span><br><span class="line"> [<span class="number">0.125</span>]</span><br><span class="line"> ...</span><br><span class="line"> [<span class="number">0.23</span> ]</span><br><span class="line"> [<span class="number">0.235</span>]</span><br><span class="line"> [<span class="number">0.225</span>]]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-数据系列复习下"><a href="#1-1-数据系列复习下" class="headerlink" title="1.1 数据系列复习下"></a>1.1 数据系列复习下</h3><h4 id="1-1-1字符串"><a href="#1-1-1字符串" class="headerlink" title="1.1.1字符串"></a>1.1.1字符串</h4><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。name1 = ‘Tom’</p><p>控制台显示结果为<code>&lt;class &#39;str&#39;&gt;</code>， 即数据类型为str(字符串)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">'请输入您的名字：'</span>)</span><br><span class="line">print(<span class="string">f'您输入的名字是<span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line">print(type(name))</span><br><span class="line"></span><br><span class="line">password = input(<span class="string">'请输入您的密码：'</span>)</span><br><span class="line">print(<span class="string">f'您输入的密码是<span class="subst">&#123;password&#125;</span>'</span>)</span><br><span class="line">print(type(password))</span><br></pre></td></tr></table></figure><h4 id="1-1-2-下标"><a href="#1-1-2-下标" class="headerlink" title="1.1.2 下标"></a>1.1.2 下标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abcdef"</span></span><br><span class="line">取到不同下标对应的数据</span><br><span class="line">print(name[<span class="number">1</span>])</span><br><span class="line">print(name[<span class="number">0</span>])</span><br><span class="line">print(name[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h4 id="1-1-3-切片"><a href="#1-1-3-切片" class="headerlink" title="1.1.3 切片"></a>1.1.3 切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><pre><code>1. 不包含结束位置下标对应的数据， 正负整数均可；   2. 步长是选取间隔，正负整数均可，默认步长为1。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abcdefg"</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line">print(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line">print(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line">print(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line">print(name[:<span class="number">-1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line">print(name[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># def</span></span><br><span class="line">print(name[::<span class="number">-1</span>])  <span class="comment"># gfedcba</span></span><br></pre></td></tr></table></figure><h4 id="1-1-4查找"><a href="#1-1-4查找" class="headerlink" title="1.1.4查找"></a>1.1.4查找</h4><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line">print(mystr.find(<span class="string">'ands'</span>))  <span class="comment"># -1</span></span><br></pre></td></tr></table></figure><p>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</p><p>count()：返回某个子串在字符串中出现的次数</p><ul><li>下标<ul><li>计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li>切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列名[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>find()</li><li>index()</li></ul></li></ul><h3 id="1-1-2列表"><a href="#1-1-2列表" class="headerlink" title="1.1.2列表"></a>1.1.2列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L.append(var)          <span class="comment">#追加元素</span></span><br><span class="line">L.insert(index,var)</span><br><span class="line">L.pop(var)               <span class="comment">#返回最后一个元素，并从list中删除之</span></span><br><span class="line">L.remove(var)            <span class="comment">#删除第一次出现的该元素</span></span><br><span class="line">L.count(var)             <span class="comment">#该元素在列表中出现的个数</span></span><br><span class="line">L.index(var)             <span class="comment">#该元素的位置,无则抛异常</span></span><br><span class="line">L.extend(list6)         <span class="comment">#追加list６，即合并list到L上,这里注意，使用extend函数可以一次在一个列表中插入任意多个值，而不必须每次只使用append()一次一值的插入</span></span><br><span class="line">L.sort()        <span class="comment">#排序</span></span><br><span class="line">L.reverse()     <span class="comment">#倒序</span></span><br><span class="line"><span class="keyword">del</span> L[<span class="number">1</span>]        <span class="comment">#删除指定下标的元素</span></span><br><span class="line"><span class="keyword">del</span> L[<span class="number">1</span>:<span class="number">3</span>]      <span class="comment">#删除指定下标范围的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制list:</span></span><br><span class="line">L1 = L      <span class="comment">#L1为L的别名，用C来说就是指针地址相同，对L1操作即对L操作。</span></span><br><span class="line">L1 = L[:]   <span class="comment">#L1为L的克隆，即另一个拷贝。</span></span><br><span class="line">https://blog.csdn.net/liuyanfeier/article/details/<span class="number">53731239</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>, 数据<span class="number">4.</span>.....]</span><br></pre></td></tr></table></figure><p>列表可以一次性存储多个数据，且可以为不同数据类型。</p><h3 id="1-1-2-1-下标"><a href="#1-1-2-1-下标" class="headerlink" title="1.1.2.1 下标"></a>1.1.2.1 下标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list[<span class="number">0</span>])  <span class="comment"># Tom</span></span><br><span class="line">print(name_list[<span class="number">1</span>])  <span class="comment"># Lily</span></span><br><span class="line">print(name_list[<span class="number">2</span>])  <span class="comment"># Rose</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-2-函数"><a href="#1-1-2-2-函数" class="headerlink" title="1.1.2.2 函数"></a>1.1.2.2 函数</h3><ul><li>index()：返回指定数据所在位置的下标 。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.index(数据, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list.index(<span class="string">'Lily'</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul><li>count()：统计指定数据在当前列表中出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list.count(<span class="string">'Lily'</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><ul><li>len()：访问列表长度，即列表中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(len(name_list))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="1-1-2-3-增加"><a href="#1-1-2-3-增加" class="headerlink" title="1.1.2.3 增加"></a>1.1.2.3 增加</h2><p>作用：增加指定数据到列表中。</p><ul><li>append()：列表结尾追加数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.append(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li>体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.append(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><p><img src="H:/%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90/%E8%B5%84%E6%96%99%E4%B8%8E%E4%BB%A3%E7%A0%81/01-Python%E5%9F%BA%E7%A1%80%E8%AF%BE%E4%BB%B6/04-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/02-%E5%88%97%E8%A1%A8.assets/image-20190130160154636.png" alt="image-20190130160154636"></p><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><ol start="3"><li>注意点</li></ol><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.append([<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', ['xiaoming', 'xiaohong']]</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.extend(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 单个数据</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'x', 'i', 'a', 'o', 'm', 'i', 'n', 'g']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><p>​    2.2 序列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend([<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming', 'xiaohong']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>insert()：指定位置新增数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.insert(位置下标, 数据)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'xiaoming', 'Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><h2 id="1-1-2-4-删除"><a href="#1-1-2-4-删除" class="headerlink" title="1.1.2.4 删除"></a>1.1.2.4 删除</h2><ul><li>del</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 目标</span><br></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 删除列表</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：报错提示：name 'name_list' is not defined</span></span><br><span class="line"><span class="keyword">del</span> name_list</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><p>​    2.2 删除指定数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.pop(下标)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">del_name = name_list.pop(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：Lily</span></span><br><span class="line">print(del_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>remove()：移除列表中某个数据的第一个匹配项。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.remove(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.remove(<span class="string">'Rose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>clear()：清空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.clear()</span><br><span class="line">print(name_list) <span class="comment"># 结果： []</span></span><br></pre></td></tr></table></figure><h2 id="1-1-2-5-修改"><a href="#1-1-2-5-修改" class="headerlink" title="1.1.2.5 修改"></a>1.1.2.5 修改</h2><ul><li>修改指定下标数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list[<span class="number">0</span>] = <span class="string">'aaa'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['aaa', 'Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>逆置：reverse()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[8, 6, 3, 2, 5, 1]</span></span><br><span class="line">print(num_list)</span><br></pre></td></tr></table></figure><h1 id="1-1-2-6-列表的循环遍历"><a href="#1-1-2-6-列表的循环遍历" class="headerlink" title="1.1.2.6 列表的循环遍历"></a>1.1.2.6 列表的循环遍历</h1><p>需求：依次打印列表中的各个数据。</p><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(name_list):</span><br><span class="line">    print(name_list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="H:/%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90/%E8%B5%84%E6%96%99%E4%B8%8E%E4%BB%A3%E7%A0%81/01-Python%E5%9F%BA%E7%A1%80%E8%AF%BE%E4%BB%B6/04-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/02-%E5%88%97%E8%A1%A8.assets/image-20190130164205143.png" alt="image-20190130164205143"></p><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="H:/%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90/%E8%B5%84%E6%96%99%E4%B8%8E%E4%BB%A3%E7%A0%81/01-Python%E5%9F%BA%E7%A1%80%E8%AF%BE%E4%BB%B6/04-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/02-%E5%88%97%E8%A1%A8.assets/image-20190130164227739.png" alt="image-20190130164227739"></p><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [[<span class="string">'小明'</span>, <span class="string">'小红'</span>, <span class="string">'小绿'</span>], [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>], [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>]]</span><br></pre></td></tr></table></figure><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步：按下标查找到李四所在的列表</span></span><br><span class="line">print(name_list[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span></span><br><span class="line">print(name_list[<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>列表的格式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>index()</li><li>len()</li><li>append()</li><li>pop()</li><li>remove()</li></ul></li><li>列表嵌套</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name_list = [[<span class="string">'小明'</span>, <span class="string">'小红'</span>, <span class="string">'小绿'</span>], [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>], [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>]]</span><br><span class="line">name_list[<span class="number">2</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>总结反应过来了这是一个数组，我需要将他切片放进列表中，太久没学习了脑壳疼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PYTHON——滑动切片&quot;&gt;&lt;a href=&quot;#PYTHON——滑动切片&quot; class=&quot;headerlink&quot; title=&quot;PYTHON——滑动切片&quot;&gt;&lt;/a&gt;PYTHON——滑动切片&lt;/h1&gt;&lt;p&gt;需求：1.所需要的数据是以5分钟为短程分析&lt;/p&gt;
&lt;p&gt;2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python__获取MIT数据</title>
    <link href="https://esyyes.github.io/2020/02/07/python/python-%E8%8E%B7%E5%8F%96MIT%E6%95%B0%E6%8D%AE/"/>
    <id>https://esyyes.github.io/2020/02/07/python/python-%E8%8E%B7%E5%8F%96MIT%E6%95%B0%E6%8D%AE/</id>
    <published>2020-02-07T06:06:46.000Z</published>
    <updated>2020-02-07T06:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-获取MIT数据"><a href="#python-获取MIT数据" class="headerlink" title="python__获取MIT数据"></a>python__获取MIT数据</h1><p>1.数据库所在位置：F:\MITDAT</p><p>2.数据保存格式：st,dat,ecg,hea</p><p>3.利用pycharm读取dat数据，并且存为可读格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载对应的数据库数据，保存位置：F:\MITDAT</span></span><br><span class="line"><span class="comment"># 读取对应数据库的dat数据</span></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">读取心电信号文件</span></span><br><span class="line"><span class="string">sampfrom: 设置读取心电信号的 起始位置，sampfrom=0表示从0开始读取，默认从0开始</span></span><br><span class="line"><span class="string">sampto：设置读取心电信号的 结束位置，sampto = 1500表示从1500出结束，默认读到文件末尾</span></span><br><span class="line"><span class="string">channel_names：设置设置读取心电信号名字，必须是列表，channel_names=['MLII']表示读取MLII导联线</span></span><br><span class="line"><span class="string">channels：设置读取第几个心电信号，必须是列表，channels=[0, 3]表示读取第0和第3个信号，注意信号数不确定</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampfrom=0, sampto = 1500)</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampfrom=0, sampto = 1500)</span></span><br><span class="line"><span class="comment"># 仅仅读取“ECG”信号</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampto=1500, channel_names=['ECG'])</span></span><br><span class="line"><span class="comment"># 仅仅读取第0个信号（ECG）</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampfrom=0, channels=[0])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取slp01a的数据，sampfrom：起始位置，sampto：结束位置，即可写做</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/MITDAT/slp01a'</span>)</span><br><span class="line"><span class="comment"># 查看record类型</span></span><br><span class="line">print(type(record))</span><br><span class="line"><span class="comment"># 查看类中的方法和属性</span></span><br><span class="line"><span class="comment"># print(dir(record))</span></span><br><span class="line"><span class="comment"># 获得心电导联线信号，本文获得是4通道的信号</span></span><br><span class="line">print(record.p_signal)</span><br><span class="line"><span class="comment"># 输出4通道的信号</span></span><br><span class="line">print(np.shape(record.p_signal))</span><br><span class="line"><span class="comment"># 查看导联线信号长度</span></span><br><span class="line">print(record.sig_len)</span><br><span class="line"><span class="comment"># 查看文件名</span></span><br><span class="line">print(record.record_name)</span><br><span class="line"><span class="comment"># 查看导联线条数，本文为导联线条数4</span></span><br><span class="line">print(record.n_sig)</span><br><span class="line"><span class="comment"># 查看信号名称（列表），本文导联线名称['ECG', 'BP', 'EEG (C4-A1)', 'Resp (sum)']</span></span><br><span class="line">print(record.sig_name)</span><br><span class="line"><span class="comment"># 查看采用率</span></span><br><span class="line">print(record.fs)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207151930604.png" alt=""></p><p>暂时只需要ECG信号，即第一个客户端的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只获取ECG对应的信号</span></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/MITDAT/slp01a'</span>, channels=[<span class="number">0</span>])</span><br><span class="line">print(record.p_signal)</span><br><span class="line"><span class="comment"># 输出4通道的信号</span></span><br><span class="line">print(np.shape(record.p_signal))</span><br><span class="line"><span class="comment"># 查看导联线信号长度</span></span><br><span class="line">print(record.sig_len)</span><br><span class="line"><span class="comment"># 查看文件名</span></span><br><span class="line">print(record.record_name)</span><br><span class="line"><span class="comment"># 查看导联线条数，本文为导联线条数4</span></span><br><span class="line">print(record.n_sig)</span><br><span class="line"><span class="comment"># 查看信号名称（列表），本文导联线名称['ECG', 'BP', 'EEG (C4-A1)', 'Resp (sum)']</span></span><br><span class="line">print(record.sig_name)</span><br><span class="line"><span class="comment"># 查看采用率</span></span><br><span class="line">print(record.fs)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207152059811.png" alt=""></p><p>即所需的数据为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/MITDAT/slp01a'</span>, channels=[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 输出ECG通道的信号</span></span><br><span class="line">ECG  = record.p_signal</span><br><span class="line">print(ECG)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207152555100.png" alt=""></p><p>读取R峰值点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="comment"># 读取心电数据库的R峰值点</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/MITDAT/slp01a'</span>, <span class="string">'ecg'</span>)</span><br><span class="line"><span class="comment"># 标注每一个心拍的R波的尖锋位置，与心电信号对应</span></span><br><span class="line">print(annotation.sample)</span><br><span class="line"><span class="comment">#symbol对应标签,sample为R峰所在位置，sig为R峰值</span></span><br><span class="line"><span class="comment"># print(annotation.symbol)</span></span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207154706625.png" alt=""></p><p>提取注释信息！可以暂时不用管理，到时重新导出注释信号。</p><p>下一步。利用PT算法，读取峰值点，在python里面读取</p><p>不过已经直接读取出R峰值点，暂时可不考虑。pt算法。</p><p>切片循环和导出峰值，提取时域。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-获取MIT数据&quot;&gt;&lt;a href=&quot;#python-获取MIT数据&quot; class=&quot;headerlink&quot; title=&quot;python__获取MIT数据&quot;&gt;&lt;/a&gt;python__获取MIT数据&lt;/h1&gt;&lt;p&gt;1.数据库所在位置：F:\MITDAT&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matlab中的滑动窗口</title>
    <link href="https://esyyes.github.io/2020/01/07/matlab/matlab%E4%B8%AD%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>https://esyyes.github.io/2020/01/07/matlab/matlab%E4%B8%AD%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2020-01-07T02:47:29.000Z</published>
    <updated>2020-01-07T02:47:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进行滑动加窗"><a href="#进行滑动加窗" class="headerlink" title="进行滑动加窗"></a>进行滑动加窗</h1><p>Kubios HRV分析的信号在加载时会漏掉后续20秒的数据，想要完整的5分钟数据，因此输出的信号即为6分钟，保持连贯性，即选取6分钟的窗口，以5分钟为步长进行移动分析。</p><p>sliding Windows</p><p>滑动窗口：<strong>滑动窗口由固定的窗口长度和滑动间隔组成</strong>。</p><p><strong>特点</strong>：<strong>窗口长度固定，有重叠</strong>。</p><p><img src="https://img2018.cnblogs.com/blog/1247221/201905/1247221-20190513011529750-1763616187.png" alt="sliding windows"></p><p><img src="https://img-blog.csdnimg.cn/20190305164439172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtMjc4ODU4NDQ1,size_16,color_FFFFFF,t_70" alt="滑窗"></p><p>滑动窗口大小：5分钟即：75000</p><p>总结：笨。。。</p><h1 id="批量保存txt文件"><a href="#批量保存txt文件" class="headerlink" title="批量保存txt文件"></a>批量保存txt文件</h1><p>1.放在一个矩阵中，会出现维度不同的报错问题</p><p>2.综合考虑放在一个cell元包数组中，或者结构体中</p><p>3.在考虑批量保存</p><h3 id="元胞数组："><a href="#元胞数组：" class="headerlink" title="元胞数组："></a>元胞数组：</h3><p>特点：</p><p>1.可以存储大小不同的矩阵序列</p><p>2.检索内容时，使用大括号下标进行索引，A{1}</p><p>3.包含其他数组的<em>副本<em>，而不包含指向这些数组的</em>指针，即修改原值，元胞里的内容不变</em></p><h3 id="结构体："><a href="#结构体：" class="headerlink" title="结构体："></a>结构体：</h3><p>结构体是多维 MATLAB 数组，包含可按文本字段标志符访问的元素。</p><p>cell（1，1）是查看大小和样式</p><p>cell{1 . 1}是读取全部的数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt;= m</span><br><span class="line">    [QRS_pks, QRS_locs, delay] = pan_tompkin(ECG(<span class="built_in">i</span>, :), fs, <span class="number">0</span>);</span><br><span class="line">    [RR] = HRV(QRS_locs);<span class="comment">% 得到HRV信号</span></span><br><span class="line">    [QRS_locs, RR] = Eliminate_outliers(QRS_locs, RR);<span class="comment">% 消除HRV中的RR异常值</span></span><br><span class="line">    cell_RR(<span class="built_in">i</span>, <span class="number">1</span>) = &#123;RR&#125;;</span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="number">332</span>x1 double</span><br><span class="line"><span class="number">341</span>x1 double</span><br><span class="line"><span class="number">331</span>x1 double</span><br><span class="line"><span class="number">321</span>x1 double</span><br><span class="line"><span class="number">315</span>x1 double</span><br><span class="line"><span class="number">315</span>x1 double</span><br><span class="line"><span class="number">301</span>x1 double</span><br><span class="line"><span class="number">306</span>x1 double</span><br><span class="line"><span class="number">303</span>x1 double</span><br><span class="line"><span class="number">305</span>x1 double</span><br><span class="line"><span class="number">305</span>x1 double</span><br><span class="line"><span class="number">320</span>x1 double</span><br><span class="line"><span class="number">322</span>x1 double</span><br></pre></td></tr></table></figure><p>两个分析的软件都只能读取txt文件。因此需要进行批量保存为txt文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进行滑动加窗&quot;&gt;&lt;a href=&quot;#进行滑动加窗&quot; class=&quot;headerlink&quot; title=&quot;进行滑动加窗&quot;&gt;&lt;/a&gt;进行滑动加窗&lt;/h1&gt;&lt;p&gt;Kubios HRV分析的信号在加载时会漏掉后续20秒的数据，想要完整的5分钟数据，因此输出的信号即为6分钟
      
    
    </summary>
    
    
      <category term="matlab" scheme="https://esyyes.github.io/categories/matlab/"/>
    
    
  </entry>
  
</feed>
