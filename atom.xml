<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESY</title>
  
  <subtitle>mengxin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://esyyes.github.io/"/>
  <updated>2020-03-08T06:52:38.000Z</updated>
  <id>https://esyyes.github.io/</id>
  
  <author>
    <name>esy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ECG分期：文献阅读之路一</title>
    <link href="https://esyyes.github.io/2020/03/08/ECG%E5%88%86%E6%9C%9F%EF%BC%9A%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E4%B9%8B%E8%B7%AF%E4%B8%80/"/>
    <id>https://esyyes.github.io/2020/03/08/ECG%E5%88%86%E6%9C%9F%EF%BC%9A%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E4%B9%8B%E8%B7%AF%E4%B8%80/</id>
    <published>2020-03-08T06:52:38.000Z</published>
    <updated>2020-03-08T06:52:38.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2-28汇报</title>
    <link href="https://esyyes.github.io/2020/02/28/2-28%E6%B1%87%E6%8A%A5/"/>
    <id>https://esyyes.github.io/2020/02/28/2-28%E6%B1%87%E6%8A%A5/</id>
    <published>2020-02-28T02:31:53.000Z</published>
    <updated>2020-02-28T02:31:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-28汇报"><a href="#2-28汇报" class="headerlink" title="2-28汇报"></a>2-28汇报</h1><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200228105810153.png" alt="image-20200228105810153"></p><p>按照AASM分期标准，以30s为一个分期间隔，而心率变异性按照（Heart rate variability：Standards of measurement, physiological interpretation, and clinical use）标准是5分钟为一个分析阶段，大部分文献都是直接将5分钟来替换对应的30s分期标准来进行特征分析，打算将对应的分期标签和5min和30s都进行分析特征，进行对比效果。</p><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200228120936461.png" alt="image-20200228120936461"></p><p>为了消除异常值的影响，将每个RR值与以测试值为中心的21点矩形窗口内的平均值(MRR)进行比较。如果RR小于0.5<em>MRR或大于1.5</em>MRR，则替换为MRR<br>创新点：即可描述为19个，小于0.55，大于1.55，将其进行比较，如果小于0.55，则判定为过检，则叠加到前一个数据，相应的删除对应的R峰值点的坐标<br>如果大于1.55，则判定为漏检，则将RR/MRR=m,取整m,再将RR分为m份，相应的横坐标locs则叠加mRR。</p><p>根据这个（Sleep stages classification based on heart rate variability and random forest）</p><p>文献说法：</p><p>为了消除异常值的影响，将每个RR值与以测试值为中心的21点矩形窗口内的平均值(MRR)进行比较。如果RR小于0.5<em>MRR*</em>或大于*<em>1.5</em>MRR，则替换为MRR </p><p>  自己处理：即可描述为19个，小于0.55，大于1.55，将其进行比较，如果小于0.55，则判定为过检，则叠加到前一个数据，相应的删除对应的R峰值点的坐标 如果大于1.55，则判定为漏检，则将RR/MRR=m,取整m,再将RR分为m份，相应的横坐标locs则叠加mRR。 总结7806个数据点，用算法提取到的是7810个，消除了4个，可以忽略不计，时频域的特征提取效果差别不大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-28汇报&quot;&gt;&lt;a href=&quot;#2-28汇报&quot; class=&quot;headerlink&quot; title=&quot;2-28汇报&quot;&gt;&lt;/a&gt;2-28汇报&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTyp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E5%91%BC%E5%90%B8%E9%9F%B3%E7%89%B9%E5%BE%81/"/>
    <id>https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E5%91%BC%E5%90%B8%E9%9F%B3%E7%89%B9%E5%BE%81/</id>
    <published>2020-02-26T12:58:00.000Z</published>
    <updated>2020-02-26T12:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>找到呼吸音的特征。已经ECG信号滤波为呼吸信号，这两个的特征，还有R峰值的信号点的特征</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;找到呼吸音的特征。已经ECG信号滤波为呼吸信号，这两个的特征，还有R峰值的信号点的特征&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——特征选择和优化</title>
    <link href="https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>https://esyyes.github.io/2020/02/26/python/python%E2%80%94%E2%80%94%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E5%92%8C%E4%BC%98%E5%8C%96/</id>
    <published>2020-02-26T07:33:12.000Z</published>
    <updated>2020-02-26T07:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1582731772546&di=0c7cc25ef625f6aabb335f05dac1e11e&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2Fff8803bc2acd19b79bee2b2621ea5f408e963cf1.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1582731772546&amp;di=0c7cc25ef625f6aabb335f05dac1e11e&amp;imgtype=0
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_wfdb使用</title>
    <link href="https://esyyes.github.io/2020/02/15/python/python-wfdb%E4%BD%BF%E7%94%A8/"/>
    <id>https://esyyes.github.io/2020/02/15/python/python-wfdb%E4%BD%BF%E7%94%A8/</id>
    <published>2020-02-15T14:42:29.000Z</published>
    <updated>2020-02-15T14:42:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-wfdb使用"><a href="#python-wfdb使用" class="headerlink" title="python_wfdb使用"></a>python_wfdb使用</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-wfdb使用&quot;&gt;&lt;a href=&quot;#python-wfdb使用&quot; class=&quot;headerlink&quot; title=&quot;python_wfdb使用&quot;&gt;&lt;/a&gt;python_wfdb使用&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python模块的构建和调用</title>
    <link href="https://esyyes.github.io/2020/02/09/python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E8%B0%83%E7%94%A8/"/>
    <id>https://esyyes.github.io/2020/02/09/python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E8%B0%83%E7%94%A8/</id>
    <published>2020-02-09T08:55:02.000Z</published>
    <updated>2020-02-09T08:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python模块的构建和调用"><a href="#python模块的构建和调用" class="headerlink" title="python模块的构建和调用"></a>python模块的构建和调用</h1><p>代码运行出来太大了，看起来没那么好看，所以，需要进行处理，异常点还是要处理下，毕竟还可以得到一个时域特征。</p><p>异常点处理还是需要考虑到漏点这些情况，在这个里面就不需要了，但是在其他程序里面还是需要，因此找下相关的R峰值点查找的问题。</p><p>模块又要考虑两个问题，一个函数的构建，一个事模块的构建和调用。先看下别人的博客，关于时频域特征的提取问题前面不是看到个。</p><h2 id="1-heartpy库"><a href="#1-heartpy库" class="headerlink" title="1.heartpy库"></a>1.heartpy库</h2><p><a href="https://blog.csdn.net/weixin_45414380/article/details/100084696" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45414380/article/details/100084696</a></p><p>直接对其进行应用</p><p><a href="https://github.com/paulvangentcom/heartrate_analysis_python" target="_blank" rel="noopener">https://github.com/paulvangentcom/heartrate_analysis_python</a></p><p>查看heartpy库的说明。</p><p><a href="https://python-heart-rate-analysis-toolkit.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://python-heart-rate-analysis-toolkit.readthedocs.io/en/latest/</a></p><p>有点不想看了。明天再说。</p><p>安装起了，把包都升级下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python模块的构建和调用&quot;&gt;&lt;a href=&quot;#python模块的构建和调用&quot; class=&quot;headerlink&quot; title=&quot;python模块的构建和调用&quot;&gt;&lt;/a&gt;python模块的构建和调用&lt;/h1&gt;&lt;p&gt;代码运行出来太大了，看起来没那么好看，所以，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——滑动切片之数组</title>
    <link href="https://esyyes.github.io/2020/02/08/python/python%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <id>https://esyyes.github.io/2020/02/08/python/python%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87%E4%B9%8B%E6%95%B0%E7%BB%84/</id>
    <published>2020-02-08T05:45:57.000Z</published>
    <updated>2020-02-08T05:45:57.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray.ndim</td><td align="left">秩，即轴的数量或维度的数量</td></tr><tr><td align="left">ndarray.shape</td><td align="left">数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td align="left">ndarray.size</td><td align="left">数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td align="left">ndarray.dtype</td><td align="left">ndarray 对象的元素类型</td></tr><tr><td align="left">ndarray.itemsize</td><td align="left">ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td align="left">ndarray.flags</td><td align="left">ndarray 对象的内存信息</td></tr><tr><td align="left">ndarray.real</td><td align="left">ndarray元素的实部</td></tr><tr><td align="left">ndarray.imag</td><td align="left">ndarray 元素的虚部</td></tr><tr><td align="left">ndarray.data</td><td align="left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><p>数组的切片：</p><p>ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。</p><p>ndarray 数组可以基于 0 - n 的下标进行索引，切片对象可以通过内置的 slice 函数，并设置 start, stop 及 step 参数进行，从原数组中切割出一个新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为 2</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>数组的详细介绍</p><p><a href="https://www.runoob.com/numpy/numpy-ndexing-and-slicing.html" target="_blank" rel="noopener">https://www.runoob.com/numpy/numpy-ndexing-and-slicing.html</a></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cimage-20200208142758066.png" alt="image-20200208142758066"></p><p>还是需要用到循环结果</p><p>进行30s切片，并得到RR系列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">locs_30s = []</span><br><span class="line">RR = []</span><br><span class="line"><span class="keyword">while</span> locs[i] &lt; <span class="number">7500</span>:</span><br><span class="line">    locs_30s.append(locs[i])</span><br><span class="line">    RR.append(locs[i+<span class="number">1</span>] - locs[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">RR.pop()</span><br><span class="line">print(RR)</span><br><span class="line">[<span class="number">215</span>, <span class="number">223</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">221</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">213</span>, <span class="number">217</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">245</span>, <span class="number">242</span>, <span class="number">239</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">228</span>, <span class="number">226</span>]</span><br></pre></td></tr></table></figure><p>循环切片先不管RR系列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 考虑它的片段个数240</span></span><br><span class="line"><span class="comment"># 先考虑ECG片段的分段，分为240个30s的数据，毕竟这个为等距离的，列表里面放列表</span></span><br><span class="line"><span class="comment"># 建立一个空元组</span></span><br><span class="line">tuple1 = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (ECG_LEN / <span class="number">250</span> / <span class="number">30</span>) - <span class="number">1</span>:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    locs_30s = []</span><br><span class="line"><span class="comment">#     RR = []</span></span><br><span class="line">    <span class="keyword">while</span> locs[j] &lt; <span class="number">7500</span> * (i + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> locs[j] &gt;= <span class="number">7500</span> * i:</span><br><span class="line">            locs_30s.append(locs[j])</span><br><span class="line"><span class="comment">#             C = locs[j+1] - locs[j]</span></span><br><span class="line"><span class="comment">#             RR.append(C) </span></span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    print(locs_30s)</span><br><span class="line">    tuple1.append(locs_30s)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(i)</span><br><span class="line">print(tuple1)</span><br><span class="line">[<span class="number">19</span>, <span class="number">234</span>, <span class="number">457</span>, <span class="number">687</span>, <span class="number">911</span>, <span class="number">1137</span>, <span class="number">1360</span>, <span class="number">1581</span>, <span class="number">1808</span>, <span class="number">2029</span>, <span class="number">2244</span>, <span class="number">2460</span>, <span class="number">2673</span>, <span class="number">2890</span>, <span class="number">3117</span>, <span class="number">3354</span>, <span class="number">3599</span>, <span class="number">3841</span>, <span class="number">4080</span>, <span class="number">4327</span>, <span class="number">4576</span>, <span class="number">4822</span>, <span class="number">5061</span>, <span class="number">5292</span>, <span class="number">5526</span>, <span class="number">5761</span>, <span class="number">5998</span>, <span class="number">6234</span>, <span class="number">6460</span>, <span class="number">6682</span>, <span class="number">6906</span>, <span class="number">7134</span>, <span class="number">7360</span>]</span><br><span class="line">[<span class="number">7578</span>, <span class="number">7787</span>, <span class="number">7993</span>, <span class="number">8202</span>, <span class="number">8418</span>, <span class="number">8643</span>, <span class="number">8874</span>, <span class="number">9104</span>, <span class="number">9352</span>, <span class="number">9606</span>, <span class="number">9857</span>, <span class="number">10106</span>, <span class="number">10343</span>, <span class="number">10577</span>, <span class="number">10808</span>, <span class="number">11038</span>, <span class="number">11268</span>, <span class="number">11490</span>, <span class="number">11710</span>, <span class="number">11933</span>, <span class="number">12165</span>, <span class="number">12407</span>, <span class="number">12647</span>, <span class="number">12873</span>, <span class="number">13093</span>, <span class="number">13306</span>, <span class="number">13520</span>, <span class="number">13736</span>, <span class="number">13954</span>, <span class="number">14176</span>, <span class="number">14414</span>, <span class="number">14664</span>, <span class="number">14912</span>]</span><br><span class="line">[<span class="number">15159</span>, <span class="number">15400</span>, <span class="number">15634</span>, <span class="number">15875</span>, <span class="number">16114</span>, <span class="number">16352</span>, <span class="number">16583</span>, <span class="number">16809</span>, <span class="number">17038</span>, <span class="number">17266</span>, <span class="number">17497</span>, <span class="number">17728</span>, <span class="number">17946</span>, <span class="number">18159</span>, <span class="number">18368</span>, <span class="number">18575</span>, <span class="number">18787</span>, <span class="number">19007</span>, <span class="number">19230</span>, <span class="number">19455</span>, <span class="number">19691</span>, <span class="number">19934</span>, <span class="number">20178</span>, <span class="number">20416</span>, <span class="number">20654</span>, <span class="number">20898</span>, <span class="number">21143</span>, <span class="number">21387</span>, <span class="number">21619</span>, <span class="number">21845</span>, <span class="number">22071</span>, <span class="number">22301</span>]</span><br><span class="line">[<span class="number">22532</span>, <span class="number">22757</span>, <span class="number">22968</span>, <span class="number">23180</span>, <span class="number">23393</span>, <span class="number">23612</span>, <span class="number">23842</span>, <span class="number">24077</span>, <span class="number">24325</span>, <span class="number">24582</span>, <span class="number">24846</span>, <span class="number">25109</span>, <span class="number">25362</span>, <span class="number">25608</span>, <span class="number">25856</span>, <span class="number">26106</span>, <span class="number">26356</span>, <span class="number">26598</span>, <span class="number">26830</span>, <span class="number">27055</span>, <span class="number">27280</span>, <span class="number">27498</span>, <span class="number">27710</span>, <span class="number">27921</span>, <span class="number">28133</span>, <span class="number">28352</span>, <span class="number">28585</span>, <span class="number">28819</span>, <span class="number">29057</span>, <span class="number">29306</span>, <span class="number">29554</span>, <span class="number">29798</span>]</span><br><span class="line">[<span class="number">30054</span>, <span class="number">30314</span>, <span class="number">30573</span>, <span class="number">30824</span>, <span class="number">31070</span>, <span class="number">31313</span>, <span class="number">31555</span>, <span class="number">31793</span>, <span class="number">32029</span>, <span class="number">32258</span>, <span class="number">32490</span>, <span class="number">32727</span>, <span class="number">32961</span>, <span class="number">33195</span>, <span class="number">33425</span>, <span class="number">33652</span>, <span class="number">33880</span>, <span class="number">34110</span>, <span class="number">34337</span>, <span class="number">34562</span>, <span class="number">34782</span>, <span class="number">35007</span>, <span class="number">35236</span>, <span class="number">35473</span>, <span class="number">35710</span>, <span class="number">35943</span>, <span class="number">36174</span>, <span class="number">36409</span>, <span class="number">36653</span>, <span class="number">36899</span>, <span class="number">37138</span>, <span class="number">37369</span>]</span><br></pre></td></tr></table></figure><p>得到一个大的列表，里面包含很多个小的列表，</p><p><strong>while i &lt; (ECG_LEN / 250 / 30) - 1:</strong>在编写时，一定要考虑i的区间范围，要不然会超出范围，导致程序出错，虽然有结果，但是无法正常运行，在进行时通过计算-1可得到完整的数据，毕竟后面有个 <strong>while locs[j] &lt; 7500 * (i + 1):</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">list_RR = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (ECG_LEN / <span class="number">250</span> / <span class="number">30</span>) - <span class="number">1</span>:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    locs_30s = []</span><br><span class="line">    RR = []</span><br><span class="line">    <span class="keyword">while</span> locs[j] &lt; <span class="number">7500</span> * (i + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> locs[j] &gt;= <span class="number">7500</span> * i:</span><br><span class="line">            locs_30s.append(locs[j])</span><br><span class="line">            C = locs[j+<span class="number">1</span>] - locs[j]</span><br><span class="line">            RR.append(C) </span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    print(RR)</span><br><span class="line">    list_RR.append(RR)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(i)</span><br><span class="line">print(list_RR)</span><br><span class="line">[<span class="number">215</span>, <span class="number">223</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">221</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">213</span>, <span class="number">217</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">245</span>, <span class="number">242</span>, <span class="number">239</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">218</span>]</span><br><span class="line">[<span class="number">209</span>, <span class="number">206</span>, <span class="number">209</span>, <span class="number">216</span>, <span class="number">225</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">248</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">249</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">232</span>, <span class="number">242</span>, <span class="number">240</span>, <span class="number">226</span>, <span class="number">220</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">216</span>, <span class="number">218</span>, <span class="number">222</span>, <span class="number">238</span>, <span class="number">250</span>, <span class="number">248</span>, <span class="number">247</span>]</span><br><span class="line">[<span class="number">241</span>, <span class="number">234</span>, <span class="number">241</span>, <span class="number">239</span>, <span class="number">238</span>, <span class="number">231</span>, <span class="number">226</span>, <span class="number">229</span>, <span class="number">228</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">218</span>, <span class="number">213</span>, <span class="number">209</span>, <span class="number">207</span>, <span class="number">212</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">236</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">238</span>, <span class="number">238</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">244</span>, <span class="number">232</span>, <span class="number">226</span>, <span class="number">226</span>, <span class="number">230</span>, <span class="number">231</span>]</span><br><span class="line">[<span class="number">225</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">219</span>, <span class="number">230</span>, <span class="number">235</span>, <span class="number">248</span>, <span class="number">257</span>, <span class="number">264</span>, <span class="number">263</span>, <span class="number">253</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">242</span>, <span class="number">232</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">218</span>, <span class="number">212</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">219</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">238</span>, <span class="number">249</span>, <span class="number">248</span>, <span class="number">244</span>, <span class="number">256</span>]</span><br></pre></td></tr></table></figure><p>得到以5分钟为片段的30s滑窗的矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">list_RR = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; (ECG_LEN / <span class="number">250</span> / <span class="number">30</span>) - <span class="number">11</span>:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    locs_300s = []</span><br><span class="line">    RR = []</span><br><span class="line">    <span class="keyword">while</span> locs[j] &lt; <span class="number">75000</span> + <span class="number">7500</span> * i:</span><br><span class="line">        <span class="keyword">if</span> locs[j] &gt;= <span class="number">7500</span> * i:</span><br><span class="line">            locs_30s.append(locs[j])</span><br><span class="line">            C = locs[j+<span class="number">1</span>] - locs[j]</span><br><span class="line">            RR.append(C) </span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    RR.pop() <span class="comment"># 删除列表的最后一个，毕竟将数据多加了一个1，进行了运算</span></span><br><span class="line">    print(RR)</span><br><span class="line">    list_RR.append(RR) <span class="comment"># 将每个运行的列表叠加在一个列表上，构成一个大的列表</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">print(list_RR)</span><br><span class="line">[<span class="number">215</span>, <span class="number">223</span>, <span class="number">230</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">221</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">213</span>, <span class="number">217</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">245</span>, <span class="number">242</span>, <span class="number">239</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">218</span>, <span class="number">209</span>, <span class="number">206</span>, <span class="number">209</span>, <span class="number">216</span>, <span class="number">225</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">248</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">249</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">232</span>, <span class="number">242</span>, <span class="number">240</span>, <span class="number">226</span>, <span class="number">220</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">216</span>, <span class="number">218</span>, <span class="number">222</span>, <span class="number">238</span>, <span class="number">250</span>, <span class="number">248</span>, <span class="number">247</span>, <span class="number">241</span>, <span class="number">234</span>, <span class="number">241</span>, <span class="number">239</span>, <span class="number">238</span>, <span class="number">231</span>, <span class="number">226</span>, <span class="number">229</span>, <span class="number">228</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">218</span>, <span class="number">213</span>, <span class="number">209</span>, <span class="number">207</span>, <span class="number">212</span>, <span class="number">220</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">236</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">238</span>, <span class="number">238</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">244</span>, <span class="number">232</span>, <span class="number">226</span>, <span class="number">226</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">225</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">219</span>, <span class="number">230</span>, <span class="number">235</span>, <span class="number">248</span>, <span class="number">257</span>, <span class="number">264</span>, <span class="number">263</span>, <span class="number">253</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">250</span>, <span class="number">250</span>, <span class="number">242</span>, <span class="number">232</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">218</span>, <span class="number">212</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">219</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">238</span>, <span class="number">249</span>, <span class="number">248</span>, <span class="number">244</span>, <span class="number">256</span>, <span class="number">260</span>, <span class="number">259</span>, <span class="number">251</span>, <span class="number">246</span>, <span class="number">243</span>, <span class="number">242</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">229</span>, <span class="number">232</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">234</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">225</span>, <span class="number">220</span>, <span class="number">225</span>, <span class="number">229</span>, <span class="number">237</span>, <span class="number">237</span>, <span class="number">233</span>, <span class="number">231</span>, <span class="number">235</span>, <span class="number">244</span>, <span class="number">246</span>, <span class="number">239</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">229</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">226</span>, <span class="number">224</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">212</span>, <span class="number">216</span>, <span class="number">223</span>, <span class="number">232</span>, <span class="number">236</span>, <span class="number">238</span>, <span class="number">232</span>, <span class="number">240</span>, <span class="number">244</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">232</span>, <span class="number">231</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">226</span>, <span class="number">235</span>, <span class="number">238</span>, <span class="number">238</span>, <span class="number">233</span>, <span class="number">227</span>, <span class="number">223</span>, <span class="number">214</span>, <span class="number">207</span>, <span class="number">202</span>, <span class="number">204</span>, <span class="number">210</span>, <span class="number">227</span>, <span class="number">245</span>, <span class="number">258</span>, <span class="number">254</span>, <span class="number">251</span>, <span class="number">255</span>, <span class="number">246</span>, <span class="number">248</span>, <span class="number">237</span>, <span class="number">227</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">227</span>, <span class="number">230</span>, <span class="number">229</span>, <span class="number">232</span>, <span class="number">237</span>, <span class="number">239</span>, <span class="number">237</span>, <span class="number">230</span>, <span class="number">227</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">234</span>, <span class="number">228</span>, <span class="number">230</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">234</span>, <span class="number">244</span>, <span class="number">250</span>, <span class="number">247</span>, <span class="number">242</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">247</span>, <span class="number">242</span>, <span class="number">231</span>, <span class="number">230</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">228</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">229</span>, <span class="number">217</span>, <span class="number">207</span>, <span class="number">207</span>, <span class="number">207</span>, <span class="number">213</span>, <span class="number">221</span>, <span class="number">227</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">234</span>, <span class="number">238</span>, <span class="number">237</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">234</span>, <span class="number">232</span>, <span class="number">225</span>, <span class="number">222</span>, <span class="number">224</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">228</span>, <span class="number">231</span>, <span class="number">234</span>, <span class="number">224</span>, <span class="number">217</span>, <span class="number">225</span>, <span class="number">231</span>, <span class="number">240</span>, <span class="number">246</span>, <span class="number">241</span>, <span class="number">240</span>, <span class="number">247</span>, <span class="number">254</span>, <span class="number">249</span>, <span class="number">234</span>, <span class="number">237</span>, <span class="number">236</span>, <span class="number">242</span>, <span class="number">241</span>, <span class="number">234</span>, <span class="number">227</span>, <span class="number">223</span>, <span class="number">214</span>, <span class="number">209</span>, <span class="number">208</span>, <span class="number">207</span>, <span class="number">210</span>, <span class="number">219</span>, <span class="number">227</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">231</span>, <span class="number">238</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">236</span>, <span class="number">231</span>, <span class="number">224</span>, <span class="number">226</span>, <span class="number">222</span>, <span class="number">214</span>, <span class="number">207</span>, <span class="number">206</span>, <span class="number">212</span>, <span class="number">220</span>, <span class="number">230</span>, <span class="number">233</span>, <span class="number">233</span>, <span class="number">236</span>, <span class="number">243</span>, <span class="number">246</span>, <span class="number">244</span>]</span><br></pre></td></tr></table></figure><p>两种情况都得到结果</p><p>下一步：得到RR序列，首先查看，那个库，然后进行时频域分析，我觉得还是要消除异常点，毕竟为了后面做准备，还可以将其作为一个时域特征。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1581244543642&di=eadb0d6f73d023fd1ad1f4944147a6be&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3Df77af06f942397ddd679980c6983b216%2F70e2ae2f070828388d72159cbd99a9014d08f15d.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;属性&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;ndarray.ndim&lt;/td&gt;
&lt;td ali
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python__滑动切片</title>
    <link href="https://esyyes.github.io/2020/02/08/python/python-%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87/"/>
    <id>https://esyyes.github.io/2020/02/08/python/python-%E6%BB%91%E5%8A%A8%E5%88%87%E7%89%87/</id>
    <published>2020-02-08T02:33:27.000Z</published>
    <updated>2020-02-08T02:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PYTHON——滑动切片"><a href="#PYTHON——滑动切片" class="headerlink" title="PYTHON——滑动切片"></a>PYTHON——滑动切片</h1><p>需求：1.所需要的数据是以5分钟为短程分析</p><p>2.注释是以30秒为一个间期</p><p>3.以5分钟为片段，30秒为滑动窗口，考虑样本采样率为250，滑动的间隔为250*30=7500个数据点</p><p>4.直接用采样峰值点来进行切片，最后放入一个（）中，每个间隔为小矩阵</p><p>若为了好写的话，可以直接在python里面找pt算法，在找异常点，在循环，按照matlab的步骤</p><p>后面分析的还是这个公开数据库的数据，所以我可以直接按照峰值点来进行计算。</p><p>数据样本直接按照读取的峰值点进行提取即可。</p><h2 id="1-选取5分钟作为切片"><a href="#1-选取5分钟作为切片" class="headerlink" title="1.选取5分钟作为切片"></a>1.选取5分钟作为切片</h2><p>首先判定里面数据的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(type(locs))</span><br><span class="line">print(type(ECG))</span><br><span class="line">[[<span class="number">0.085</span>]</span><br><span class="line"> [<span class="number">0.08</span> ]</span><br><span class="line"> [<span class="number">0.125</span>]</span><br><span class="line"> ...</span><br><span class="line"> [<span class="number">0.23</span> ]</span><br><span class="line"> [<span class="number">0.235</span>]</span><br><span class="line"> [<span class="number">0.225</span>]]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-数据系列复习下"><a href="#1-1-数据系列复习下" class="headerlink" title="1.1 数据系列复习下"></a>1.1 数据系列复习下</h3><h4 id="1-1-1字符串"><a href="#1-1-1字符串" class="headerlink" title="1.1.1字符串"></a>1.1.1字符串</h4><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。name1 = ‘Tom’</p><p>控制台显示结果为<code>&lt;class &#39;str&#39;&gt;</code>， 即数据类型为str(字符串)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">'请输入您的名字：'</span>)</span><br><span class="line">print(<span class="string">f'您输入的名字是<span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line">print(type(name))</span><br><span class="line"></span><br><span class="line">password = input(<span class="string">'请输入您的密码：'</span>)</span><br><span class="line">print(<span class="string">f'您输入的密码是<span class="subst">&#123;password&#125;</span>'</span>)</span><br><span class="line">print(type(password))</span><br></pre></td></tr></table></figure><h4 id="1-1-2-下标"><a href="#1-1-2-下标" class="headerlink" title="1.1.2 下标"></a>1.1.2 下标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abcdef"</span></span><br><span class="line">取到不同下标对应的数据</span><br><span class="line">print(name[<span class="number">1</span>])</span><br><span class="line">print(name[<span class="number">0</span>])</span><br><span class="line">print(name[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h4 id="1-1-3-切片"><a href="#1-1-3-切片" class="headerlink" title="1.1.3 切片"></a>1.1.3 切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><pre><code>1. 不包含结束位置下标对应的数据， 正负整数均可；   2. 步长是选取间隔，正负整数均可，默认步长为1。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abcdefg"</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line">print(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line">print(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line">print(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line">print(name[:<span class="number">-1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line">print(name[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># def</span></span><br><span class="line">print(name[::<span class="number">-1</span>])  <span class="comment"># gfedcba</span></span><br></pre></td></tr></table></figure><h4 id="1-1-4查找"><a href="#1-1-4查找" class="headerlink" title="1.1.4查找"></a>1.1.4查找</h4><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line">print(mystr.find(<span class="string">'ands'</span>))  <span class="comment"># -1</span></span><br></pre></td></tr></table></figure><p>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</p><p>count()：返回某个子串在字符串中出现的次数</p><ul><li>下标<ul><li>计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li>切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列名[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>find()</li><li>index()</li></ul></li></ul><h3 id="1-1-2列表"><a href="#1-1-2列表" class="headerlink" title="1.1.2列表"></a>1.1.2列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L.append(var)          <span class="comment">#追加元素</span></span><br><span class="line">L.insert(index,var)</span><br><span class="line">L.pop(var)               <span class="comment">#返回最后一个元素，并从list中删除之</span></span><br><span class="line">L.remove(var)            <span class="comment">#删除第一次出现的该元素</span></span><br><span class="line">L.count(var)             <span class="comment">#该元素在列表中出现的个数</span></span><br><span class="line">L.index(var)             <span class="comment">#该元素的位置,无则抛异常</span></span><br><span class="line">L.extend(list6)         <span class="comment">#追加list６，即合并list到L上,这里注意，使用extend函数可以一次在一个列表中插入任意多个值，而不必须每次只使用append()一次一值的插入</span></span><br><span class="line">L.sort()        <span class="comment">#排序</span></span><br><span class="line">L.reverse()     <span class="comment">#倒序</span></span><br><span class="line"><span class="keyword">del</span> L[<span class="number">1</span>]        <span class="comment">#删除指定下标的元素</span></span><br><span class="line"><span class="keyword">del</span> L[<span class="number">1</span>:<span class="number">3</span>]      <span class="comment">#删除指定下标范围的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制list:</span></span><br><span class="line">L1 = L      <span class="comment">#L1为L的别名，用C来说就是指针地址相同，对L1操作即对L操作。</span></span><br><span class="line">L1 = L[:]   <span class="comment">#L1为L的克隆，即另一个拷贝。</span></span><br><span class="line">https://blog.csdn.net/liuyanfeier/article/details/<span class="number">53731239</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>, 数据<span class="number">4.</span>.....]</span><br></pre></td></tr></table></figure><p>列表可以一次性存储多个数据，且可以为不同数据类型。</p><h3 id="1-1-2-1-下标"><a href="#1-1-2-1-下标" class="headerlink" title="1.1.2.1 下标"></a>1.1.2.1 下标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list[<span class="number">0</span>])  <span class="comment"># Tom</span></span><br><span class="line">print(name_list[<span class="number">1</span>])  <span class="comment"># Lily</span></span><br><span class="line">print(name_list[<span class="number">2</span>])  <span class="comment"># Rose</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-2-函数"><a href="#1-1-2-2-函数" class="headerlink" title="1.1.2.2 函数"></a>1.1.2.2 函数</h3><ul><li>index()：返回指定数据所在位置的下标 。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.index(数据, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list.index(<span class="string">'Lily'</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul><li>count()：统计指定数据在当前列表中出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list.count(<span class="string">'Lily'</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><ul><li>len()：访问列表长度，即列表中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(len(name_list))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="1-1-2-3-增加"><a href="#1-1-2-3-增加" class="headerlink" title="1.1.2.3 增加"></a>1.1.2.3 增加</h2><p>作用：增加指定数据到列表中。</p><ul><li>append()：列表结尾追加数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.append(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li>体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.append(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><p><img src="H:/%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90/%E8%B5%84%E6%96%99%E4%B8%8E%E4%BB%A3%E7%A0%81/01-Python%E5%9F%BA%E7%A1%80%E8%AF%BE%E4%BB%B6/04-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/02-%E5%88%97%E8%A1%A8.assets/image-20190130160154636.png" alt="image-20190130160154636"></p><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><ol start="3"><li>注意点</li></ol><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.append([<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', ['xiaoming', 'xiaohong']]</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.extend(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 单个数据</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'x', 'i', 'a', 'o', 'm', 'i', 'n', 'g']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><p>​    2.2 序列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend([<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming', 'xiaohong']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>insert()：指定位置新增数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.insert(位置下标, 数据)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'xiaoming', 'Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><h2 id="1-1-2-4-删除"><a href="#1-1-2-4-删除" class="headerlink" title="1.1.2.4 删除"></a>1.1.2.4 删除</h2><ul><li>del</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 目标</span><br></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 删除列表</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：报错提示：name 'name_list' is not defined</span></span><br><span class="line"><span class="keyword">del</span> name_list</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><p>​    2.2 删除指定数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.pop(下标)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">del_name = name_list.pop(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：Lily</span></span><br><span class="line">print(del_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>remove()：移除列表中某个数据的第一个匹配项。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.remove(数据)</span><br></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.remove(<span class="string">'Rose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>clear()：清空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.clear()</span><br><span class="line">print(name_list) <span class="comment"># 结果： []</span></span><br></pre></td></tr></table></figure><h2 id="1-1-2-5-修改"><a href="#1-1-2-5-修改" class="headerlink" title="1.1.2.5 修改"></a>1.1.2.5 修改</h2><ul><li>修改指定下标数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list[<span class="number">0</span>] = <span class="string">'aaa'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['aaa', 'Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure><ul><li>逆置：reverse()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：[8, 6, 3, 2, 5, 1]</span></span><br><span class="line">print(num_list)</span><br></pre></td></tr></table></figure><h1 id="1-1-2-6-列表的循环遍历"><a href="#1-1-2-6-列表的循环遍历" class="headerlink" title="1.1.2.6 列表的循环遍历"></a>1.1.2.6 列表的循环遍历</h1><p>需求：依次打印列表中的各个数据。</p><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(name_list):</span><br><span class="line">    print(name_list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="H:/%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90/%E8%B5%84%E6%96%99%E4%B8%8E%E4%BB%A3%E7%A0%81/01-Python%E5%9F%BA%E7%A1%80%E8%AF%BE%E4%BB%B6/04-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/02-%E5%88%97%E8%A1%A8.assets/image-20190130164205143.png" alt="image-20190130164205143"></p><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="H:/%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90/%E8%B5%84%E6%96%99%E4%B8%8E%E4%BB%A3%E7%A0%81/01-Python%E5%9F%BA%E7%A1%80%E8%AF%BE%E4%BB%B6/04-%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/02-%E5%88%97%E8%A1%A8.assets/image-20190130164227739.png" alt="image-20190130164227739"></p><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [[<span class="string">'小明'</span>, <span class="string">'小红'</span>, <span class="string">'小绿'</span>], [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>], [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>]]</span><br></pre></td></tr></table></figure><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步：按下标查找到李四所在的列表</span></span><br><span class="line">print(name_list[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span></span><br><span class="line">print(name_list[<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>列表的格式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>index()</li><li>len()</li><li>append()</li><li>pop()</li><li>remove()</li></ul></li><li>列表嵌套</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name_list = [[<span class="string">'小明'</span>, <span class="string">'小红'</span>, <span class="string">'小绿'</span>], [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>], [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>]]</span><br><span class="line">name_list[<span class="number">2</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>总结反应过来了这是一个数组，我需要将他切片放进列表中，太久没学习了脑壳疼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PYTHON——滑动切片&quot;&gt;&lt;a href=&quot;#PYTHON——滑动切片&quot; class=&quot;headerlink&quot; title=&quot;PYTHON——滑动切片&quot;&gt;&lt;/a&gt;PYTHON——滑动切片&lt;/h1&gt;&lt;p&gt;需求：1.所需要的数据是以5分钟为短程分析&lt;/p&gt;
&lt;p&gt;2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python__获取MIT数据</title>
    <link href="https://esyyes.github.io/2020/02/07/python/python-%E8%8E%B7%E5%8F%96MIT%E6%95%B0%E6%8D%AE/"/>
    <id>https://esyyes.github.io/2020/02/07/python/python-%E8%8E%B7%E5%8F%96MIT%E6%95%B0%E6%8D%AE/</id>
    <published>2020-02-07T06:06:46.000Z</published>
    <updated>2020-02-07T06:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-获取MIT数据"><a href="#python-获取MIT数据" class="headerlink" title="python__获取MIT数据"></a>python__获取MIT数据</h1><p>1.数据库所在位置：F:\MITDAT</p><p>2.数据保存格式：st,dat,ecg,hea</p><p>3.利用pycharm读取dat数据，并且存为可读格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载对应的数据库数据，保存位置：F:\MITDAT</span></span><br><span class="line"><span class="comment"># 读取对应数据库的dat数据</span></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">读取心电信号文件</span></span><br><span class="line"><span class="string">sampfrom: 设置读取心电信号的 起始位置，sampfrom=0表示从0开始读取，默认从0开始</span></span><br><span class="line"><span class="string">sampto：设置读取心电信号的 结束位置，sampto = 1500表示从1500出结束，默认读到文件末尾</span></span><br><span class="line"><span class="string">channel_names：设置设置读取心电信号名字，必须是列表，channel_names=['MLII']表示读取MLII导联线</span></span><br><span class="line"><span class="string">channels：设置读取第几个心电信号，必须是列表，channels=[0, 3]表示读取第0和第3个信号，注意信号数不确定</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampfrom=0, sampto = 1500)</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampfrom=0, sampto = 1500)</span></span><br><span class="line"><span class="comment"># 仅仅读取“ECG”信号</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampto=1500, channel_names=['ECG'])</span></span><br><span class="line"><span class="comment"># 仅仅读取第0个信号（ECG）</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/MITDAT/slp01a', sampfrom=0, channels=[0])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取slp01a的数据，sampfrom：起始位置，sampto：结束位置，即可写做</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/MITDAT/slp01a'</span>)</span><br><span class="line"><span class="comment"># 查看record类型</span></span><br><span class="line">print(type(record))</span><br><span class="line"><span class="comment"># 查看类中的方法和属性</span></span><br><span class="line"><span class="comment"># print(dir(record))</span></span><br><span class="line"><span class="comment"># 获得心电导联线信号，本文获得是4通道的信号</span></span><br><span class="line">print(record.p_signal)</span><br><span class="line"><span class="comment"># 输出4通道的信号</span></span><br><span class="line">print(np.shape(record.p_signal))</span><br><span class="line"><span class="comment"># 查看导联线信号长度</span></span><br><span class="line">print(record.sig_len)</span><br><span class="line"><span class="comment"># 查看文件名</span></span><br><span class="line">print(record.record_name)</span><br><span class="line"><span class="comment"># 查看导联线条数，本文为导联线条数4</span></span><br><span class="line">print(record.n_sig)</span><br><span class="line"><span class="comment"># 查看信号名称（列表），本文导联线名称['ECG', 'BP', 'EEG (C4-A1)', 'Resp (sum)']</span></span><br><span class="line">print(record.sig_name)</span><br><span class="line"><span class="comment"># 查看采用率</span></span><br><span class="line">print(record.fs)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207151930604.png" alt=""></p><p>暂时只需要ECG信号，即第一个客户端的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只获取ECG对应的信号</span></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/MITDAT/slp01a'</span>, channels=[<span class="number">0</span>])</span><br><span class="line">print(record.p_signal)</span><br><span class="line"><span class="comment"># 输出4通道的信号</span></span><br><span class="line">print(np.shape(record.p_signal))</span><br><span class="line"><span class="comment"># 查看导联线信号长度</span></span><br><span class="line">print(record.sig_len)</span><br><span class="line"><span class="comment"># 查看文件名</span></span><br><span class="line">print(record.record_name)</span><br><span class="line"><span class="comment"># 查看导联线条数，本文为导联线条数4</span></span><br><span class="line">print(record.n_sig)</span><br><span class="line"><span class="comment"># 查看信号名称（列表），本文导联线名称['ECG', 'BP', 'EEG (C4-A1)', 'Resp (sum)']</span></span><br><span class="line">print(record.sig_name)</span><br><span class="line"><span class="comment"># 查看采用率</span></span><br><span class="line">print(record.fs)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207152059811.png" alt=""></p><p>即所需的数据为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/MITDAT/slp01a'</span>, channels=[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 输出ECG通道的信号</span></span><br><span class="line">ECG  = record.p_signal</span><br><span class="line">print(ECG)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207152555100.png" alt=""></p><p>读取R峰值点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="comment"># 读取心电数据库的R峰值点</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/MITDAT/slp01a'</span>, <span class="string">'ecg'</span>)</span><br><span class="line"><span class="comment"># 标注每一个心拍的R波的尖锋位置，与心电信号对应</span></span><br><span class="line">print(annotation.sample)</span><br><span class="line"><span class="comment">#symbol对应标签,sample为R峰所在位置，sig为R峰值</span></span><br><span class="line"><span class="comment"># print(annotation.symbol)</span></span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C86184%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207154706625.png" alt=""></p><p>提取注释信息！可以暂时不用管理，到时重新导出注释信号。</p><p>下一步。利用PT算法，读取峰值点，在python里面读取</p><p>不过已经直接读取出R峰值点，暂时可不考虑。pt算法。</p><p>切片循环和导出峰值，提取时域。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-获取MIT数据&quot;&gt;&lt;a href=&quot;#python-获取MIT数据&quot; class=&quot;headerlink&quot; title=&quot;python__获取MIT数据&quot;&gt;&lt;/a&gt;python__获取MIT数据&lt;/h1&gt;&lt;p&gt;1.数据库所在位置：F:\MITDAT&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matlab中的滑动窗口</title>
    <link href="https://esyyes.github.io/2020/01/07/matlab/matlab%E4%B8%AD%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>https://esyyes.github.io/2020/01/07/matlab/matlab%E4%B8%AD%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2020-01-07T02:47:29.000Z</published>
    <updated>2020-01-07T02:47:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进行滑动加窗"><a href="#进行滑动加窗" class="headerlink" title="进行滑动加窗"></a>进行滑动加窗</h1><p>Kubios HRV分析的信号在加载时会漏掉后续20秒的数据，想要完整的5分钟数据，因此输出的信号即为6分钟，保持连贯性，即选取6分钟的窗口，以5分钟为步长进行移动分析。</p><p>sliding Windows</p><p>滑动窗口：<strong>滑动窗口由固定的窗口长度和滑动间隔组成</strong>。</p><p><strong>特点</strong>：<strong>窗口长度固定，有重叠</strong>。</p><p><img src="https://img2018.cnblogs.com/blog/1247221/201905/1247221-20190513011529750-1763616187.png" alt="sliding windows"></p><p><img src="https://img-blog.csdnimg.cn/20190305164439172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtMjc4ODU4NDQ1,size_16,color_FFFFFF,t_70" alt="滑窗"></p><p>滑动窗口大小：5分钟即：75000</p><p>总结：笨。。。</p><h1 id="批量保存txt文件"><a href="#批量保存txt文件" class="headerlink" title="批量保存txt文件"></a>批量保存txt文件</h1><p>1.放在一个矩阵中，会出现维度不同的报错问题</p><p>2.综合考虑放在一个cell元包数组中，或者结构体中</p><p>3.在考虑批量保存</p><h3 id="元胞数组："><a href="#元胞数组：" class="headerlink" title="元胞数组："></a>元胞数组：</h3><p>特点：</p><p>1.可以存储大小不同的矩阵序列</p><p>2.检索内容时，使用大括号下标进行索引，A{1}</p><p>3.包含其他数组的<em>副本<em>，而不包含指向这些数组的</em>指针，即修改原值，元胞里的内容不变</em></p><h3 id="结构体："><a href="#结构体：" class="headerlink" title="结构体："></a>结构体：</h3><p>结构体是多维 MATLAB 数组，包含可按文本字段标志符访问的元素。</p><p>cell（1，1）是查看大小和样式</p><p>cell{1 . 1}是读取全部的数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt;= m</span><br><span class="line">    [QRS_pks, QRS_locs, delay] = pan_tompkin(ECG(<span class="built_in">i</span>, :), fs, <span class="number">0</span>);</span><br><span class="line">    [RR] = HRV(QRS_locs);<span class="comment">% 得到HRV信号</span></span><br><span class="line">    [QRS_locs, RR] = Eliminate_outliers(QRS_locs, RR);<span class="comment">% 消除HRV中的RR异常值</span></span><br><span class="line">    cell_RR(<span class="built_in">i</span>, <span class="number">1</span>) = &#123;RR&#125;;</span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="number">332</span>x1 double</span><br><span class="line"><span class="number">341</span>x1 double</span><br><span class="line"><span class="number">331</span>x1 double</span><br><span class="line"><span class="number">321</span>x1 double</span><br><span class="line"><span class="number">315</span>x1 double</span><br><span class="line"><span class="number">315</span>x1 double</span><br><span class="line"><span class="number">301</span>x1 double</span><br><span class="line"><span class="number">306</span>x1 double</span><br><span class="line"><span class="number">303</span>x1 double</span><br><span class="line"><span class="number">305</span>x1 double</span><br><span class="line"><span class="number">305</span>x1 double</span><br><span class="line"><span class="number">320</span>x1 double</span><br><span class="line"><span class="number">322</span>x1 double</span><br></pre></td></tr></table></figure><p>两个分析的软件都只能读取txt文件。因此需要进行批量保存为txt文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进行滑动加窗&quot;&gt;&lt;a href=&quot;#进行滑动加窗&quot; class=&quot;headerlink&quot; title=&quot;进行滑动加窗&quot;&gt;&lt;/a&gt;进行滑动加窗&lt;/h1&gt;&lt;p&gt;Kubios HRV分析的信号在加载时会漏掉后续20秒的数据，想要完整的5分钟数据，因此输出的信号即为6分钟
      
    
    </summary>
    
    
      <category term="matlab" scheme="https://esyyes.github.io/categories/matlab/"/>
    
    
  </entry>
  
  <entry>
    <title>去趋势波动分析DFA</title>
    <link href="https://esyyes.github.io/2019/12/26/python/%E5%8E%BB%E8%B6%8B%E5%8A%BF%E6%B3%A2%E5%8A%A8%E5%88%86%E6%9E%90DFA/"/>
    <id>https://esyyes.github.io/2019/12/26/python/%E5%8E%BB%E8%B6%8B%E5%8A%BF%E6%B3%A2%E5%8A%A8%E5%88%86%E6%9E%90DFA/</id>
    <published>2019-12-26T06:34:05.000Z</published>
    <updated>2019-12-26T06:34:05.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LV-3</title>
    <link href="https://esyyes.github.io/2019/12/26/python/python%E8%B0%83%E7%94%A8wfdb/"/>
    <id>https://esyyes.github.io/2019/12/26/python/python%E8%B0%83%E7%94%A8wfdb/</id>
    <published>2019-12-26T02:33:29.000Z</published>
    <updated>2019-12-26T02:33:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python中的WFDB库使用"><a href="#python中的WFDB库使用" class="headerlink" title="python中的WFDB库使用"></a>python中的WFDB库使用</h1><h2 id="1-获取MIT——PhysioNet数据库的所有库名称"><a href="#1-获取MIT——PhysioNet数据库的所有库名称" class="headerlink" title="1.获取MIT——PhysioNet数据库的所有库名称"></a>1.获取MIT——PhysioNet数据库的所有库名称</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"></span><br><span class="line">dbs = wfdb.get_dbs()</span><br><span class="line">print(dbs)</span><br></pre></td></tr></table></figure><p>获取PhysioNet所有库的名称列表：</p><p>[[‘adfecgdb’, ‘Abdominal and Direct Fetal ECG Database’], [‘aftdb’, ‘AF Termination Challenge Database’], [‘ahadb’, ‘AHA Database [sample excluded record]’], [‘aami-ec13’, ‘ANSI/AAMI EC13 Test Waveforms’], [‘apnea-ecg’, ‘Apnea-ECG Database’], [‘chfdb’, ‘BIDMC Congestive Heart Failure Database’], [‘bidmc’, ‘BIDMC PPG and Respiration Dataset’], [‘bpssrat’, ‘Blood Pressure in Salt-Sensitive Dahl Rats’], [‘capslpdb’, ‘CAP Sleep Database’], [‘crisdb’, ‘CAST RR Interval Sub-Study Database’], [‘cves’, ‘Cerebral Vasoregulation in Elderly with Stroke’], [‘challenge/2009/test-set-a’, ‘Challenge 2009 Test Set A’], [‘challenge/2009/test-set-b’, ‘Challenge 2009 Test Set B’], [‘challenge/2010/set-a’, ‘Challenge 2010 Training Set A’], [‘challenge/2010/set-b’, ‘Challenge 2010 Test Set B’], [‘challenge/2010/set-c’, ‘Challenge 2010 Test Set C’], [‘challenge/2011/sim’, ‘Challenge 2011 Pilot Set’], [‘challenge/2011/set-a’, ‘Challenge 2011 Training Set A’], [‘challenge/2011/set-b’, ‘Challenge 2011 Test Set B’], [‘challenge/2013/set-a’, ‘Challenge 2013 Training Set A’], [‘challenge/2013/set-b’, ‘Challenge 2013 Test Set B’], [‘challenge/2014/set-p2’, ‘Challenge 2014 Extended Training Set’], [‘challenge/2014/set-p’, ‘Challenge 2014 Training Set’], [‘challenge/2015/training’, ‘Challenge 2015 Training Set’], [‘challenge/2016/training-a’, ‘Challenge 2016 Training Set A’], [‘challenge/2016/training-b’, ‘Challenge 2016 Training Set B’], [‘challenge/2016/training-c’, ‘Challenge 2016 Training Set C’], [‘challenge/2016/training-d’, ‘Challenge 2016 Training Set D’], [‘challenge/2016/training-e’, ‘Challenge 2016 Training Set E’], [‘challenge/2016/training-f’, ‘Challenge 2016 Training Set F’], [‘challenge/2017/training’, ‘Challenge 2017 Training Set’], [‘challenge/2018/training’, ‘Challenge 2018 Training Set’], [‘challenge/2018/test’, ‘Challenge 2018 Test Set’], [‘charisdb’, ‘CHARIS database’], [‘chbmit’, ‘CHB-MIT Scalp EEG Database’], [‘cebsdb’, ‘Combined measurement of ECG, Breathing and Seismocardiograms’], [‘culm’, ‘Complex Upper-Limb Movements’], [‘chf2db’, ‘Congestive Heart Failure RR Interval Database’], [‘ctu-uhb-ctgdb’, ‘CTU-CHB Intrapartum Cardiotocography Database’], [‘cudb’, ‘CU Ventricular Tachyarrhythmia Database’], [‘ecgdmmld’, ‘ECG Effects of Dofetilide, Moxifloxacin, Dofetilide+Mexiletine, Dofetilide+Lidocaine and Moxifloxacin+Diltiazem’], [‘ecgcipa’, ‘CiPA ECG Validation Study’], [‘ecgrdvq’, ‘ECG Effects of Ranolazine, Dofetilide, Verapamil, and Quinidine’], [‘ecgiddb’, ‘ECG-ID Database’], [‘eegmat’, ‘EEG During Mental Arithmetic Tasks’], [‘eegmmidb’, ‘EEG Motor Movement/Imagery Dataset’], [‘ltrsvp’, ‘EEG Signals from an RSVP Task’], [‘erpbci’, ‘ERP-based Brain-Computer Interface recordings’], [‘edb’, ‘European ST-T Database’], [‘earh’, ‘Evoked Auditory Responses in Heading Impaired’], [‘earndb’, ‘Evoked Auditory Responses in Normals’], [‘emgdb’, ‘Examples of Electromyograms’], [‘fantasia’, ‘Fantasia Database’], [‘fecgsyndb’, ‘Fetal ECG Synthetic Database’], [‘fpcgdb’, ‘Fetal PCG Database’], [‘gaitdb’, ‘Gait in Aging and Disease Database’], [‘gaitndd’, ‘Gait in Neurodegenerative Disease Database’], [‘gait-maturation-db/data’, ‘Gait Maturation Database’], [‘meditation/data’, ‘Heart Rate Oscillations during Meditation’], [‘hbedb’, ‘Human Balance Evaluation Database’], [‘ehgdb’, ‘Icelandic 16-electrode Electrohysterogram Database’], [‘iafdb’, ‘Intracardiac Atrial Fibrillation Database’], [‘ltafdb’, ‘Long Term AF Database’], [‘ltstdb’, ‘Long Term ST Database’], [‘mssvepdb’, ‘MAMEM SSVEP Database’], [‘mghdb’, ‘MGH/MF Waveform Database’], [‘mimicdb’, ‘MIMIC Database’], [‘mimicdb/numerics’, ‘MIMIC Database Numerics’], [‘mimic2cdb’, ‘MIMIC II Clinical Database Public Subset’], [‘mimic2wdb/30’, ‘MIMIC II/III Waveform Database, part 0’], [‘mimic2wdb/31’, ‘MIMIC II/III Waveform Database, part 1’], [‘mimic2wdb/32’, ‘MIMIC II/III Waveform Database, part 2’], [‘mimic2wdb/33’, ‘MIMIC II/III Waveform Database, part 3’], [‘mimic2wdb/34’, ‘MIMIC II/III Waveform Database, part 4’], [‘mimic2wdb/35’, ‘MIMIC II/III Waveform Database, part 5’], [‘mimic2wdb/36’, ‘MIMIC II/III Waveform Database, part 6’], [‘mimic2wdb/37’, ‘MIMIC II/III Waveform Database, part 7’], [‘mimic2wdb/38’, ‘MIMIC II/III Waveform Database, part 8’], [‘mimic2wdb/39’, ‘MIMIC II/III Waveform Database, part 9’], [‘mimic2wdb/matched’, ‘MIMIC II Waveform Database Matched Subset’], [‘mimic3wdb/matched’, ‘MIMIC III Waveform Database Matched Subset’], [‘mitdb’, ‘MIT-BIH Arrhythmia Database’], [‘pwave’, ‘MIT-BIH Arrhythmia Database P-Wave Annotations’], [‘afdb’, ‘MIT-BIH Atrial Fibrillation Database’], [‘cdb’, ‘MIT-BIH ECG Compression Test Database’], [‘ltdb’, ‘MIT-BIH Long-Term ECG Database’], [‘vfdb’, ‘MIT-BIH Malignant Ventricular Ectopy Database’], [‘nstdb’, ‘MIT-BIH Noise Stress Test Database’], [‘nsrdb’, ‘MIT-BIH Normal Sinus Rhythm Database’], [‘excluded’, ‘… [Recordings excluded from the NSR DB]’], [‘slpdb’, ‘MIT-BIH Polysomnographic Database’], [‘stdb’, ‘MIT-BIH ST Change Database’], [‘svdb’, ‘MIT-BIH Supraventricular Arrhythmia Database’], [‘mmgdb’, ‘MMG Database’], [‘macecgdb’, ‘Motion Artifact Contaminated ECG Database’], [‘motion-artifact’, ‘Motion Artifact Contaminated fNIRS and EEG Data’], [‘noneeg’, ‘Non-EEG Dataset for Assessment of Neurological Status’], [‘nifecgdb’, ‘Non-Invasive Fetal ECG Database’], [‘nifeadb’, ‘Non-Invasive Fetal ECG Arrhythmia Database’], [‘nsr2db’, ‘Normal Sinus Rhythm RR Interval Database’], [‘ob1db’, ‘OB-1 Fetal ECG Database [sample record]’], [‘afpdb’, ‘PAF Prediction Challenge Database’], [‘osv’, ‘Pattern Analysis of Oxygen Saturation Variability’], [‘prcp’, ‘Physiologic Response to Changes in Posture’], [‘szdb’, ‘Post-Ictal Heart Rate Oscillations in Partial Epilepsy’], [‘picsdb’, ‘Preterm Infant Cardio-Respiratory Signals Database’], [‘ptbdb’, ‘PTB Diagnostic ECG Database’], [‘qtdb’, ‘QT Database’], [‘rvmh1’, ‘Response to Valsalva Maneuver in Humans’], [‘sufhsdb’, ‘Shiraz University Fetal Heart Sounds Database’], [‘simfpcgdb’, ‘Simulated Fetal Phonocardiograms’], [‘sleepbrl’, ‘Sleep Bioradiolocation Database’], [‘sleep-edfx’, ‘Sleep-EDF Database [Expanded]’], [‘shhpsgdb’, ‘Sleep Heart Health Study PSG Database [sample record]’], [‘shareedb’, ‘Smart Health for Assessing the Risk of Events via ECG Database’], [‘mvtdb/data’, ‘Spontaneous Ventricular Tachyarrhythmia Database’], [‘sgamp’, ‘Squid Giant Axon Membrane Potential’], [‘incartdb’, ‘St Petersburg INCART 12-lead Arrhythmia Database’], [‘staffiii’, ‘STAFF III Database’], [‘drivedb’, ‘Stress Recognition in Automobile Drivers’], [‘sddb’, ‘Sudden Cardiac Death Holter Database’], [‘twadb’, ‘T-Wave Alternans Challenge Database’], [‘taichidb’, ‘Tai Chi, Physiological Complexity, and Healthy Aging - Gait’], [‘tpehgdb’, ‘Term-Preterm EHG Database’], [‘tpehgt’, ‘Term-Preterm EHG DataSet with Tocogram (TPEHGT DS)’], [‘ucddb’, ‘UCD Sleep Apnea Database’], [‘unicaprop’, ‘UniCA ElectroTastegram Database (PROP)’], [‘videopulse’, ‘Video Pulse Signals in Stationary and Motion Conditions’], [‘voiced’, ‘VOice ICar fEDerico II Database’], [‘wrist’, ‘Wrist PPG During Exercise’], [‘mimic2db’, ‘MIMIC II Waveform DB, v2 [deprecated, use v3]’], [‘mimic2db/numerics’, ‘MIMIC II Waveform DB, v2 Numerics [deprecated, use v3]’], [‘sleep-edf’, ‘Sleep-EDF Database, v1 [deprecated, use sleep-edfx]’]]</p><p>这个列表其实在网站<em><a href="https://physionet.org/physiobank/database/" target="_blank" rel="noopener">https://physionet.org/physiobank/database/</a></em>中也可以查看查看</p><p><strong>找到想要分析的睡眠数据库：</strong></p><p> <strong>[‘slpdb’, ‘MIT-BIH Polysomnographic Database’]</strong></p><h2 id="2-获取想要的睡眠数据库的所有信号记录列表"><a href="#2-获取想要的睡眠数据库的所有信号记录列表" class="headerlink" title="2.获取想要的睡眠数据库的所有信号记录列表"></a>2.获取想要的睡眠数据库的所有信号记录列表</h2><p>由第一个库知道， <strong>[‘slpdb’, ‘MIT-BIH Polysomnographic Database’]</strong>，对应的数据库就为<strong>slpdb</strong>，获取里面所有数据集的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recs_list = wfdb.get_record_list(<span class="string">'slpdb'</span>)</span><br><span class="line">print(recs_list)</span><br></pre></td></tr></table></figure><p>[‘slp01a’, ‘slp01b’, ‘slp02a’, ‘slp02b’, ‘slp03’, ‘slp04’, ‘slp14’, ‘slp16’, ‘slp32’, ‘slp37’, ‘slp41’, ‘slp45’, ‘slp48’, ‘slp59’, ‘slp60’, ‘slp61’, ‘slp66’, ‘slp67x’]</p><h2 id="3-获取对应的数据库里面的内容"><a href="#3-获取对应的数据库里面的内容" class="headerlink" title="3.获取对应的数据库里面的内容"></a>3.获取对应的数据库里面的内容</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python中的WFDB库使用&quot;&gt;&lt;a href=&quot;#python中的WFDB库使用&quot; class=&quot;headerlink&quot; title=&quot;python中的WFDB库使用&quot;&gt;&lt;/a&gt;python中的WFDB库使用&lt;/h1&gt;&lt;h2 id=&quot;1-获取MIT——Phys
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matlab中的插值</title>
    <link href="https://esyyes.github.io/2019/12/18/matlab/matlab%E4%B8%AD%E7%9A%84%E6%8F%92%E5%80%BC/"/>
    <id>https://esyyes.github.io/2019/12/18/matlab/matlab%E4%B8%AD%E7%9A%84%E6%8F%92%E5%80%BC/</id>
    <published>2019-12-18T00:50:08.000Z</published>
    <updated>2019-12-18T00:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matlab中的插值函数"><a href="#Matlab中的插值函数" class="headerlink" title="Matlab中的插值函数"></a>Matlab中的插值函数</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=850775&auto=1&height=66"></iframe># interp1<p>一维数据插值（表查找）</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vq = interp1(x,v,xq)</span><br><span class="line">vq = interp1(x,v,xq,method)</span><br><span class="line">vq = interp1(x,v,xq,method,extrapolation)</span><br><span class="line">vq = interp1(v,xq)</span><br><span class="line">vq = interp1(v,xq,method)</span><br><span class="line">vq = interp1(v,xq,method,extrapolation)</span><br><span class="line">pp = interp1(x,v,method,<span class="string">'pp'</span>)</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>vq = interp1(x,v,xq)</code> 使用线性插值返回一维函数在特定查询点的插入值。向量 <code>x</code> 包含样本点，<code>v</code> 包含对应值 v(x)。向量 <code>xq</code> 包含查询点的坐标。</p><p>如果您有多个在同一点坐标采样的数据集，则可以将 <code>v</code> 以数组的形式进行传递。数组 <code>v</code> 的每一列都包含一组不同的一维样本值。</p><p><code>vq = interp1(x,v,xq,method)</code> 指定备选插值方法：<code>&#39;linear&#39;</code>、<code>&#39;nearest&#39;</code>、<code>&#39;next&#39;</code>、<code>&#39;previous&#39;</code>、<code>&#39;pchip&#39;</code>、<code>&#39;cubic&#39;</code>、<code>&#39;v5cubic&#39;</code>、<code>&#39;makima&#39;</code> 或 <code>&#39;spline&#39;</code>。默认方法为 <code>&#39;linear&#39;</code>。</p><p><code>vq = interp1(x,v,xq,method,extrapolation)</code> 用于指定外插策略，来计算落在 <code>x</code> 域范围外的点。如果希望使用 <code>method</code> 算法进行外插，可将 <code>extrapolation</code> 设置为 <code>&#39;extrap&#39;</code>。您也可以指定一个标量值，这种情况下，<code>interp1</code> 将为所有落在 <code>x</code> 域范围外的点返回该标量值。</p><p><code>vq = interp1(v,xq)</code> 返回插入的值，并假定一个样本点坐标默认集。默认点是从 <code>1</code> 到 <code>n</code> 的数字序列，其中 <code>n</code>取决于 <code>v</code> 的形状：</p><ul><li>当 v 是向量时，默认点是 <code>1:length(v)</code>。</li><li>当 v 是数组时，默认点是 <code>1:size(v,1)</code>。</li></ul><p>如果您不在意点之间的绝对距离，则可使用此语法。</p><p><code>vq = interp1(v,xq,method)</code> 指定备选插值方法中的任意一种，并使用默认样本点。</p><p><code>vq = interp1(v,xq,method,extrapolation)</code> 指定外插策略，并使用默认样本点。</p><p><code>pp = interp1(x,v,method,&#39;pp&#39;)</code> 使用 <code>method</code> 算法返回分段多项式形式的 v(x)。</p><p>根据需求确定的语法：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vq = interp1(x,v,xq,method)</span><br></pre></td></tr></table></figure><h1 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h1><p><strong>x</strong> :样本点****</p><p><strong>x</strong> :样本点，指定为一行或一列实数向量。<code>x</code> 中的值必须各不相同。<code>x</code> 的长度必须符合以下要求之一：</p><ul><li>如果 <code>v</code> 为向量，则 <code>length(x)</code> 必须等于 <code>length(v)</code>。</li><li>如果 <code>v</code> 为数组，则 <code>length(x)</code> 必须等于 <code>size(v,1)</code></li></ul><p><strong>V:样本值</strong></p><p>样本值，指定为实数/复数向量、矩阵或数组。如果 <code>v</code> 是矩阵或数组，则每列包含单独的一组一维值。</p><p>如果 <code>v</code> 包含复数，则 <code>interp1</code> 将分别插入实部和虚部。</p><p><strong>xq: 查询点</strong></p><p>查询点，指定为实数标量、向量、矩阵或数组。</p><p><strong>method- 插值方法</strong></p><table><thead><tr><th align="left">方法</th><th align="left">说明</th><th align="left">连续性</th><th align="center">注释</th></tr></thead><tbody><tr><td align="left"><code>&#39;linear&#39;</code></td><td align="left">线性插值。在查询点插入的值基于各维中邻点网格点处数值的线性插值。这是默认插值方法。</td><td align="left">C0</td><td align="center">需要至少 2 个点。比最近邻点插值需要更多内存和计算时间。</td></tr><tr><td align="left"><code>&#39;nearest&#39;</code></td><td align="left">最近邻点插值。在查询点插入的值是距样本网格点最近的值。</td><td align="left">不连续</td><td align="center">需要至少 2 个点。最低内存要求最快计算时间</td></tr><tr><td align="left"><code>&#39;next&#39;</code></td><td align="left">下一个邻点插值。在查询点插入的值是下一个抽样网格点的值。</td><td align="left">不连续</td><td align="center">需要至少 2 个点。内存要求和计算时间与 <code>&#39;nearest&#39;</code> 相同</td></tr><tr><td align="left"><code>&#39;previous&#39;</code></td><td align="left">上一个邻点插值。在查询点插入的值是上一个抽样网格点的值。</td><td align="left">不连续</td><td align="center">需要至少 2 个点。内存要求和计算时间与 <code>&#39;nearest&#39;</code> 相同</td></tr><tr><td align="left"><code>&#39;pchip&#39;</code></td><td align="left">保形分段三次插值。在查询点插入的值基于邻点网格点处数值的保形分段三次插值。</td><td align="left">C1</td><td align="center">需要至少 4 个点。比 <code>&#39;linear&#39;</code> 需要更多内存和计算时间</td></tr><tr><td align="left"><code>&#39;cubic&#39;</code>注意<code>interp1(...,&#39;cubic&#39;)</code>的行为在以后的版本中会有所变化。在以后的版本中，此方法将执行三次卷积。</td><td align="left">与 <code>&#39;pchip&#39;</code> 相同。</td><td align="left">C1</td><td align="center">此方法目前返回与 <code>&#39;pchip&#39;</code> 相同的结果。</td></tr><tr><td align="left"><code>&#39;v5cubic&#39;</code></td><td align="left">用于 MATLAB® 5 的三次卷积。</td><td align="left">C1</td><td align="center">点之间的间距必须均匀。<code>&#39;cubic&#39;</code> 将在以后的版本中替代 <code>&#39;v5cubic&#39;</code>。</td></tr><tr><td align="left"><code>&#39;makima&#39;</code></td><td align="left">修改后的 Akima 三次 Hermite 插值。在查询点插入的值基于次数最大为 3 的多项式的分段函数。为防过冲，已改进 Akima 公式。</td><td align="left">C1</td><td align="center">需要至少 2 个点。产生的波动比 <code>&#39;spline&#39;</code> 小，但不像 <code>&#39;pchip&#39;</code> 那样急剧变平计算成本高于 <code>&#39;pchip&#39;</code>，但通常低于 <code>&#39;spline&#39;</code>内存要求与 <code>&#39;spline&#39;</code> 类似</td></tr><tr><td align="left"><code>&#39;spline&#39;</code></td><td align="left">使用非结终止条件的样条插值。在查询点插入的值基于各维中邻点网格点处数值的三次插值。</td><td align="left">C2</td><td align="center">需要至少 4 个点。比 <code>&#39;pchip&#39;</code> 需要更多内存和计算时间</td></tr></tbody></table><p>选择spline。参考文献：<strong>基于时频分析的心率变异性研究</strong></p><h2 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h2><p><strong>vq- 输出的插值</strong></p><p>插入的值，以标量、向量、矩阵或数组的形式返回。<code>vq</code> 的大小取决于 <code>v</code> 和 <code>xq</code> 的形状。</p><table><thead><tr><th align="left">v 的形状</th><th align="left">xq 的形状</th><th align="left">Vq 的大小</th><th align="center">示例</th></tr></thead><tbody><tr><td align="left">向量</td><td align="left">向量</td><td align="left"><code>size(xq)</code></td><td align="center">如果 <code>size(v) = [1 100]</code> 且 <code>size(xq) = [1 500]</code>， 则 <code>size(vq) = [1 500]</code>。</td></tr><tr><td align="left">向量</td><td align="left">矩阵  或 N 维数组</td><td align="left"><code>size(xq)</code></td><td align="center">如果 <code>size(v) = [1 100]</code> 且 <code>size(xq) = [50 30]</code>， 则 <code>size(vq) = [50 30]</code>。</td></tr><tr><td align="left">矩阵  或 N 维数组</td><td align="left">向量</td><td align="left"><code>[length(xq) size(v,2),...,size(v,n)]</code></td><td align="center">如果 <code>size(v) = [100 3]</code> 且 <code>size(xq) = [1 500]</code>， 则 <code>size(vq) = [500 3]</code>。</td></tr><tr><td align="left">矩阵  或 N 维数组</td><td align="left">矩阵  或 N 维数组</td><td align="left"><code>[size(xq,1),...,size(xq,n),... size(v,2),...,size(v,m)]</code></td><td align="center">如果 <code>size(v) = [4 5 6]</code> 且 <code>size(xq) = [2 3 7]</code>， 则 <code>size(vq) = [2 3 7 5 6]</code>。</td></tr></tbody></table><p><a href="http://www.360doc.com/content/18/0201/11/12548572_726900990.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/18/0201/11/12548572_726900990.shtml</a></p><h2 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">load ekg.mat; <span class="comment">%读入ecg信号</span></span><br><span class="line"></span><br><span class="line">[map,r,delay]=pan_tompkin(ecg,fs,<span class="number">0</span>);<span class="comment">% 利用pan_tomkin算法找到R点</span></span><br><span class="line"></span><br><span class="line">[a,l]=<span class="built_in">size</span>(r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:l;</span><br><span class="line"></span><br><span class="line">t(<span class="built_in">i</span><span class="number">-1</span>)=r(<span class="built_in">i</span>)-r(<span class="built_in">i</span><span class="number">-1</span>); <span class="comment">%求出R-R间的时间值，即使HRV</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">x=r(<span class="number">2</span>:<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">y=interp1(x,t,r(<span class="number">2</span>):<span class="number">1</span>:r(<span class="number">19</span>),<span class="string">'spline'</span>); <span class="comment">%利用插值法求出以原ecg信号的采样率fs的拟合函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(y);<span class="built_in">hold</span> on,</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(r(<span class="number">2</span>:<span class="number">19</span>)-r(<span class="number">2</span>),t(<span class="number">1</span>:<span class="number">18</span>));</span><br></pre></td></tr></table></figure><h2 id="进行插值并实现重采样，代码如下："><a href="#进行插值并实现重采样，代码如下：" class="headerlink" title="进行插值并实现重采样，代码如下："></a>进行插值并实现重采样，代码如下：</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%对其进行三次样本插值</span></span><br><span class="line">sRR = interp1(locs(<span class="number">2</span>:<span class="built_in">length</span>(locs),<span class="number">1</span>),RR, locs(<span class="number">2</span>):<span class="number">1</span>:locs(<span class="built_in">length</span>(locs)), <span class="string">'spline'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%利用散点图将图像进行标记</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">plot</span>(sRR);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">scatter</span>(locs(<span class="number">2</span>:<span class="built_in">length</span>(locs),<span class="number">1</span>) - locs(<span class="number">2</span>),RR(<span class="number">1</span>:<span class="built_in">length</span>(locs)<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">%原来的采样率为250Hz,进行重采样为2.4Hz，%输出为等间隔的数据信号</span></span><br><span class="line">VRR = resample(sRR, <span class="number">720</span>, <span class="number">74651</span>);</span><br><span class="line">VRR = VRR';</span><br><span class="line">Fs = <span class="number">2.4</span>;</span><br><span class="line">N_RR = <span class="built_in">length</span>(VRR);<span class="comment">%采样数</span></span><br><span class="line">fen1 = N_RR / (<span class="number">60</span> * Fs);</span><br><span class="line">m = <span class="number">1</span> : N_RR;</span><br><span class="line">t = m / Fs;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">plot</span>(t, VRR);</span><br><span class="line"></span><br><span class="line"><span class="comment">%对数据进行切片30S</span></span><br><span class="line">XRR = [];</span><br><span class="line"><span class="built_in">i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt;= <span class="number">10</span></span><br><span class="line"><span class="built_in">j</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">j</span> &lt;= <span class="number">72</span></span><br><span class="line">        XRR(<span class="built_in">j</span>, <span class="built_in">i</span>) = VRR(<span class="built_in">j</span> * <span class="built_in">i</span>, <span class="number">1</span>); </span><br><span class="line">        <span class="built_in">j</span> = <span class="built_in">j</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> +<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576660259221&di=127d3ef16eaff007d35877ac99af1c4a&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201811%2F03%2F20181103144533_neboc.thumb.700_0.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Matlab中的插值函数&quot;&gt;&lt;a href=&quot;#Matlab中的插值函数&quot; class=&quot;headerlink&quot; title=&quot;Matlab中的插值函数&quot;&gt;&lt;/a&gt;Matlab中的插值函数&lt;/h1&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;
      
    
    </summary>
    
    
      <category term="-工作 -matlab" scheme="https://esyyes.github.io/categories/%E5%B7%A5%E4%BD%9C-matlab/"/>
    
    
  </entry>
  
  <entry>
    <title>matlab中的重采样</title>
    <link href="https://esyyes.github.io/2019/12/17/matlab/matlab%E4%B8%AD%E7%9A%84%E9%87%8D%E9%87%87%E6%A0%B7/"/>
    <id>https://esyyes.github.io/2019/12/17/matlab/matlab%E4%B8%AD%E7%9A%84%E9%87%8D%E9%87%87%E6%A0%B7/</id>
    <published>2019-12-17T06:14:28.000Z</published>
    <updated>2019-12-17T06:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28732503&auto=1&height=66"></iframe>## Matlab中的重采样<p>选取3条插值重采样</p><p>重采样函数Resample：将统一或非统一数据重新采样为新的固定速率</p><p>语法：</p><p>y = resample(x, p, q)</p><p>y = resample(x, tx, __, method)</p><p>指定插值方法以及该组中以前语法中的任何参数。内插方法可以是<code>&#39;linear&#39;</code>，<code>&#39;pchip&#39;</code>，或<code>&#39;spline&#39;</code>。</p><p><strong>注：</strong>  如果<code>x</code>没有变化缓慢，可以考虑使用<a href="https://ww2.mathworks.cn/help/matlab/ref/interp1.html" target="_blank" rel="noopener"><code>interp1</code></a>与<code>&#39;pchip&#39;</code>插值方法。</p><h2 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h2><p>输入信号，指定为矢量或矩阵。如果<code>x</code>是矩阵，则将其列视为独立通道。<code>x</code>可以包含<code>NaN</code>。<code>NaN</code>将s视为丢失的数据，并从重采样中排除。double</p><p>p, q:重采样因子，指定为正整数。如需要原采样频率的1/5,即p=1,q=5</p><h3 id="n—-相邻词号-10（默认）-正整数"><a href="#n—-相邻词号-10（默认）-正整数" class="headerlink" title="n— 相邻词号 10（默认）| 正整数"></a><code>n</code>— 相邻词号 10（默认）| 正整数</h3><p>邻居项号，指定为正整数。如果<code>n</code> = 0，则执行最近邻插值。抗混叠FIR滤波器的长度与成正比。较大的值提供更好的精度，但要花费更多的计算时间。<code>resample``n``n</code></p><p><strong>资料类型：</strong> <code>double</code></p><h3 id="Kaiser窗口5的-Shape参数（默认）-正实标量"><a href="#Kaiser窗口5的-Shape参数（默认）-正实标量" class="headerlink" title="Kaiser窗口5的 Shape参数（默认）| 正实标量"></a>Kaiser窗口5的 Shape参数（默认）| 正实标量</h3><p>Kaiser窗口的Shape参数，指定为正实标量。增大<code>beta</code>加宽用于设计抗混叠滤波器的窗口的主瓣，并减小窗口旁瓣的幅度。</p><p><strong>资料类型：</strong> `double</p><h3 id="b—-FIR滤波器系数-矢量"><a href="#b—-FIR滤波器系数-矢量" class="headerlink" title="b— FIR滤波器系数 矢量"></a><code>b</code>— FIR滤波器系数 矢量</h3><p>FIR滤波器系数，指定为矢量。默认情况下，使用Kaiser窗口设计过滤器。补偿延迟时，假定具有奇数长度和线性相位。<code>resample</code><a href="https://ww2.mathworks.cn/help/signal/ref/firls.html" target="_blank" rel="noopener"><code>firls</code></a><code>resample``b</code></p><p><strong>示例：</strong><code>fir1(4,0.5)</code>指定一个四阶低通滤波器，其归一化截止频率为0.5πrad /样本。</p><p><strong>资料类型：</strong> <code>double</code></p><h3 id="tx—-时间瞬间-非负实矢量-datetime数组"><a href="#tx—-时间瞬间-非负实矢量-datetime数组" class="headerlink" title="tx— 时间瞬间 非负实矢量 | datetime数组"></a><code>tx</code>— 时间瞬间 非负实矢量 | <code>datetime</code>数组</h3><p>时间瞬间，指定为非负实向量或<code>datetime</code>数组。<code>tx</code>必须单调增加，但不必均匀间隔。<code>tx</code>可以包含<code>NaN</code>或<code>NaT</code>。这些值被视为丢失的数据，并从重新采样中排除。</p><p><strong>数据类型：</strong><code>double</code> |<code>datetime</code></p><h3 id="fs—-采样率-正标量"><a href="#fs—-采样率-正标量" class="headerlink" title="fs— 采样率 正标量"></a><code>fs</code>— 采样率 正标量</h3><p>采样率，指定为正标量。采样率是每单位时间的采样数。如果时间单位是秒，则采样率以Hz为单位。</p><p><strong>资料类型：</strong> <code>double</code></p><h3 id="method—-插值方法-39-linear-39-（默认）-39-pchip-39-39-spline-39"><a href="#method—-插值方法-39-linear-39-（默认）-39-pchip-39-39-spline-39" class="headerlink" title="method— 插值方法 &#39;linear&#39;（默认）| &#39;pchip&#39;|&#39;spline&#39;"></a><code>method</code>— 插值方法 <code>&#39;linear&#39;</code>（默认）| <code>&#39;pchip&#39;</code>|<code>&#39;spline&#39;</code></h3><p>插值方法，规定为一个<code>&#39;linear&#39;</code>，<code>&#39;pchip&#39;</code>或<code>&#39;spline&#39;</code>：</p><ul><li><code>&#39;linear&#39;</code> - 线性插值。</li><li><code>&#39;pchip&#39;</code> —保形分段三次插值。</li><li><code>&#39;spline&#39;</code> —使用非终止条件进行样条插值。</li></ul><h2 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h2><h3 id="y—-重采样的信号-向量-矩阵"><a href="#y—-重采样的信号-向量-矩阵" class="headerlink" title="y— 重采样的信号 向量| 矩阵"></a><code>y</code>— 重采样的信号 向量| 矩阵</h3><p>重新采样的信号，以向量或矩阵形式返回。如果<a href="https://ww2.mathworks.cn/help/signal/ref/resample.html?searchHighlight=resample&s_tid=doc_srchtitle#bumhz33-x" target="_blank" rel="noopener"><code>x</code></a>是的长度的信号<em>Ñ</em>并指定<a href="https://ww2.mathworks.cn/help/signal/ref/resample.html?searchHighlight=resample&s_tid=doc_srchtitle#bumhz33-pq" target="_blank" rel="noopener"><code>p</code></a>和 <a href="https://ww2.mathworks.cn/help/signal/ref/resample.html?searchHighlight=resample&s_tid=doc_srchtitle#bumhz33-pq" target="_blank" rel="noopener"><code>q</code></a>，然后<code>y</code>是长度⌈ <em>Ñ</em> × <code>p</code>/ <code>q</code>⌉。</p><h3 id="b—-FIR滤波器系数-矢量-1"><a href="#b—-FIR滤波器系数-矢量-1" class="headerlink" title="b— FIR滤波器系数 矢量"></a><code>b</code>— FIR滤波器系数 矢量</h3><p>FIR滤波器系数，以向量形式返回。</p><h3 id="ty—输出瞬间-非负实矢量"><a href="#ty—输出瞬间-非负实矢量" class="headerlink" title="ty—输出瞬间 非负实矢量"></a><code>ty</code>—输出瞬间 非负实矢量</h3><p>输出瞬间，作为非负实向量返回。</p><p>需求：</p><p>1.将信号采样为2Hz</p><p>2.用3次插值</p><p>3.等间隔</p><p>method: “pchip”三次插值</p><p>是先插值，再重采样！！！！！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=2873
      
    
    </summary>
    
    
      <category term="-工作 -matlab" scheme="https://esyyes.github.io/categories/%E5%B7%A5%E4%BD%9C-matlab/"/>
    
    
      <category term="-malab -毕业" scheme="https://esyyes.github.io/tags/malab-%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>心率变异性</title>
    <link href="https://esyyes.github.io/2019/12/16/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/%E5%BF%83%E7%8E%87%E5%8F%98%E5%BC%82%E6%80%A7/"/>
    <id>https://esyyes.github.io/2019/12/16/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/%E5%BF%83%E7%8E%87%E5%8F%98%E5%BC%82%E6%80%A7/</id>
    <published>2019-12-16T13:31:31.000Z</published>
    <updated>2019-12-16T13:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="心率变异性"><a href="#心率变异性" class="headerlink" title="心率变异性"></a>心率变异性</h1><p><strong>心率变异性(heart rate variability, HRV)</strong>,即指连续<strong>两次心跳时间间隔的微小变化</strong>，HRV 产生于自主神经系统（Autonomic Nervous System  ，ANS）对心脏窦房结的调制，使得心搏间期一般存在几十毫秒的差异或波动，HRV 是了解 ANS 状态的有用信号，心率（Heart Rate, HR）的正常变异是由于心脏和循环系统的自主神经调节。</p><p>目前，HRV 分析方法主要分为三类，即<strong>时域分析法、频域分析法和非线性分析法</strong>。其中，时域分析和频域分析法是线性分析，计算简单且各项指标的含义明确。</p><p><strong>时域分析法</strong>是基于统计学原理来量化 <strong>RR 间期序列</strong>以及心率序列的变化差异，主要是计算各项统计指标。 </p><p><strong>频域分析法</strong>是将 <strong>RR 间期序列</strong>通过傅里叶变换或小波变换的方法由时域转换到频率域上，计算各频段的频谱功率。频域分析法通常采用快速傅里叶变换法(FFT)或小波变换来计算 HRV 的功率谱密度及各频段的频谱功率。</p><p>文献中常用的方法是试图使用从<strong>混沌理论或分形过程</strong>得出的<strong>非线性</strong>统计指标来量化心率的复杂性，如<strong><em>去趋势波动分析</em>、Poincare 散点图、李雅普诺夫指数、相关维度、近似熵、样本熵、多尺度熵、复杂度</strong>等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;心率变异性&quot;&gt;&lt;a href=&quot;#心率变异性&quot; class=&quot;headerlink&quot; title=&quot;心率变异性&quot;&gt;&lt;/a&gt;心率变异性&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;心率变异性(heart rate variability, HRV)&lt;/strong&gt;,即指连续&lt;s
      
    
    </summary>
    
    
      <category term="-工作" scheme="https://esyyes.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>matplotlib图像绘制学习</title>
    <link href="https://esyyes.github.io/2019/12/10/python/matplotlib%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2019/12/10/python/matplotlib%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-10T14:37:17.000Z</published>
    <updated>2019-12-10T14:37:17.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2019/12/10</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标名称图像绘制还有标题 </span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">x1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y1 = [<span class="number">15</span>, <span class="number">17</span>, <span class="number">14</span>]</span><br><span class="line"><span class="comment"># 定义线段的名字可以在后面加label=‘’，即为legend效果</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y, label=<span class="string">'First Line'</span>)</span><br><span class="line">plt.plot(x1, y1, label=<span class="string">'Second Line'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'plot xnumber'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'plot ynumber'</span>)</span><br><span class="line">plt.title(<span class="string">'plot tu\ncheck it out'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>绘制图像，同理在python中bar是直方图</p><p>加颜色：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, label=<span class="string">'First Line'</span>, color=<span class="string">'r'</span>)</span><br><span class="line">plt.plot(x1, y1, label=<span class="string">'Second Line'</span>, color=<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><p>在pycharm中还是直接运行，当需要查看变量时，点击下面的Python Console,可在里面查看变量值。</p><p>点击run file in console,即可运行到console中，可查看变量。</p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575301201485&di=45041ef6a8b44ba8808313a156dda62f&imgtype=0&src=http%3A%2F%2Fpic.downcc.com%2Fupload%2F2015-8%2F2015824101012.jpg" alt="嘤嘤嘤"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=412327101&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>升级conda</title>
    <link href="https://esyyes.github.io/2019/12/10/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/%E5%8D%87%E7%BA%A7conda/"/>
    <id>https://esyyes.github.io/2019/12/10/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/%E5%8D%87%E7%BA%A7conda/</id>
    <published>2019-12-10T02:54:05.000Z</published>
    <updated>2019-12-10T02:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-conda-软件包升级"><a href="#python-conda-软件包升级" class="headerlink" title="python conda 软件包升级"></a>python conda 软件包升级</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=40915694&auto=1&height=66"></iframe>conda:<p>运行Anaconda Prompt</p><ol><li>升级conda(升级Anaconda前需要先升级conda)：<strong>conda update conda</strong> </li><li>升级anaconda：conda update anaconda </li><li>升级spyder：conda update spyder</li><li>更新所有包：<strong>conda update –all</strong></li><li>安装包：conda install package</li><li>更新包：conda update package</li></ol><p>查询某个conda指令使用-h后缀，如conda update -h</p><p>因为是用Prcharm调用anaconda里面的python的库函数，一般情况下，升级python还有IPython即可</p><p>pip:</p><p>升级pip</p><p>python -m pip install –upgrade pip</p><p>pip升级包</p><p>pip install –upgrade 要升级的包名</p><p>Commands:<br>             install           安装包.<br>             uninstall          卸载包.<br>             freeze           按着一定格式输出已安装包列表<br>             list              列出已安装包.<br>             show            显示包详细信息.<br>             search           搜索包，类似yum里的search.<br>             wheel            Buildwheelsfromyourrequirements.<br>             zip              不推荐.Zipindividualpackages.<br>            unzip            不推荐.Unzipindividualpackages.<br>            bundle           不推荐.Createpybundles.<br>             help             当前帮助.</p><p>pip list –outdate 查看可以升级的包</p><p>总结：</p><p>我也想要小爱心点击效果</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575956998200&di=3ce4c2ff26bc042c4ad38b8c2d59fccc&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201811%2F03%2F20181103013454_fjdom.jpg" alt="jiujiu"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-conda-软件包升级&quot;&gt;&lt;a href=&quot;#python-conda-软件包升级&quot; class=&quot;headerlink&quot; title=&quot;python conda 软件包升级&quot;&gt;&lt;/a&gt;python conda 软件包升级&lt;/h1&gt;&lt;iframe f
      
    
    </summary>
    
    
      <category term="-升级conda" scheme="https://esyyes.github.io/categories/%E5%8D%87%E7%BA%A7conda/"/>
    
    
      <category term="-python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>LV-2</title>
    <link href="https://esyyes.github.io/2019/12/08/python/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%97%E8%A1%A8/"/>
    <id>https://esyyes.github.io/2019/12/08/python/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%97%E8%A1%A8/</id>
    <published>2019-12-08T13:00:32.000Z</published>
    <updated>2019-12-08T13:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=22705492&auto=1&height=66"></iframe># 转移程序时遇到的问题<h2 id="1-列表只提取一部分数据：即切片"><a href="#1-列表只提取一部分数据：即切片" class="headerlink" title="1.列表只提取一部分数据：即切片"></a>1.列表只提取一部分数据：即切片</h2><p>序列[开始位置下标:结束位置下标:步长]</p><blockquote><p>注意</p></blockquote><ol><li><p>不包含结束位置下标对应的数据， 正负整数均可；</p></li><li><p>步长是选取间隔，正负整数均可，默认步长为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"abcdefg"</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line">print(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line">print(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line">print(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line">print(name[:<span class="number">-1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line">print(name[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># def</span></span><br><span class="line">print(name[::<span class="number">-1</span>])  <span class="comment"># gfedcba</span></span><br></pre></td></tr></table></figure><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li><p>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</p><p>语法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote></li></ol><ul><li>下标<ul><li>计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li>切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列名[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>find()</li><li>index()</li></ul></li></ul><p>python切片，一切取单个值，即data[i]下标即可，可用负数查找</p><p>切取完整的对象：data[:],从左往右，data[::],从左往右，data[::-1],从右往左</p><p>data[1:6],数值即为12345,左闭右开，</p><h2 id="2-列表进行倒置"><a href="#2-列表进行倒置" class="headerlink" title="2.列表进行倒置"></a>2.列表进行倒置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据进行转置ecg = ecg.transpose()</span></span><br></pre></td></tr></table></figure><p>并没有把行数据转换为列数据</p><p>python中的行数据和列数据的形式？感觉没啥用</p><p>一直觉得图错了，原来是在列表查找时设置的是data[1]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找data字典中的valkey值</span></span><br><span class="line">data = data[<span class="string">'val'</span>]</span><br><span class="line"><span class="comment"># 读取第一个列表</span></span><br><span class="line">data = data[<span class="number">0</span>]</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>读取的是列表的第二个，导致图像一直错误！！！</p><p>(～￣(OO)￣)ブ</p><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1.列表"></a>1.列表</h2><h3 id="1-1列表的格式"><a href="#1-1列表的格式" class="headerlink" title="1.1列表的格式"></a>1.1列表的格式</h3><p>[数据1, 数据2, 数据3, 数据4……]</p><p>列表可以一次性存储多个数据，且可以为不同数据类型。</p><p>1.列表的行和列的区别？</p><p>2.列表中的行绘制和列绘制的区别</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575957107705&di=c5ac892ff543bd0c3ca943c91073a4ce&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201811%2F03%2F20181103013451_varba.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=2270
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matlab中的function函数</title>
    <link href="https://esyyes.github.io/2019/12/04/matlab/matlab%E4%B8%AD%E7%9A%84function%E5%87%BD%E6%95%B0/"/>
    <id>https://esyyes.github.io/2019/12/04/matlab/matlab%E4%B8%AD%E7%9A%84function%E5%87%BD%E6%95%B0/</id>
    <published>2019-12-04T08:46:53.000Z</published>
    <updated>2019-12-04T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matlab中的function函数"><a href="#matlab中的function函数" class="headerlink" title="matlab中的function函数"></a>matlab中的function函数</h1><h1 id="1-function函数在matlab中的构建"><a href="#1-function函数在matlab中的构建" class="headerlink" title="1.function函数在matlab中的构建"></a>1.function函数在matlab中的构建</h1><p><strong>funciton:</strong> 声明函数名称、输入和输出</p><p>在matlab中，新建 - 函数，即为一个函数样本。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[outputArg1,outputArg2]</span> = <span class="title">untitled2</span><span class="params">(inputArg1,inputArg2)</span></span></span><br><span class="line"><span class="comment">%UNTITLED2 此处显示有关此函数的摘要</span></span><br><span class="line"><span class="comment">%   此处显示详细说明</span></span><br><span class="line">outputArg1 = inputArg1;</span><br><span class="line">outputArg2 = inputArg2;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[outputArg1,outputArg2]</span> = <span class="title">untitled2</span><span class="params">(inputArg1,inputArg2)</span></span></span><br></pre></td></tr></table></figure><p>声明名为 untitled2 的函数,即文件的取名<strong>封装名</strong>，此声明语句必须是函数的<strong>第一个可执行代码行</strong>。有效的函数名称以<strong>字母字符</strong>开头，并且可以包含<strong>字母、数字或下划线</strong>。</p><p>可以将函数保存在以下位置：</p><ol><li>只包含<strong>函数定义的函数文件</strong>中。<strong>文件的名称应与文件中其函数的名称一致。</strong></li><li>包含命令和函数定义的脚本文件中。<strong>函数必须位于该文件的末尾</strong>。<strong>脚本文件不能与文件中的函数具有相同</strong>的名称。R2016b 或更高版本的脚本中支持函数。</li></ol><p>文件可以包含多个局部函数或嵌套函数。为提高可读性，可使用 <strong>end</strong>关键字来表示文件中每个函数的末尾。以下情况下需要<strong>end关键字</strong>:</p><ol><li>文件中有任意函数包含<strong>嵌套函数</strong>。</li><li>该函数是函数文件中的<strong>局部函数</strong>，并且文件中有局部函数使用 <strong>end</strong>关键字。</li><li>该函数是<strong>脚本文件</strong>内的<strong>局部函数</strong>。</li></ol><h2 id="2-构建一个多输入，多输出的函数"><a href="#2-构建一个多输入，多输出的函数" class="headerlink" title="2.构建一个多输入，多输出的函数"></a>2.构建一个多输入，多输出的函数</h2><p>输入： a b</p><p>输出： jia jie cheng chu</p><p>函数命名为： jibenyunsuan</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[jia, jian, cheng, chu]</span> = <span class="title">jibenyunsuan</span><span class="params">(a, b)</span></span></span><br><span class="line"><span class="comment">%jibenyunsuan 此处显示有关此函数的摘要:</span></span><br><span class="line"><span class="comment">%   完成函数的加减乘除运算</span></span><br><span class="line">jia = a + b;</span><br><span class="line">jian = a - b;</span><br><span class="line">cheng = a * b;</span><br><span class="line">chu = a / b; </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>函数名字最好跟文件名字一样好找，输出结果也最好能直接好理解的；</p><p>在别的文件夹下运算：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">60</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line">[jia, jian, cheng, chu] = jibenyunsuan(a, b)；</span><br></pre></td></tr></table></figure><p>直接调用函数即可，输出的前面最好按照好理解的方式定义名字。</p><p><strong>前面的命名是否可更改</strong>？</p><p><strong>可以进行</strong>更改，前面的命名是按照自我的定义，是输出，自己改动，前面的function里面的输出定义项也会相继改动。</p><p>主函数只能有一个，其余的函数均为子函数。</p><h2 id="3-构建一个循环的函数"><a href="#3-构建一个循环的函数" class="headerlink" title="3.构建一个循环的函数"></a>3.构建一个循环的函数</h2><p>构建一个NN50特征</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[NN50q, NN50h, PNN50q, PNN50h]</span> = <span class="title">NN50tezheng</span><span class="params">(a)</span></span></span><br><span class="line"><span class="comment">%UNTITLED5 此处显示有关此函数的摘要</span></span><br><span class="line"><span class="comment">%   相邻RR间期大于50ms的RR期数量，NN50q前面大于后面,NN50后面大于前面</span></span><br><span class="line"><span class="comment">%   PNN50为分别占总的RR间期的百分比</span></span><br><span class="line"><span class="built_in">i</span> = <span class="number">1</span>;</span><br><span class="line">NN50q = <span class="number">0</span>;</span><br><span class="line">NN50h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">i</span> &lt; <span class="built_in">length</span>(a)</span><br><span class="line">    <span class="keyword">if</span> a(<span class="built_in">i</span>) - a(<span class="built_in">i</span>+<span class="number">1</span>) &gt; <span class="number">50</span></span><br><span class="line">        NN50q = NN50q + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">elseif</span>  a(<span class="built_in">i</span>+<span class="number">1</span>) - a(<span class="built_in">i</span>) &gt; <span class="number">50</span></span><br><span class="line">        NN50h = NN50h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">i</span> = <span class="built_in">i</span> +<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PNN50q = NN50q / <span class="built_in">length</span>(a);</span><br><span class="line">PNN50h = NN50h / <span class="built_in">length</span>(a);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="/images/jia.jpg" alt="12"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;matlab中的function函数&quot;&gt;&lt;a href=&quot;#matlab中的function函数&quot; class=&quot;headerlink&quot; title=&quot;matlab中的function函数&quot;&gt;&lt;/a&gt;matlab中的function函数&lt;/h1&gt;&lt;h1 id=&quot;1
      
    
    </summary>
    
    
      <category term="-matlab -工作" scheme="https://esyyes.github.io/categories/matlab-%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="-malab -毕业" scheme="https://esyyes.github.io/tags/malab-%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>hexo学习</title>
    <link href="https://esyyes.github.io/2019/12/03/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/hexo%E5%AD%A6%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2019/12/03/%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6/hexo%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-03T05:42:05.000Z</published>
    <updated>2019-12-03T05:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo学习"><a href="#hexo学习" class="headerlink" title="hexo学习"></a>hexo学习</h1><h2 id="1-hexo书写"><a href="#1-hexo书写" class="headerlink" title="1.hexo书写"></a>1.hexo书写</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> -分类<span class="number">1</span></span><br><span class="line"> -分类<span class="number">2</span></span><br><span class="line">tags:</span><br><span class="line"> -标签<span class="number">1</span></span><br><span class="line"> -标签<span class="number">2</span></span><br></pre></td></tr></table></figure><p>按照上述方式进行分类和标签，一直没进行标签和分类的整理。</p><h3 id="1-1-hexo的字体、颜色、字号、位置"><a href="#1-1-hexo的字体、颜色、字号、位置" class="headerlink" title="1.1 hexo的字体、颜色、字号、位置"></a>1.1 hexo的字体、颜色、字号、位置</h3><p>p align=”right”&gt;font face=”微软雅黑” color=”red” size=”28”&gt;字体颜色大小</font></p><p align="right"><font face="微软雅黑" color="red" size="28">字体颜色大小</font><h2 id="2-配置hexo里面的插入图片"><a href="#2-配置hexo里面的插入图片" class="headerlink" title="2.配置hexo里面的插入图片"></a>2.配置hexo里面的插入图片</h2><h3 id="2-1插入本地图片"><a href="#2-1插入本地图片" class="headerlink" title="2.1插入本地图片"></a>2.1插入本地图片</h3><p>方式1：</p><p>必须在source文件夹下建立一个空的文件，其实必须是/斜杠才能读取地址</p><p>格式为![] (/images/图片名字)【】里面的内容为取名</p><p>可以img但是要改方向</p><p>方式2：</p><p>使用img src=”” alt=”” 还是跟上面的加入/images/图片名字。alt= “”来命名</p><p>也可以直接插入但是要换斜杠的方向</p><p><img src="/images/sja.jpg" alt="z"></p><p><img src="/images/SAD.jpg" alt="s"></p><p><img src="/images/sdaff.jpg" alt="d"></p><img src="/images/sja.jpg" alt="z"><h3 id="2-2插入网络图片"><a href="#2-2插入网络图片" class="headerlink" title="2.2插入网络图片"></a>2.2插入网络图片</h3><p>在网上找到图片，直接复制图片的地址，</p><p>使用img src=”加入链接” alt=””    alt= “”来命名</p><img src="https://i0.hdslb.com/bfs/album/e47e84ca42b456b308e2d262d2e9c5d56e447634.jpg@1036w_1e_1c.jpg" alt="z"><img src="http://cdn.duitang.com/uploads/item/201508/16/20150816171059_uc4PV.thumb.700_0.jpeg" alt="z"><p><img src="/images/sa.png" alt="sa"></p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1575301201485&di=45041ef6a8b44ba8808313a156dda62f&imgtype=0&src=http%3A%2F%2Fpic.downcc.com%2Fupload%2F2015-8%2F2015824101012.jpg" alt="嘤嘤嘤"><p><img src="http://dm.kantsuu.com/UploadFiles_4524/201609/20160929100837335.jpg" alt=""></p><p>直接在![](后面加链接</p><h2 id="3-在hexo里面的插入视频"><a href="#3-在hexo里面的插入视频" class="headerlink" title="3.在hexo里面的插入视频"></a>3.在hexo里面的插入视频</h2><p>先上传，在网页视频上，在通过<strong>分享视频</strong>，点击分享，找到<strong>嵌入代码</strong>，复制粘贴即可。</p><iframe src="//player.bilibili.com/player.html?aid=23207325&cid=38634561&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>## 4.在hexo里面插入音频<p>在网易云里面进行插入。</p><p>首先：选择插入网页版；</p><p>？？？？由于版权保护无法生成什么鬼</p><p>解决办法<a href="https://www.shknn.com/music-163-gedan.html" target="_blank" rel="noopener">https://www.shknn.com/music-163-gedan.html</a></p><p>1.点开歌单，找到生成外链，右击找到检查；</p><p>2.接着找到生成外链播放器这段文字直接双击复制前面/outchain/0/2945719972/，就是外链的复制id</p><p>3.然后直接将/outchain/0/2945719972/放到网站后面直接打开即可</p><p><a href="https://music.163.com/" target="_blank" rel="noopener">https://music.163.com/</a> #/outchain/0/2945719972/</p><p>歌单全部生成外链，单独的直接点开生成即可。选择直接播放，就可以每次打开就有一首。</p><p>直接复制代码进来即可，跟视频放入一样。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=2945719972&auto=1&height=430"></iframe>## 5.更改博客背景音乐<ol><li>打开主题下的_config.yml文件，有mp3歌曲</li><li>该歌曲是与直接插入不同，是通过外链转换为mp3进行切换</li><li>在网易云找到想听的歌，通过<a href="https://link.hhtjim.com/网站将其转换为mp3文件，复制进行即可" target="_blank" rel="noopener">https://link.hhtjim.com/网站将其转换为mp3文件，复制进行即可</a></li></ol><h2 id="6-默认文章封面图的切换"><a href="#6-默认文章封面图的切换" class="headerlink" title="6.默认文章封面图的切换"></a>6.默认文章封面图的切换</h2><p>需求：发现每篇文章的封面图都为一样，想每篇换个封面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo学习&quot;&gt;&lt;a href=&quot;#hexo学习&quot; class=&quot;headerlink&quot; title=&quot;hexo学习&quot;&gt;&lt;/a&gt;hexo学习&lt;/h1&gt;&lt;h2 id=&quot;1-hexo书写&quot;&gt;&lt;a href=&quot;#1-hexo书写&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="-hexo完善" scheme="https://esyyes.github.io/categories/hexo%E5%AE%8C%E5%96%84/"/>
    
    
      <category term="-个人博客搭建" scheme="https://esyyes.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
