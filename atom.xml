<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESY</title>
  
  <subtitle>mengxin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://esyyes.github.io/"/>
  <updated>2020-06-09T02:48:46.000Z</updated>
  <id>https://esyyes.github.io/</id>
  
  <author>
    <name>esy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据预处理</title>
    <link href="https://esyyes.github.io/2020/06/09/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/06/09/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</id>
    <published>2020-06-09T02:48:46.000Z</published>
    <updated>2020-06-09T02:48:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>对特征数据进行预处理，首先进行缺省值插补，然后再进行标准化</p><h2 id="缺省值插补"><a href="#缺省值插补" class="headerlink" title="缺省值插补"></a>缺省值插补</h2><p>首先将inf数据转换为nan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将inf数据转换为nan</span></span><br><span class="line">df = data.replace([np.inf, -np.inf], np.nan)</span><br></pre></td></tr></table></figure><p>pd直接将空格转换为nan所以只需要将nan转换为均值中值等就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每一列缺失值的数量</span></span><br><span class="line">num = df.isnull().sum()</span><br></pre></td></tr></table></figure><p>采用均值插补</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)):</span><br><span class="line">    <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 就需要进行均值填充</span></span><br><span class="line">        values = df[df.keys()[i]].mean()</span><br><span class="line">        df[df.keys()[i]].fillna(value=values, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每一列数据量和数据类型</span></span><br><span class="line"><span class="comment"># df.info()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def fillna(</span></span><br><span class="line"><span class="comment">#         self,</span></span><br><span class="line"><span class="comment">#         value=None,</span></span><br><span class="line"><span class="comment">#         method=None,</span></span><br><span class="line"><span class="comment">#         axis=None,</span></span><br><span class="line"><span class="comment">#         inplace=False,</span></span><br><span class="line"><span class="comment">#         limit=None,</span></span><br><span class="line"><span class="comment">#         downcast=None,</span></span><br><span class="line"><span class="comment">#         **kwargs</span></span><br><span class="line"><span class="comment">#     ):</span></span><br><span class="line"><span class="comment">#         return super().fillna(</span></span><br><span class="line"><span class="comment">#             value=value,</span></span><br><span class="line"><span class="comment">#             method=method,</span></span><br><span class="line"><span class="comment">#             axis=axis,</span></span><br><span class="line"><span class="comment">#             inplace=inplace,</span></span><br><span class="line"><span class="comment">#             limit=limit,</span></span><br><span class="line"><span class="comment">#             downcast=downcast,</span></span><br><span class="line"><span class="comment">#             **kwargs</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://blog.csdn.net/qq_43542339/article/details/105098235?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(value = 30，inplace=True)</span></span><br><span class="line"><span class="comment"># # value = 30，用30填补空值</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].mean() 均值填充</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].median() 中位数填充</span></span><br><span class="line"><span class="comment"># # value = df.Mer_min_distance.mode()[0]  众数填充</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(method = 'pad',inplace=True)</span></span><br><span class="line"><span class="comment"># method参数取值：&#123;‘pad’, ‘ffill’,‘backfill’, ‘bfill’, None&#125;，使用过程中因为对ipad很熟悉，故常常用 'pad’填充</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ‘pad’ or ‘ffill’ : 用前一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘backfill’ or ‘bfill’：用后一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘None’ or default : 默认采用固定值填充</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将缺省值值替换为nan</span></span><br><span class="line"><span class="comment"># 转换和均值，需要一个数据来进行参考，没办法直接进行运行，所以还是采用fillna进行</span></span><br><span class="line"><span class="comment"># imp = SimpleImputer(missing_values=np.nan, strategy='mean')</span></span><br><span class="line"><span class="comment"># data = imp.fit(df)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/9</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">对inf,nan数据采用均值插补</span></span><br><span class="line"><span class="string">缺省值插补，然后再进行z-score</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 缺失值插补</span></span><br><span class="line"><span class="comment"># from sklearn.impute import SimpleImputer</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">feature = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/features_data'</span> + <span class="string">'/slp'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺省值插补，采用均值插补</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.数据中有inf数据，将其转换为nan,然后用均值插补</span></span><br><span class="line"><span class="string">2.将nan和遗失数据用均值插补</span></span><br><span class="line"><span class="string"># 缺失值插补，用这个库</span></span><br><span class="line"><span class="string">from sklearn.impute import SimpleImputer</span></span><br><span class="line"><span class="string">SimpleImputer(add_indicator=False, copy=True, fill_value=None,</span></span><br><span class="line"><span class="string">              missing_values=nan, strategy='mean', verbose=0)</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">missing_values=nan可以用自己想要的填充  </span></span><br><span class="line"><span class="string">strategy='mean'    缺省值插补填充的内容：mean  median, most_frequent</span></span><br><span class="line"><span class="string">数据是连续型，用均值填充</span></span><br><span class="line"><span class="string">数据是分类型，用纵数填充</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用ctrl+tab再点击函数查看函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">预处理方法：</span></span><br><span class="line"><span class="string">https://blog.csdn.net/Bryan__/article/details/51228971</span></span><br><span class="line"><span class="string">https://blog.csdn.net/luanpeng825485697/article/details/79845629?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># Series和DataFrame都会自动把None转换成NaN 然后 运算的时候会把NaN当成0,直接进行了填充，然后首先将inf转换为nan就行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将inf数据转换为nan</span></span><br><span class="line">df = data.replace([np.inf, -np.inf], np.nan)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他意见自动填充为nan，空格缺省直接填充nan</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用fillna直接进行填充</span></span><br><span class="line"><span class="comment"># data.fillna()</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(value = 30，inplace=True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># df.fillna(value=, axis=1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每一列缺失值的数量</span></span><br><span class="line">num = df.isnull().sum()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)):</span><br><span class="line">    <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 就需要进行均值填充</span></span><br><span class="line">        values = df[df.keys()[i]].mean()</span><br><span class="line">        df[df.keys()[i]].fillna(value=values, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># z-score标准化</span></span><br><span class="line">std = preprocessing.scale(df)</span><br><span class="line">print(<span class="string">f'均值为：<span class="subst">&#123;std.mean()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'标准差为：<span class="subst">&#123;std.std()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列均值为：<span class="subst">&#123;std.mean(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列标准差为：<span class="subst">&#123;std.std(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每一列数据量和数据类型</span></span><br><span class="line"><span class="comment"># df.info()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def fillna(</span></span><br><span class="line"><span class="comment">#         self,</span></span><br><span class="line"><span class="comment">#         value=None,</span></span><br><span class="line"><span class="comment">#         method=None,</span></span><br><span class="line"><span class="comment">#         axis=None,</span></span><br><span class="line"><span class="comment">#         inplace=False,</span></span><br><span class="line"><span class="comment">#         limit=None,</span></span><br><span class="line"><span class="comment">#         downcast=None,</span></span><br><span class="line"><span class="comment">#         **kwargs</span></span><br><span class="line"><span class="comment">#     ):</span></span><br><span class="line"><span class="comment">#         return super().fillna(</span></span><br><span class="line"><span class="comment">#             value=value,</span></span><br><span class="line"><span class="comment">#             method=method,</span></span><br><span class="line"><span class="comment">#             axis=axis,</span></span><br><span class="line"><span class="comment">#             inplace=inplace,</span></span><br><span class="line"><span class="comment">#             limit=limit,</span></span><br><span class="line"><span class="comment">#             downcast=downcast,</span></span><br><span class="line"><span class="comment">#             **kwargs</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://blog.csdn.net/qq_43542339/article/details/105098235?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(value = 30，inplace=True)</span></span><br><span class="line"><span class="comment"># # value = 30，用30填补空值</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].mean() 均值填充</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].median() 中位数填充</span></span><br><span class="line"><span class="comment"># # value = df.Mer_min_distance.mode()[0]  众数填充</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(method = 'pad',inplace=True)</span></span><br><span class="line"><span class="comment"># method参数取值：&#123;‘pad’, ‘ffill’,‘backfill’, ‘bfill’, None&#125;，使用过程中因为对ipad很熟悉，故常常用 'pad’填充</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ‘pad’ or ‘ffill’ : 用前一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘backfill’ or ‘bfill’：用后一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘None’ or default : 默认采用固定值填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将缺省值值替换为nan</span></span><br><span class="line"><span class="comment"># 转换和均值，需要一个数据来进行参考，没办法直接进行运行，所以还是采用fillna进行</span></span><br><span class="line"><span class="comment"># imp = SimpleImputer(missing_values=np.nan, strategy='mean')</span></span><br><span class="line"><span class="comment"># data = imp.fit(df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 正则化，标准化</span></span><br></pre></td></tr></table></figure><h2 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># z-score标准化</span></span><br><span class="line">std = preprocessing.scale(df)</span><br><span class="line">print(<span class="string">f'均值为：<span class="subst">&#123;std.mean()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'标准差为：<span class="subst">&#123;std.std()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列均值为：<span class="subst">&#123;std.mean(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列标准差为：<span class="subst">&#123;std.std(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h2 id="函数形式版"><a href="#函数形式版" class="headerlink" title="函数形式版"></a>函数形式版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/9</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">均值插补缺省值</span></span><br><span class="line"><span class="string">z-score标准化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_pre</span><span class="params">(data)</span>:</span></span><br><span class="line">    df = data.replace([np.inf, -np.inf], np.nan)</span><br><span class="line">    num = df.isnull().sum()</span><br><span class="line">    [df[df.keys()[i]].fillna(value=df[df.keys()[i]].mean(), inplace=<span class="literal">True</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)) <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>]</span><br><span class="line">    df_scale = preprocessing.scale(df)</span><br><span class="line">    <span class="keyword">return</span> df_scale</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591682503590&di=e3acfbf739408b7c159ea65b9d13b665&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2018-05-30%2F5b0e3790a3f13.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据预处理&quot;&gt;&lt;a href=&quot;#数据预处理&quot; class=&quot;headerlink&quot; title=&quot;数据预处理&quot;&gt;&lt;/a&gt;数据预处理&lt;/h1&gt;&lt;p&gt;对特征数据进行预处理，首先进行缺省值插补，然后再进行标准化&lt;/p&gt;
&lt;h2 id=&quot;缺省值插补&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>标签和特征长度处理</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/%E6%A0%87%E7%AD%BE%E5%92%8C%E7%89%B9%E5%BE%81%E9%95%BF%E5%BA%A6%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/%E6%A0%87%E7%AD%BE%E5%92%8C%E7%89%B9%E5%BE%81%E9%95%BF%E5%BA%A6%E5%A4%84%E7%90%86/</id>
    <published>2020-06-08T11:16:50.000Z</published>
    <updated>2020-06-08T11:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签和特征长度处理"><a href="#标签和特征长度处理" class="headerlink" title="标签和特征长度处理"></a>标签和特征长度处理</h1><p>在进行机器学习之前需要查看标签和特征的长度，判断是否相等，数据比标签少30s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">判断：</span></span><br><span class="line"><span class="string">读取注释和特征查看长度是否相等</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">    feature = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/features_data'</span> + <span class="string">'/slp'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">    note = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/note_data'</span> + <span class="string">'/%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(note)<span class="number">-1</span>, <span class="number">-1</span>:])</span><br><span class="line">    <span class="keyword">if</span> len(data) == len(tag):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'数据slp<span class="subst">&#123;i&#125;</span>不相等'</span>)</span><br><span class="line">        print(<span class="string">f'特征长度<span class="subst">&#123;len(data)&#125;</span>, 标签长度‘<span class="subst">&#123;len(tag)&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">f'检测完毕'</span>)</span><br></pre></td></tr></table></figure><h2 id="检测结果"><a href="#检测结果" class="headerlink" title="检测结果"></a>检测结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数据slp5不相等特征长度<span class="number">700</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp7不相等特征长度<span class="number">719</span>标签长度<span class="number">713</span></span><br><span class="line">数据slp8不相等特征长度<span class="number">719</span>标签长度<span class="number">693</span></span><br><span class="line">数据slp10不相等特征长度<span class="number">699</span>标签长度<span class="number">697</span></span><br><span class="line">数据slp14不相等特征长度<span class="number">479</span>标签长度<span class="number">457</span></span><br><span class="line">数据slp15不相等特征长度<span class="number">699</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp16不相等特征长度<span class="number">739</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp17不相等特征长度<span class="number">439</span>标签长度<span class="number">438</span></span><br><span class="line">检测完毕</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>slp5和slp15为slp03和slp60，只清除了AHI标签，没有清理睡眠标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line"><span class="comment"># test = input("请输入想读取的文件名： ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test = 'slp03'</span></span><br><span class="line">test = <span class="string">'slp60'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">            tag1.append(<span class="number">1</span>)</span><br><span class="line">            tag2.append(<span class="number">1</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">            tag1.append(<span class="number">2</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">            tag1.append(<span class="number">3</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">            tag1.append(<span class="number">4</span>)</span><br><span class="line">            tag2.append(<span class="number">3</span>)</span><br><span class="line">            tag3.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag1.append(<span class="number">5</span>)</span><br><span class="line">            tag2.append(<span class="number">4</span>)</span><br><span class="line">            tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="comment"># slp03</span></span><br><span class="line">    <span class="comment"># if 174 &lt; i &lt; 194:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:</span><br><span class="line">        <span class="comment"># slp60</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">                tag4.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tag4.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line">label4 = pd.DataFrame(tag4, columns=[<span class="string">'AHI'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3, label4], axis=<span class="number">1</span>)</span><br><span class="line">num = int(input(<span class="string">"输入保存的文件名： "</span>))</span><br><span class="line">label.to_excel(<span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><h2 id="再次检测"><a href="#再次检测" class="headerlink" title="再次检测"></a>再次检测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据slp7不相等特征长度<span class="number">719</span>标签长度<span class="number">713</span></span><br><span class="line">数据slp8不相等特征长度<span class="number">719</span>标签长度<span class="number">693</span></span><br><span class="line">数据slp10不相等特征长度<span class="number">699</span>标签长度<span class="number">697</span></span><br><span class="line">数据slp14不相等特征长度<span class="number">479</span>标签长度<span class="number">457</span></span><br><span class="line">数据slp16不相等特征长度<span class="number">739</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp17不相等特征长度<span class="number">439</span>标签长度<span class="number">438</span></span><br><span class="line">检测完毕</span><br></pre></td></tr></table></figure><h2 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h2><p>slp7即为slp14</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line"><span class="comment"># test = input("请输入想读取的文件名： ")</span></span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp14'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line">sample_min = annotation.sample.min()</span><br><span class="line">sample_max = annotation.sample.max()</span><br><span class="line">print(<span class="string">f'起始位置为<span class="subst">&#123;sample_min&#125;</span>, 终止位置为<span class="subst">&#123;sample_max&#125;</span>'</span>)</span><br><span class="line">起始位置为<span class="number">45000</span>, 终止位置为<span class="number">5392500</span></span><br></pre></td></tr></table></figure><p>slp8:slp16</p><p>起始位置为195000, 终止位置为5392500</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(<span class="number">195000</span>/record.fs/<span class="number">30</span>), int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br></pre></td></tr></table></figure><p>slp10:slp37</p><p>数据slp10不相等    特征长度699    标签长度697</p><p>起始位置为15000, 终止位置为5242500</p><p>slp14:slp59</p><p>起始位置为165000, 终止位置为3592500</p><p>slp16:slp61</p><p>数据slp16不相等    特征长度739    标签长度719</p><p>起始位置为150000, 终止位置为5542500</p><p>slp17:slp66</p><p>数据slp17不相等    特征长度439    标签长度438</p><p>起始位置为1, 终止位置为3285000</p><h2 id="数据检测完毕"><a href="#数据检测完毕" class="headerlink" title="数据检测完毕"></a>数据检测完毕</h2><p>以后5分钟的数据片段还是要经过这个处理，标签缺失</p><p><img src="http://img3.a0bi.com/upload/ttq/20150716/1437008701869.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标签和特征长度处理&quot;&gt;&lt;a href=&quot;#标签和特征长度处理&quot; class=&quot;headerlink&quot; title=&quot;标签和特征长度处理&quot;&gt;&lt;/a&gt;标签和特征长度处理&lt;/h1&gt;&lt;p&gt;在进行机器学习之前需要查看标签和特征的长度，判断是否相等，数据比标签少30s&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HRV的30s特征提取</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/HRV%E7%9A%8430s%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/HRV%E7%9A%8430s%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</id>
    <published>2020-06-08T09:50:09.000Z</published>
    <updated>2020-06-08T09:50:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HRV的30s特征提取"><a href="#HRV的30s特征提取" class="headerlink" title="HRV的30s特征提取"></a>HRV的30s特征提取</h1><p> slp03和slp60数据中有一段数据遗失了ecg——r,</p><p>slp03消除174-194之间的数据</p><p>slp60消除538 &lt; i &lt; 549之间的数据</p><p> 标签这一部分全是w，可以删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/2</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slp60数据到时需要加0.7或者其他左右，没有经过预处理后，就不会出现复数，所以peaks中就不需要abs，加起也好</span></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> peaks_time_features <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> frequency_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> HRV_interp1 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> nonliner_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> eliminate_outliers <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">test = input(<span class="string">'请输入文件名：'</span>)</span><br><span class="line"><span class="comment"># test = 'slp03'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line"></span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line">ecg_r_locs1 = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs, search_radius=search_radius,</span><br><span class="line">                                       smooth_window_size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ecg_r_locs异常点处理</span></span><br><span class="line">ecg_r_locs = eliminate(ecg_r_locs1)</span><br><span class="line"><span class="comment"># ecg_r_peaks峰值点获取</span></span><br><span class="line">ecg_r_peaks = [ecg_signal[int(ecg_r_locs[i])][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ecg_r_locs))]</span><br><span class="line"></span><br><span class="line">all_RR_30s = []</span><br><span class="line">all_locs_30s = []</span><br><span class="line">all_peaks_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">    RR_30s = []</span><br><span class="line">    locs_30s = []</span><br><span class="line">    peaks_30s = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">1</span>)):</span><br><span class="line">            locs_30s.append(ecg_r_locs[j])</span><br><span class="line">            RR_30s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">            peaks_30s.append(ecg_r_peaks[j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    RR_30s.pop()</span><br><span class="line">    all_RR_30s.append(RR_30s)</span><br><span class="line">    <span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br><span class="line">    all_locs_30s.append(locs_30s)</span><br><span class="line">    all_peaks_30s.append(peaks_30s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECG_R</span></span><br><span class="line">peaks_features = [peaks_time_feature(all_peaks_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_peaks_30s))]</span><br><span class="line"><span class="comment"># HRV</span></span><br><span class="line">hrv_time = [time_features(all_RR_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">hrv_freq = [getfreq(resample(hrv_interp1(all_locs_30s[i], all_RR_30s[i], <span class="number">1</span>), <span class="number">250</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">hrv_nonl = [non_linear(np.array(all_RR_30s[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">features = [peaks_features[i] + hrv_time[i] + hrv_freq[i] + hrv_nonl[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为excel</span></span><br><span class="line">feature = pd.DataFrame(features, columns=[<span class="string">'p_max'</span>, <span class="string">'p_min'</span>, <span class="string">'p_mean'</span>, <span class="string">'p_median'</span>, <span class="string">'p_SDNN'</span>, <span class="string">'p_var'</span>,</span><br><span class="line">                                          <span class="string">'p_Peaks'</span>, <span class="string">'p_RMSSD'</span>, <span class="string">'p_kurt'</span>, <span class="string">'p_skew'</span>, <span class="string">'p_wave_factor'</span>,</span><br><span class="line">                                          <span class="string">'p_peak_factor'</span>, <span class="string">'p_Impulse_factor'</span>, <span class="string">'p_Margin_factor'</span>, <span class="string">'p_RMS'</span>,</span><br><span class="line">                                          <span class="string">'R_mean'</span>, <span class="string">'R_SDNN'</span>, <span class="string">'R_SDSD'</span>, <span class="string">'NN50'</span>, <span class="string">'pNN50'</span>, <span class="string">'NN20'</span>, <span class="string">'pNN20'</span>, <span class="string">'R_RMSSD'</span>,</span><br><span class="line">                                          <span class="string">'R_median'</span>, <span class="string">'R_NUM'</span>, <span class="string">'R_CVSD'</span>, <span class="string">'R_CV'</span>, <span class="string">'HR_mean'</span>, <span class="string">'HR_max'</span>, <span class="string">'HR_min'</span>, <span class="string">'HR_std'</span>,</span><br><span class="line">                                          <span class="string">'LF'</span>, <span class="string">'HF'</span>, <span class="string">'LF_HF'</span>, <span class="string">'LFnu'</span>, <span class="string">'HFnu'</span>, <span class="string">'total'</span>, <span class="string">' VLF'</span>, <span class="string">'sd1'</span>, <span class="string">'sd2'</span>, <span class="string">'sd2/sd1'</span>,</span><br><span class="line">                                          <span class="string">'csi10'</span>, <span class="string">'cvi'</span>, <span class="string">'Modified_CSI10'</span>, <span class="string">'apen'</span>, <span class="string">'spen'</span>, <span class="string">'lle'</span>, <span class="string">'sampen'</span>])</span><br><span class="line">num = int(input(<span class="string">'请输入特征的名字:'</span>))</span><br><span class="line">feature.to_excel(<span class="string">'slp'</span> + <span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">all_peaks_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:slp60</span><br><span class="line">        <span class="number">174</span><span class="number">-194</span> slp03</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RR_30s = []</span><br><span class="line">        locs_30s = []</span><br><span class="line">        peaks_30s = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">1</span>)):</span><br><span class="line">                locs_30s.append(ecg_r_locs[j])</span><br><span class="line">                RR_30s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">                peaks_30s.append(ecg_r_peaks[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        RR_30s.pop()</span><br><span class="line">        all_RR_30s.append(RR_30s)</span><br><span class="line">        <span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br><span class="line">        all_locs_30s.append(locs_30s)</span><br><span class="line">        all_peaks_30s.append(peaks_30s)</span><br></pre></td></tr></table></figure><h2 id="消除异常点"><a href="#消除异常点" class="headerlink" title="消除异常点"></a>消除异常点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># RR间期获取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RR_rr</span><span class="params">(locs1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [locs1[i+<span class="number">1</span>]-locs1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(locs1) - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到19个RR间期的均值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MRR</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [np.mean(x[i:i+<span class="number">19</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">19</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消除过检</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Eliminate_check</span><span class="params">(locs1)</span>:</span></span><br><span class="line">    RR_lou = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    RR_locs_lou = []</span><br><span class="line">    RR = RR_rr(locs1)</span><br><span class="line">    mRR = MRR(RR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(RR)):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &lt; (<span class="number">0.55</span> * mRR[<span class="number">0</span>]):</span><br><span class="line">                RR2 = RR[i] + RR[i<span class="number">-1</span>]</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                RR_lou.pop(i - num)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                RR_locs_lou.pop(i - num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR2 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> i &gt; (len(RR) - <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> RR[i] &lt; (<span class="number">0.55</span> * mRR[len(mRR) - <span class="number">1</span>]):</span><br><span class="line">                RR2 = RR[i] + RR[i - <span class="number">1</span>]</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                RR_lou.pop(i - num)</span><br><span class="line">                RR_locs_lou.pop(i - num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR2 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &lt; (<span class="number">0.55</span> * mRR[i - <span class="number">10</span>]):</span><br><span class="line">                RR2 = RR[i] + RR[i - <span class="number">1</span>]</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line">                RR_lou.pop(i - num)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                RR_locs_lou.pop(i - num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR2 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        RR_lou.append(RR2)</span><br><span class="line">        RR_locs_lou.append(locs2)</span><br><span class="line">    RR_locs_lou.insert(<span class="number">0</span>, locs1[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> RR_locs_lou</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消除漏检</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Eliminate_LOW</span><span class="params">(locs)</span>:</span></span><br><span class="line">    locs1 = Eliminate_check(locs)</span><br><span class="line">    RR = RR_rr(locs1)</span><br><span class="line">    mRR = MRR(RR)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    RR_guo = []</span><br><span class="line">    RR_locs_guo = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(RR):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &gt; (<span class="number">1.55</span> * mRR[<span class="number">0</span>]):</span><br><span class="line">                m = int(round(RR[i] / mRR[<span class="number">0</span>]))</span><br><span class="line">                RR3 = RR[i] / m</span><br><span class="line">                RR_guo[(i + k):(i + k)] = (m - <span class="number">1</span>) * [RR3]</span><br><span class="line">                cs = []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">                    cs1 = locs1[i] + (j + <span class="number">1</span>) * RR3</span><br><span class="line">                    cs.append(cs1)</span><br><span class="line">                RR_locs_guo.extend(cs)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                k = k + m</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR3 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> i &gt; (len(RR) - <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> RR[i] &gt; (<span class="number">1.55</span> * mRR[len(mRR) - <span class="number">1</span>]):</span><br><span class="line">                m = int(round(RR[i] / mRR[len(mRR) - <span class="number">1</span>]))</span><br><span class="line">                RR3 = RR[i] / m</span><br><span class="line">                RR_guo[(i + k):(i + k)] = (m - <span class="number">1</span>) * [RR3]</span><br><span class="line">                cs = []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">                    cs1 = locs1[i] + (j + <span class="number">1</span>) * RR3</span><br><span class="line">                    cs.append(cs1)</span><br><span class="line">                RR_locs_guo.extend(cs)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                k = k + m</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR3 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &gt; (<span class="number">1.55</span> * mRR[i - <span class="number">10</span>]):</span><br><span class="line">                m = int(round(RR[i] / mRR[i]))</span><br><span class="line">                RR3 = RR[i] / m</span><br><span class="line">                RR_guo[(i + k):(i + k)] = (m - <span class="number">1</span>) * [RR3]</span><br><span class="line">                cs = []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">                    cs1 = locs1[i] + (j + <span class="number">1</span>) * RR3</span><br><span class="line">                    cs.append(cs1)</span><br><span class="line">                RR_locs_guo.extend(cs)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                k = k + m</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR3 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        RR_locs_guo.append(locs2)</span><br><span class="line">        RR_guo.append(RR3)</span><br><span class="line">    RR_locs_guo.insert(<span class="number">0</span>, locs1[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> RR_locs_guo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eliminate</span><span class="params">(locs1)</span>:</span></span><br><span class="line">    c = Eliminate_LOW(Eliminate_check(locs1))</span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h2 id="peaks的时域特征"><a href="#peaks的时域特征" class="headerlink" title="peaks的时域特征"></a>peaks的时域特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/3</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># R峰值的时域特征分析</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 裕度因子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">margin_factor</span><span class="params">(x)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">1</span>):</span><br><span class="line">        sum += math.sqrt(x[i])</span><br><span class="line">    mean = np.mean(sum)</span><br><span class="line">    <span class="keyword">return</span> mean**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差值均方根</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_RMSSD</span><span class="params">(x)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">1</span>):</span><br><span class="line">        sum += (x[i+<span class="number">1</span>] - x[i])**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(sum/(len(x) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均方根</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rms</span><span class="params">(x)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">1</span>):</span><br><span class="line">        sum += (x[i])**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(sum / (len(x)<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peaks_time_feature</span><span class="params">(f)</span>:</span></span><br><span class="line">    x = abs(np.array(f))</span><br><span class="line">    <span class="comment"># 最大值</span></span><br><span class="line">    p_max = x.max()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最小值</span></span><br><span class="line">    p_min = x.min()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 均值：</span></span><br><span class="line">    p_mean = x.mean()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中位数</span></span><br><span class="line">    p_median = np.median(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标准差</span></span><br><span class="line">    SDNN = x.std()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方差</span></span><br><span class="line">    p_var = x.var()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 峰峰值</span></span><br><span class="line">    p_peaks = p_max - p_min</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 差值均方根</span></span><br><span class="line">    RMSSD = get_RMSSD(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 峭度/峰度</span></span><br><span class="line">    p_kurt = stats.kurtosis(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 偏度</span></span><br><span class="line">    p_skew = stats.skew(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 波形因子</span></span><br><span class="line">    p_wave_factor = RMSSD / p_mean</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 峰值因子</span></span><br><span class="line">    p_peak_factor = p_peaks / RMSSD</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 脉冲因子</span></span><br><span class="line">    p_impulse_factor = p_peaks / p_mean</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裕度因子</span></span><br><span class="line">    p_margin_factor = p_peaks / margin_factor(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 均方根</span></span><br><span class="line">    p_RMS = get_rms(x)</span><br><span class="line"></span><br><span class="line">    list_time_features = [p_max, p_min, p_mean, p_median, SDNN, p_var, p_peaks, RMSSD, p_kurt, p_skew,</span><br><span class="line">                          p_wave_factor, p_peak_factor, p_impulse_factor, p_margin_factor, p_RMS]</span><br><span class="line">    <span class="keyword">return</span> list_time_features</span><br></pre></td></tr></table></figure><h2 id="HRV的时域特征"><a href="#HRV的时域特征" class="headerlink" title="HRV的时域特征"></a>HRV的时域特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrvanalysis <span class="keyword">import</span> get_time_domain_features</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_features</span><span class="params">(x)</span>:</span></span><br><span class="line">    A = get_time_domain_features(x)</span><br><span class="line">    RR_mean = A[<span class="string">'mean_nni'</span>]</span><br><span class="line">    SDNN = A[<span class="string">'sdnn'</span>]</span><br><span class="line">    SDSD = A[<span class="string">'sdsd'</span>]</span><br><span class="line">    NN50 = A[<span class="string">'nni_50'</span>]</span><br><span class="line">    PNN50 = A[<span class="string">'pnni_50'</span>]</span><br><span class="line">    NN20 = A[<span class="string">'nni_20'</span>]</span><br><span class="line">    PNN20 = A[<span class="string">'pnni_20'</span>]</span><br><span class="line">    RMSSD = A[<span class="string">'rmssd'</span>]</span><br><span class="line">    RR_median = A[<span class="string">'median_nni'</span>]</span><br><span class="line">    NUM = A[<span class="string">'range_nni'</span>]</span><br><span class="line">    CVSD = A[<span class="string">'cvsd'</span>]</span><br><span class="line">    RR_CV = A[<span class="string">'cvnni'</span>]</span><br><span class="line">    HR_mean = A[<span class="string">'mean_hr'</span>]</span><br><span class="line">    HR_max = A[<span class="string">'max_hr'</span>]</span><br><span class="line">    HR_min = A[<span class="string">'min_hr'</span>]</span><br><span class="line">    HR_std = A[<span class="string">'std_hr'</span>]</span><br><span class="line">    ALL = [RR_mean, SDNN, SDSD, NN50, PNN50, NN20, PNN20, RMSSD, RR_median, NUM, CVSD, RR_CV, HR_mean, HR_max,</span><br><span class="line">           HR_min, HR_std]</span><br><span class="line">    <span class="keyword">return</span> ALL</span><br></pre></td></tr></table></figure><h2 id="插值并重采样"><a href="#插值并重采样" class="headerlink" title="插值并重采样"></a>插值并重采样</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.interpolate <span class="keyword">as</span> spi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hrv_interp1</span><span class="params">(x, y, s)</span>:</span></span><br><span class="line">    x_new = np.linspace(x[<span class="number">0</span>], x[len(x) - <span class="number">1</span>], <span class="number">7500</span> * s)  <span class="comment"># 新的插值区间及其点的个数</span></span><br><span class="line">    ipo3 = spi.splrep(x, y, k=<span class="number">3</span>)  <span class="comment"># 样本点导入，生成参数</span></span><br><span class="line">    hrv_interpolation = spi.splev(x_new, ipo3)  <span class="comment"># 根据观测点和样条参数，生成插值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hrv_interpolation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重采样</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resample</span><span class="params">(input_signal, src_fs, tar_fs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param input_signal:输入信号</span></span><br><span class="line"><span class="string">    :param src_fs:输入信号采样率</span></span><br><span class="line"><span class="string">    :param tar_fs:输出信号采样率</span></span><br><span class="line"><span class="string">    :return:输出信号</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    dtype = input_signal.dtype</span><br><span class="line">    audio_len = len(input_signal)</span><br><span class="line">    audio_time_max = <span class="number">1.0</span> * audio_len / src_fs</span><br><span class="line">    src_time = <span class="number">1.0</span> * np.linspace(<span class="number">0</span>, audio_len, audio_len) / src_fs</span><br><span class="line">    tar_time = <span class="number">1.0</span> * np.linspace(<span class="number">0</span>, np.int(audio_time_max*tar_fs), np.int(audio_time_max*tar_fs)) / tar_fs</span><br><span class="line">    output_signal = np.interp(tar_time, src_time, input_signal).astype(dtype)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output_signal</span><br></pre></td></tr></table></figure><h2 id="HRV的频域特征"><a href="#HRV的频域特征" class="headerlink" title="HRV的频域特征"></a>HRV的频域特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrvanalysis <span class="keyword">import</span> get_frequency_domain_features</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfreq</span><span class="params">(x)</span>:</span></span><br><span class="line">    all = get_frequency_domain_features(x)</span><br><span class="line">    LF = all[<span class="string">'lf'</span>]</span><br><span class="line">    HF = all[<span class="string">'hf'</span>]</span><br><span class="line">    LF_HF = all[<span class="string">'lf_hf_ratio'</span>]</span><br><span class="line">    LFnu = all[<span class="string">'lfnu'</span>]</span><br><span class="line">    HFnu = all[<span class="string">'hfnu'</span>]</span><br><span class="line">    total = all[<span class="string">'total_power'</span>]</span><br><span class="line">    VLF = all[<span class="string">'vlf'</span>]</span><br><span class="line">    freqs = [LF, HF, LF_HF, LFnu, HFnu, total, VLF]</span><br><span class="line">    <span class="keyword">return</span> freqs</span><br></pre></td></tr></table></figure><h2 id="HRV的非线性特征"><a href="#HRV的非线性特征" class="headerlink" title="HRV的非线性特征"></a>HRV的非线性特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrvanalysis <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> non_features <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SD1</span><span class="params">(x)</span>:</span></span><br><span class="line">    sd = [x[i+<span class="number">1</span>] - x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)<span class="number">-1</span>)]</span><br><span class="line">    <span class="keyword">return</span> np.std(sd) / np.sqrt(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SD2</span><span class="params">(x)</span>:</span></span><br><span class="line">    sd = [x[i+<span class="number">1</span>] + x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)<span class="number">-1</span>)]</span><br><span class="line">    <span class="keyword">return</span> np.std(sd) / np.sqrt(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_linear5</span><span class="params">(x)</span>:</span></span><br><span class="line">    RR_sd1 = SD1(x)</span><br><span class="line">    RR_sd2 = SD2(x)</span><br><span class="line">    RR_csi10 = csi(x, <span class="number">10</span>)</span><br><span class="line">    RR_csi30 = csi(x, <span class="number">30</span>)</span><br><span class="line">    RR_csi50 = csi(x, <span class="number">50</span>)</span><br><span class="line">    RR_csi100 = csi(x, <span class="number">100</span>)</span><br><span class="line">    RR_cvi = get_csi_cvi_features(x)[<span class="string">'cvi'</span>]</span><br><span class="line">    Modified_CSI10 = Modified_csi(x, <span class="number">10</span>)</span><br><span class="line">    Modified_CSI30 = Modified_csi(x, <span class="number">30</span>)</span><br><span class="line">    Modified_CSI50 = Modified_csi(x, <span class="number">50</span>)</span><br><span class="line">    Modified_CSI100 = Modified_csi(x, <span class="number">100</span>)</span><br><span class="line">    RR_apen = apen(x, m=<span class="number">2</span>, r=<span class="number">0.6</span>)</span><br><span class="line">    RR_spen = spen(x)</span><br><span class="line">    A = get_sampen(x)</span><br><span class="line">    RR_sampen = A[<span class="string">'sampen'</span>]</span><br><span class="line">    RR_lle = lle(x)</span><br><span class="line">    ALL_5 = [RR_sd1, RR_sd2, RR_sd2/RR_sd1, RR_csi10, RR_csi30, RR_csi50, RR_csi100, RR_cvi, Modified_CSI10,</span><br><span class="line">             Modified_CSI30, Modified_CSI50, Modified_CSI100, RR_apen, RR_spen, RR_sampen, RR_lle]</span><br><span class="line">    <span class="keyword">return</span> ALL_5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_linear</span><span class="params">(x)</span>:</span></span><br><span class="line">    RR_sd1 = SD1(x)</span><br><span class="line">    RR_sd2 = SD2(x)</span><br><span class="line">    RR_csi10 = csi(x, <span class="number">10</span>)</span><br><span class="line">    RR_cvi = get_csi_cvi_features(x)[<span class="string">'cvi'</span>]</span><br><span class="line">    Modified_CSI10 = Modified_csi(x, <span class="number">10</span>)</span><br><span class="line">    RR_apen = apen(x, m=<span class="number">2</span>, r=<span class="number">0.6</span>)</span><br><span class="line">    RR_spen = spen(x)</span><br><span class="line">    RR_lle = lle(x)</span><br><span class="line">    RR_sampen = get_sampen(x)[<span class="string">'sampen'</span>]</span><br><span class="line">    ALL_30 = [RR_sd1, RR_sd2, RR_sd2/RR_sd1, RR_csi10, RR_cvi, Modified_CSI10, RR_apen, RR_spen, RR_lle, RR_sampen]</span><br><span class="line">    <span class="keyword">return</span> ALL_30</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Provides the non-linear functions for processing ECGs. Signals should be input</span></span><br><span class="line"><span class="string">as an np.array of R-R intervals. Arrays can be multi-dimensional as long as</span></span><br><span class="line"><span class="string">axis 1 moves through time (i.e. inputs should have shapes (n,) or (m, n)).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Includes function: csi (cardiac sympathatic index) apen (approximate entropy),</span></span><br><span class="line"><span class="string">spen (spectral entropy), lle (largest Lypunov exponent).</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.fftpack <span class="keyword">import</span> fft, ifft</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csi</span><span class="params">(intervals, num_points)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    From Geometry of the Poincare plot of RR intervals and its asymmetry in</span></span><br><span class="line"><span class="string">    healthy adults, J. Piskorski and P. Guzik; and A new method of assessing</span></span><br><span class="line"><span class="string">    cardiac autonomic function and its comparison with spectral analysis and</span></span><br><span class="line"><span class="string">    coefficient of variation of R--R interval, Motomi Toichi, Takeshi Sugiura</span></span><br><span class="line"><span class="string">    Toshiya Murai, and Akira Sengoku.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Cardiac Sympathetic Index (CSI). The poincare plot is method for visualizing</span></span><br><span class="line"><span class="string">    chaotic signals by plotting the peaks of a signal against the same peaks</span></span><br><span class="line"><span class="string">    delayed by one, for use with heart rate the peaks used are the R-R</span></span><br><span class="line"><span class="string">    intervals. This produces a ellipse aligned along the line x=y with major</span></span><br><span class="line"><span class="string">    and minor axes 4*SD2 and 4*SD1 respectively. The minor axis represents</span></span><br><span class="line"><span class="string">    variation between consecutive beats while the major axis represents</span></span><br><span class="line"><span class="string">    total beat difference. The CSI is given by SD2/SD1. Large CSI values</span></span><br><span class="line"><span class="string">    indicate relatively large inter-beat variation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        num_points (positive integer): The number of datapoints used to</span></span><br><span class="line"><span class="string">        calculate the CSI. Used as a window so the output will be of length</span></span><br><span class="line"><span class="string">        len(intervals) - num_points + 1.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    sd1, sd2 = _sd(intervals, num_points)</span><br><span class="line"></span><br><span class="line">    sd2[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    sd1[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    CSI = (sd2 / sd1).T</span><br><span class="line"><span class="comment">#     心交感指数CSI</span></span><br><span class="line"><span class="comment"># 庞加莱曲线图是一种将混沌信号可视化的方法，方法是将信号的峰值与延迟1的相同峰值相对照，用于心率。使用的峰值是R-R间隔。这会产生一个沿线x=y对齐的椭圆，长轴和短轴分别为4*sd2和4*sd1。短轴表示连续拍子之间的变化，而长轴表示总拍子差</span></span><br><span class="line"><span class="comment">#    找出最大的庞加莱曲线图</span></span><br><span class="line">    <span class="keyword">return</span> CSI.mean()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Modified_csi</span><span class="params">(intervals, num_points)</span>:</span></span><br><span class="line">    sd1, sd2 = _sd(intervals, num_points)</span><br><span class="line">    sd2[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    sd1[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    Modified_CSI = ((sd2 ** <span class="number">2</span>) / sd1).T</span><br><span class="line">    <span class="keyword">return</span> Modified_CSI.mean()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_sd</span><span class="params">(intervals, num_points)</span>:</span></span><br><span class="line">    axis = _function_dimension(intervals)</span><br><span class="line"></span><br><span class="line">    signal_length = intervals.shape[axis]</span><br><span class="line">    n = signal_length - num_points + <span class="number">1</span></span><br><span class="line">    indices = np.sum(np.mgrid[<span class="number">0</span>:n, <span class="number">0</span>:num_points], axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> axis == <span class="number">0</span>:</span><br><span class="line">        windowed_intervals = intervals[indices]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        windowed_intervals = intervals.swapaxes(<span class="number">0</span>, axis)[indices]</span><br><span class="line"></span><br><span class="line">    x = windowed_intervals[:<span class="number">-1</span>]</span><br><span class="line">    y = windowed_intervals[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_means</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        mean_x = x.mean(axis=<span class="number">1</span>)</span><br><span class="line">        mean_y = y.mean(axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>(mean_x, mean_y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_transpose</span><span class="params">(vals)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> axis == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> vals.T</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> vals.swapaxes(<span class="number">0</span>, axis)</span><br><span class="line"></span><br><span class="line">    mean_x, mean_y = _means(x, y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sd1</span><span class="params">()</span>:</span></span><br><span class="line">        mean = _transpose(np.array([mean_y - mean_x]))</span><br><span class="line"></span><br><span class="line">        sd1 = np.std((x - y) + mean, axis=<span class="number">1</span>) / (<span class="number">2.0</span> ** <span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">return</span> sd1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sd2</span><span class="params">()</span>:</span></span><br><span class="line">        mean = _transpose(np.array([mean_x + mean_y]))</span><br><span class="line"></span><br><span class="line">        sd2 = np.std((x + y) - mean, axis=<span class="number">1</span>) / (<span class="number">2.0</span> ** <span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">return</span> sd2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(_sd1(), _sd2())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apen</span><span class="params">(intervals, m=<span class="number">2</span>, r=<span class="number">0.6</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Approximate Entropy (ApEn) as described in "Physiological time-series</span></span><br><span class="line"><span class="string">    analysis what does regularity quantify?" by Steven M. Pingus And Ary L.</span></span><br><span class="line"><span class="string">    Goldberger.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Vector x_i contains the ith heart rate to the (i + m - 1)th heart rate.</span></span><br><span class="line"><span class="string">    The distance between two vectors, x_i and x_j, is greater than r if</span></span><br><span class="line"><span class="string">    abs(x_i[k] - x_j[k]) &gt; r for any k = 0 ... (m - 1). A pair of vectors</span></span><br><span class="line"><span class="string">    (or groups), x_i and x_j, are said to be close if the distance between them</span></span><br><span class="line"><span class="string">    is less than r. C_i is the number of close groups of length m + 1 divided</span></span><br><span class="line"><span class="string">    by the number of close groups of length m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Based on the definition of distance if the ith and jth group are close</span></span><br><span class="line"><span class="string">    when using length m + 1 then they must also be close when using a length of</span></span><br><span class="line"><span class="string">    only m. Therefore C is the probability heart rate i + m is close to heart</span></span><br><span class="line"><span class="string">    rate j + m given all m heart rates in groups i and j are also close.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ApEn = phi^(m+1)(r) - phi^m(r) where phi^m(r) is the average of natural</span></span><br><span class="line"><span class="string">    log C_i, for all i groups, calculated using a group size of m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        m (positive int): group lengths.</span></span><br><span class="line"><span class="string">        r (float): max distance between close groups.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    heart_rates = <span class="number">1</span> / intervals.astype(np.float32)</span><br><span class="line"></span><br><span class="line">    num_close_groups_m = _find_num_close_groups(heart_rates, m, r)</span><br><span class="line">    num_close_groups_m_plus_1 = _find_num_close_groups(heart_rates, m+<span class="number">1</span>, r)</span><br><span class="line">    num_close_groups_m_plus_2 = _find_num_close_groups(heart_rates, m+<span class="number">2</span>, r)</span><br><span class="line"></span><br><span class="line">    C_m = num_close_groups_m_plus_1 / num_close_groups_m[:<span class="number">-1</span>]</span><br><span class="line">    C_m_plus_1 = num_close_groups_m_plus_2 / num_close_groups_m_plus_1[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    phi = <span class="keyword">lambda</span> C: np.nanmean(np.log(C), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phi(C_m_plus_1) - phi(C_m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_num_close_groups</span><span class="params">(heart_rates, m, r)</span>:</span></span><br><span class="line">    dim = _function_dimension(heart_rates)</span><br><span class="line"></span><br><span class="line">    err_msg = <span class="string">'Group lengths must be smaller than the signal length'</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; heart_rates.shape[dim], err_msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dim == <span class="number">0</span>:</span><br><span class="line">        dist_mat = _one_dim_distance_matrix(heart_rates)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dist_mat = _multi_dim_distance_matrix(heart_rates)</span><br><span class="line"></span><br><span class="line">    far_vals = np.logical_or(np.greater(dist_mat, r), np.less(dist_mat, -r))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _sum_num_close_groups(far_vals, m).astype(np.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_function_dimension</span><span class="params">(x)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(x.shape) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_one_dim_distance_matrix</span><span class="params">(vals)</span>:</span></span><br><span class="line">    repeats = np.tile(vals, (vals.shape[<span class="number">0</span>], <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> repeats - repeats.T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_multi_dim_distance_matrix</span><span class="params">(vals)</span>:</span></span><br><span class="line">    vals = _rotate_and_repeat(vals)</span><br><span class="line">    <span class="keyword">return</span> vals - np.swapaxes(vals, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_rotate_and_repeat</span><span class="params">(vals)</span>:</span></span><br><span class="line">    vals = np.swapaxes(np.array([vals]), <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    size = vals.shape</span><br><span class="line">    new_size = (size[<span class="number">1</span>],) + size[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> np.broadcast_to(vals, new_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_sum_num_close_groups</span><span class="params">(group_dist_mat, m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sum(_is_group_close(group_dist_mat, m), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_group_close</span><span class="params">(far_vals, m)</span>:</span></span><br><span class="line">    close_groups = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> str_idx <span class="keyword">in</span> range(m):</span><br><span class="line">        end_idx = m - str_idx</span><br><span class="line">        close_groups += far_vals[str_idx:-end_idx, str_idx:-end_idx]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> close_groups == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spen</span><span class="params">(intervals)</span>:</span></span><br><span class="line">    <span class="string">""" Spectral Entropy (SpEn) is a measure of entropy based on the</span></span><br><span class="line"><span class="string">    probability mass distribution of the discreate Fourier transformation.</span></span><br><span class="line"><span class="string">    If a few frequencies dominate a signal the signal is predictable and</span></span><br><span class="line"><span class="string">    thus has a low entropy. SpEn uses log based 2 and can therefore be</span></span><br><span class="line"><span class="string">    interpreted as the min number of bits needed to encode the signals</span></span><br><span class="line"><span class="string">    power spectrum. Because of this length of the signal can affect the</span></span><br><span class="line"><span class="string">    outcome. """</span></span><br><span class="line"></span><br><span class="line">    axis = _function_dimension(intervals)</span><br><span class="line"></span><br><span class="line">    spectrum = np.abs(fft(intervals)) ** <span class="number">2</span></span><br><span class="line">    probs = spectrum / np.array([spectrum.sum(axis=axis)]).T</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> - np.sum(probs * np.log2(probs), axis=axis)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lle</span><span class="params">(intervals)</span>:</span></span><br><span class="line">    <span class="string">""" Largest Lypunov exponent (LLE) is a measure chaos within a signal.</span></span><br><span class="line"><span class="string">    If the LLE of a signal is positive the signal is determined to be chaotic.</span></span><br><span class="line"><span class="string">    The Lypunov exponent of each dimension represents how quickly two initially</span></span><br><span class="line"><span class="string">    close points move apart from one another.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This method of calculating the LLE is based on M. Rosenstein, J. Collins,</span></span><br><span class="line"><span class="string">    and C. De Luca's method from "A practical method for calculating largest</span></span><br><span class="line"><span class="string">    Lypunov exponents from small data sets".</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    dim = _function_dimension(intervals)</span><br><span class="line">    j = _calc_j_from_autocorr(intervals, dim)</span><br><span class="line">    <span class="keyword">return</span> j</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_calc_j_from_autocorr</span><span class="params">(intervals, axis)</span>:</span></span><br><span class="line"></span><br><span class="line">    Intervals = fft(intervals, axis=axis)</span><br><span class="line">    Corr = np.abs(Intervals ** <span class="number">2</span>)</span><br><span class="line">    corr = ifft(Corr, axis=axis).real</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> axis <span class="keyword">is</span> <span class="number">0</span>:</span><br><span class="line">        corr = corr[:int(len(corr) / <span class="number">2</span>)] / corr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        corr = corr[:, :corr.shape[<span class="number">1</span>] / <span class="number">2</span>] / np.array([corr[:, <span class="number">0</span>]]).T</span><br><span class="line"></span><br><span class="line">    diminish_factor = <span class="number">1</span> - <span class="number">1</span>/np.exp(<span class="number">1</span>)</span><br><span class="line">    lag_vals = np.abs(corr - diminish_factor)</span><br><span class="line">    min_val = np.argmin(lag_vals, axis=axis)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min_val</span><br></pre></td></tr></table></figure><p><img src="https://pic.wenwen.soso.com/p/20090717/20090717191255-665709535.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HRV的30s特征提取&quot;&gt;&lt;a href=&quot;#HRV的30s特征提取&quot; class=&quot;headerlink&quot; title=&quot;HRV的30s特征提取&quot;&gt;&lt;/a&gt;HRV的30s特征提取&lt;/h1&gt;&lt;p&gt; slp03和slp60数据中有一段数据遗失了ecg——r,&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>ECG_RR间期预处理</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG-RR%E9%97%B4%E6%9C%9F%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG-RR%E9%97%B4%E6%9C%9F%E9%A2%84%E5%A4%84%E7%90%86/</id>
    <published>2020-06-08T09:46:48.000Z</published>
    <updated>2020-06-08T09:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECG-RR间期预处理"><a href="#ECG-RR间期预处理" class="headerlink" title="ECG_RR间期预处理"></a>ECG_RR间期预处理</h1><p>还是要用矫正后的R进行读取，所以第一个点进行查看<br>用矫正后的R间期序列，第一个点，就直接按照标注结果进行标注，直接不要第一个点，<br>数据点很多，而且分析的时候，第一个30s并没有进行分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/2</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">还是要用矫正后的R进行读取，所以第一个点进行查看</span></span><br><span class="line"><span class="string">用矫正后的R间期序列，第一个点，就直接按照标注结果进行标注，直接不要第一个点，</span></span><br><span class="line"><span class="string">数据点很多，而且分析的时候，第一个30s并没有进行分析</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp01b'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取心电数据库的R峰值点</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Correct the peaks shifting them to local maxima</span></span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"><span class="comment"># Use the maximum possible bpm as the search radius,进行平滑校准到峰值点位置</span></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line"><span class="comment"># 进行矫正后的峰值点信号坐标，用这个来进行后续的分析，虽然RR间期没什么影响，但是峰值点的值有很大的影响</span></span><br><span class="line">ecg_r_locs = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs,</span><br><span class="line">                                      search_radius=search_radius, smooth_window_size=<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 峰值信号</span></span><br><span class="line">ecg_r_peaks = ecg_signal[ecg_r_locs].tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常点处理，感觉可以不写，毕竟写了会出现R峰值无法对应的现象，会报错，到时可以写这个步骤，但是，没必要在程序中书写</span></span><br><span class="line"><span class="comment"># 30s切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(record.sig_len/record.fs/30 - 1):</span></span><br><span class="line">RR_30s = []</span><br><span class="line">locs_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>*record.fs):</span><br><span class="line">    <span class="keyword">if</span> ecg_r_locs[i] &lt;= <span class="number">30</span>*record.fs:</span><br><span class="line">        locs_30s.append(ecg_r_locs[i])</span><br><span class="line">        RR_30s.append(ecg_r_locs[i+<span class="number">1</span>] - ecg_r_locs[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 删除RR间期的最后一个，i+1数据超出了范围</span></span><br><span class="line">RR_30s.pop()</span><br><span class="line"><span class="comment"># 删除locs对应的第一个坐标，因为是用后面的R峰值点的坐标去对应RR波形</span></span><br><span class="line"><span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1 id="将30s的数据进行循环切片，然后进行输出为list"><a href="#将30s的数据进行循环切片，然后进行输出为list" class="headerlink" title="将30s的数据进行循环切片，然后进行输出为list"></a>将30s的数据进行循环切片，然后进行输出为list</h1><h1 id="30s的和5min的进行单独的分析，然后进行时频域和非线性的分析"><a href="#30s的和5min的进行单独的分析，然后进行时频域和非线性的分析" class="headerlink" title="30s的和5min的进行单独的分析，然后进行时频域和非线性的分析"></a>30s的和5min的进行单独的分析，然后进行时频域和非线性的分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/2</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将30s的数据进行循环切片，然后进行输出为list</span></span><br><span class="line"><span class="comment"># 30s的和5min的进行单独的分析，然后进行时频域和非线性的分析</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp01a'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line">ecg_r_locs = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs,</span><br><span class="line">                                      search_radius=search_radius, smooth_window_size=<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 峰值信号</span></span><br><span class="line">ecg_r_peaks = ecg_signal[ecg_r_locs].tolist()</span><br><span class="line"></span><br><span class="line">all_RR_30s = []</span><br><span class="line">all_locs_30s = []</span><br><span class="line">all_peaks_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">    RR_30s = []</span><br><span class="line">    locs_30s = []</span><br><span class="line">    peaks_30s = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">1</span>)):</span><br><span class="line">            locs_30s.append(ecg_r_locs[j])</span><br><span class="line">            RR_30s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">            peaks_30s.append(ecg_r_peaks[j][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    RR_30s.pop()</span><br><span class="line">    all_RR_30s.append(RR_30s)</span><br><span class="line">    all_locs_30s.append(locs_30s)</span><br><span class="line">    all_peaks_30s.append(peaks_30s)</span><br></pre></td></tr></table></figure><p><img src="https://pic.wenwen.soso.com/p/20100306/20100306173003-1233891219.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ECG-RR间期预处理&quot;&gt;&lt;a href=&quot;#ECG-RR间期预处理&quot; class=&quot;headerlink&quot; title=&quot;ECG_RR间期预处理&quot;&gt;&lt;/a&gt;ECG_RR间期预处理&lt;/h1&gt;&lt;p&gt;还是要用矫正后的R进行读取，所以第一个点进行查看&lt;br&gt;用矫正后的R
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>ECG信号读取</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG%E4%BF%A1%E5%8F%B7%E8%AF%BB%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG%E4%BF%A1%E5%8F%B7%E8%AF%BB%E5%8F%96/</id>
    <published>2020-06-08T09:42:03.000Z</published>
    <updated>2020-06-08T09:42:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECG信号读取"><a href="#ECG信号读取" class="headerlink" title="ECG信号读取"></a>ECG信号读取</h1><p>读取RR和st中的注释程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/29</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用wfdb读取ECG数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="comment"># 读取slp01a的数据，sampfrom：起始位置，sampto：结束位置，即可写做</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata/slp02a', sampfrom=0, sampto=1500, channels=[0])</span></span><br><span class="line"><span class="comment"># 相当于已经把这个写成了一个类别，然后进行读取时，读取相关的属性就可以了。面向对象类别record.p_signal即为相关信号</span></span><br><span class="line"><span class="comment"># 读取注释文件</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata/slp14'</span>, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接读取注释的信息，然后进行判断即可，所以就可以不需要txt。直接用[][0]来进行判断睡眠分期</span></span><br><span class="line"><span class="comment"># 用【】【2】来判定是否是呼吸暂停</span></span><br><span class="line"><span class="comment"># aux[16][0]</span></span><br><span class="line"><span class="comment"># Out[13]: '1'</span></span><br><span class="line"><span class="comment"># aux[67][0]</span></span><br><span class="line"><span class="comment"># Out[14]: 'M'</span></span><br><span class="line"><span class="comment"># aux[63][3]</span></span><br><span class="line"><span class="comment"># Out[15]: 'A'</span></span><br><span class="line"><span class="comment"># aux[63][2]</span></span><br><span class="line"><span class="comment"># Out[16]: 'H'</span></span><br><span class="line"><span class="comment"># aux[55][2]</span></span><br></pre></td></tr></table></figure><h2 id="标签处理"><a href="#标签处理" class="headerlink" title="标签处理"></a>标签处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/31</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line">test = input(<span class="string">"请输入想读取的文件名： "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test = 'slp14'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">        tag1.append(<span class="number">1</span>)</span><br><span class="line">        tag2.append(<span class="number">1</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">        tag1.append(<span class="number">2</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        tag1.append(<span class="number">3</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">        tag1.append(<span class="number">4</span>)</span><br><span class="line">        tag2.append(<span class="number">3</span>)</span><br><span class="line">        tag3.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tag1.append(<span class="number">5</span>)</span><br><span class="line">        tag2.append(<span class="number">4</span>)</span><br><span class="line">        tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">        tag4.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">            tag4.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label4 = pd.DataFrame(tag4, columns=[<span class="string">'AHI'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3, label4], axis=<span class="number">1</span>)</span><br><span class="line">num = int(input(<span class="string">"输入保存的文件名： "</span>))</span><br><span class="line">label.to_excel(<span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line"><span class="comment"># slp30和60有数据缺失    </span></span><br><span class="line">    <span class="comment"># if 174 &lt; i &lt; 194: # slp03</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:</span><br><span class="line">        <span class="comment"># slp60</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">                tag4.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tag4.append(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="http://pic41.nipic.com/20140528/2215192_185119636131_2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ECG信号读取&quot;&gt;&lt;a href=&quot;#ECG信号读取&quot; class=&quot;headerlink&quot; title=&quot;ECG信号读取&quot;&gt;&lt;/a&gt;ECG信号读取&lt;/h1&gt;&lt;p&gt;读取RR和st中的注释程序&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>sleep apnea</title>
    <link href="https://esyyes.github.io/2020/05/31/sleep%20apnea%20and%20sleep%20stage/sleep-apnea/"/>
    <id>https://esyyes.github.io/2020/05/31/sleep%20apnea%20and%20sleep%20stage/sleep-apnea/</id>
    <published>2020-05-31T07:43:01.000Z</published>
    <updated>2020-05-31T07:43:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sleep-apnea"><a href="#sleep-apnea" class="headerlink" title="sleep apnea"></a>sleep apnea</h1><p>诊断OSAS时,对有鼻炎、打鼾、张口呼吸、睡时慢性咳嗽、睡眠不安等高危症状的儿童,应给予高度重视。根据北京儿童医院睡眠中心推荐的儿童OSAS诊断标准,<strong>呼吸暂停为呼吸停止≥5秒或2个呼吸周期、暂停指数AI≥1次/小时</strong>;低通气指口鼻气流振幅较基线(气流停止或下降之前至少2分钟或3个呼吸周期的平均呼吸幅度)下降50%或持续2个呼吸周期以上,伴血氧饱和度降低3%以上或觉醒;呼吸暂停低通气指数<strong>AHI≥5次/小时可诊断为儿童OSAS,该指数5<del>10为轻度,10</del>20为中度,20以上为重度</strong>。通过病史、临床表现、放射学检查以及多导睡眠检测等方法,诊断OSAS并不困难,但要注意与原发性<a href="https://baike.baidu.com/item/鼾症" target="_blank" rel="noopener">鼾症</a>鉴别诊断,后者无频繁觉醒,也无明确梗阻性睡眠呼吸暂停或气体交换异常。</p><p>成年人的睡眠呼吸暂停判定：</p><p>AHI(次数、小时)</p><p>轻度：AHI 5-14</p><p>中度： 15-29</p><p>重度： ≥30</p><p>直接根据AHI的平均值进行判定，只考虑AHI,OS这些全部判定为AHI。即可，直接先用这个特征进行提取，然后再考虑其他心电关于呼吸暂停的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/31</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line">test = input(<span class="string">"请输入想读取的文件名： "</span>)</span><br><span class="line">num = int(input(<span class="string">"输入保存的文件名： "</span>))</span><br><span class="line"><span class="comment"># test = 'slp14'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">        tag1.append(<span class="number">1</span>)</span><br><span class="line">        tag2.append(<span class="number">1</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">        tag1.append(<span class="number">2</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        tag1.append(<span class="number">3</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">        tag1.append(<span class="number">4</span>)</span><br><span class="line">        tag2.append(<span class="number">3</span>)</span><br><span class="line">        tag3.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tag1.append(<span class="number">5</span>)</span><br><span class="line">        tag2.append(<span class="number">4</span>)</span><br><span class="line">        tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">        tag4.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">            tag4.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line">label4 = pd.DataFrame(tag4, columns=[<span class="string">'AHI'</span>])</span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3, label4], axis=<span class="number">1</span>)</span><br><span class="line">label.to_excel(<span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><p>首先对标签进行处理，睡眠分为3大主题。低通气和正常分为一类。</p><p><img src="http://img2.a0bi.com/upload/ttq/20150310/1425992493369.jpg" alt=""></p><p>slp03和slp60丢失了一段数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line"><span class="comment"># test = input("请输入想读取的文件名： ")</span></span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp03'</span></span><br><span class="line"><span class="comment"># test = 'slp60'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">        tag1.append(<span class="number">1</span>)</span><br><span class="line">        tag2.append(<span class="number">1</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">        tag1.append(<span class="number">2</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        tag1.append(<span class="number">3</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">        tag1.append(<span class="number">4</span>)</span><br><span class="line">        tag2.append(<span class="number">3</span>)</span><br><span class="line">        tag3.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tag1.append(<span class="number">5</span>)</span><br><span class="line">        tag2.append(<span class="number">4</span>)</span><br><span class="line">        tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="comment"># if 174 &lt; i &lt; 194: # slp03</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:</span><br><span class="line">        <span class="comment"># slp60</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">                tag4.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tag4.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label4 = pd.DataFrame(tag4, columns=[<span class="string">'AHI'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3, label4], axis=<span class="number">1</span>)</span><br><span class="line">num = int(input(<span class="string">"输入保存的文件名： "</span>))</span><br><span class="line">label.to_excel(<span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sleep-apnea&quot;&gt;&lt;a href=&quot;#sleep-apnea&quot; class=&quot;headerlink&quot; title=&quot;sleep apnea&quot;&gt;&lt;/a&gt;sleep apnea&lt;/h1&gt;&lt;p&gt;诊断OSAS时,对有鼻炎、打鼾、张口呼吸、睡时慢性咳嗽、睡眠不安等高
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>面向对象版学员管理系统</title>
    <link href="https://esyyes.github.io/2020/05/28/python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%88%E5%AD%A6%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://esyyes.github.io/2020/05/28/python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%88%E5%AD%A6%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-05-28T11:58:57.000Z</published>
    <updated>2020-05-28T11:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象版学员管理系统"><a href="#面向对象版学员管理系统" class="headerlink" title="面向对象版学员管理系统"></a>面向对象版学员管理系统</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/27</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">## 3.1 student.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 学员信息包含：姓名、性别、手机号；</span></span><br><span class="line"><span class="string">- 添加`__str__`魔法方法，方便查看学员对象信息</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">1.生成学生这个类别</span></span><br><span class="line"><span class="string">2.这个类别中的属性有 姓名、性别、手机号</span></span><br><span class="line"><span class="string">3.可以用__str__这个来进行赋值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成学生这个类别</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化对象，设定对象带的属性，用__init__设置带类的对象的属性，self就是student</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, tel)</span>:</span></span><br><span class="line">        <span class="comment"># self.name就是带的小属性，name即可定义参数</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.tel = tel</span><br><span class="line">    <span class="comment"># def __str__(self):</span></span><br><span class="line">    <span class="comment"># 当使用print输出对象的时候，默认打印对象的内存地址。</span></span><br><span class="line">    <span class="comment"># 如果类定义了`__str__`方法，那么就会打印从在这个方法中 return 的数据。</span></span><br><span class="line">    <span class="comment"># 便于直接打印出内部的文件信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回的是要打印的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"学生姓名：<span class="subst">&#123;self.name&#125;</span>, 性别：<span class="subst">&#123;self.gender&#125;</span>, 手机号：<span class="subst">&#123;self.tel&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名时不能命名为类的名字</span></span><br><span class="line"><span class="comment"># student1 = student('zc', 'man', '111')</span></span><br><span class="line"><span class="comment"># print(student1)</span></span><br></pre></td></tr></table></figure><h2 id="生成管理系统这个类别："><a href="#生成管理系统这个类别：" class="headerlink" title="生成管理系统这个类别："></a>生成管理系统这个类别：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/28</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">import</span> student</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">##  ManagerSystem.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 存储数据的位置：文件(student.csv)</span></span><br><span class="line"><span class="string">  - 加载文件数据</span></span><br><span class="line"><span class="string">  - 修改数据后保存到文件</span></span><br><span class="line"><span class="string">- 存储数据的形式：列表存储学员对象</span></span><br><span class="line"><span class="string">- 系统功能</span></span><br><span class="line"><span class="string">  - 添加学员</span></span><br><span class="line"><span class="string">  - 删除学员</span></span><br><span class="line"><span class="string">  - 修改学员</span></span><br><span class="line"><span class="string">  - 查询学员信息</span></span><br><span class="line"><span class="string">  - 显示所有学员信息</span></span><br><span class="line"><span class="string">  - 保存学员信息</span></span><br><span class="line"><span class="string">  - 退出系统</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">需求：系统功能循环使用，用户输入不同的功能序号执行不同的功能。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 步骤</span></span><br><span class="line"><span class="string">  - 定义程序入口函数</span></span><br><span class="line"><span class="string">    - 加载数据</span></span><br><span class="line"><span class="string">    - 显示功能菜单</span></span><br><span class="line"><span class="string">    - 用户输入功能序号</span></span><br><span class="line"><span class="string">    - 根据用户输入的功能序号执行不同的功能</span></span><br><span class="line"><span class="string">  - 定义系统功能函数，添加、删除学员等</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">1. 加载data文件</span></span><br><span class="line"><span class="string">需要对文件进行修改和保存</span></span><br><span class="line"><span class="string">2. 修改数据后保存到文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MangerSystem</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 列表存储学员对象</span></span><br><span class="line">        self.student_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 程序开始运行，进入界面</span></span><br><span class="line">        <span class="comment"># 加载student.data文件</span></span><br><span class="line">        self.load_student()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># while True 语句中一定要有结束该循环的break语句，否则会一直循环下去的。</span></span><br><span class="line">        <span class="comment"># 这是一个死循环，所以每次循环后输入都要去显示页面</span></span><br><span class="line">        <span class="comment"># 采用while True循环语句：</span></span><br><span class="line">        <span class="comment"># 根据输入的功能序号进行判断，然后运行功能</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 显示界面的功能</span></span><br><span class="line">            self.show_menu()</span><br><span class="line">            <span class="comment"># 利用数字筛选系统的功能，供选择系统的功能，首先要确定你输入的数字是什么</span></span><br><span class="line">            <span class="comment"># 用int转换为整数形式，将这个功能赋值给菜单，然后用菜单里的内容进行比较，输入菜单的功能</span></span><br><span class="line">            menu_num = int(input(<span class="string">'请输入你需要的功能序号：'</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> menu_num == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 1- 添加学员</span></span><br><span class="line">                self.add_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># 2- 删除学员</span></span><br><span class="line">                self.del_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">3</span>:</span><br><span class="line">                <span class="comment"># 3 - 修改学员</span></span><br><span class="line">                self.modify_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># 4 - 查询学员信息</span></span><br><span class="line">                self.search_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># 5 - 显示所有学员信息</span></span><br><span class="line">                self.show_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">6</span>:</span><br><span class="line">                <span class="comment"># 6 - 保存学员信息</span></span><br><span class="line">                self.save_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">7</span>:</span><br><span class="line">                <span class="comment"># 7 - 退出系统</span></span><br><span class="line">                <span class="comment"># 跳出循环即可</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示菜单的功能，将对应序号表现出来，以供选择，静态的</span></span><br><span class="line">    <span class="comment"># 当方法中 **既不需要使用实例对象**(如实例对象，实例属性)，**也不需要使用类对象**</span></span><br><span class="line">    <span class="comment"># (如类属性、类方法、创建实例等)时，定义为静态方法</span></span><br><span class="line">    <span class="comment"># 用@staticmethod修饰</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_menu</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">f'请选择以下功能： '</span>)</span><br><span class="line">        print(<span class="string">f'1: 添加学员'</span>)</span><br><span class="line">        print(<span class="string">f'2: 删除学员'</span>)</span><br><span class="line">        print(<span class="string">f'3: 修改学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'4: 查询学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'5: 显示所有学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'6: 保存学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'7: 退出系统'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取student中的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = open(<span class="string">'student.data'</span>, <span class="string">'r'</span>)</span><br><span class="line">            print(<span class="string">f'成功打开文件'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            f = open(<span class="string">'student.data'</span>, <span class="string">'w'</span>)</span><br><span class="line">            print(<span class="string">f'没有该文件'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = f.read()</span><br><span class="line">            data_list = eval(data)</span><br><span class="line">            <span class="comment"># 将学生的数据放入学生的类别中，student.py,参数写入student的属性('name', 'gender', 'tel')，将其赋值，并保存为list形式</span></span><br><span class="line">            <span class="comment"># 需要与student.py文件结合起来,需要导入那个文件中的student模块，类别</span></span><br><span class="line">            self.student_list = [student(i[<span class="string">'name'</span>], i[<span class="string">'gender'</span>], i[<span class="string">'tel'</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> data_list]</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1-添加学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入name gender tel</span></span><br><span class="line">        name = input(<span class="string">"请输入学员的姓名："</span>)</span><br><span class="line">        gender = input(<span class="string">"请输入学员的性别： "</span>)</span><br><span class="line">        tel = input(<span class="string">"请输入学员的电话号码： "</span>)</span><br><span class="line">        <span class="comment"># 将name gender tel放入student这个类别里面，作为一个字典，然后再叠加到student_list这个列表里面</span></span><br><span class="line">        student_in = student(name, gender, tel)</span><br><span class="line"></span><br><span class="line">        self.student_list.append(student_in)</span><br><span class="line">        <span class="comment"># 查看字典和列表</span></span><br><span class="line">        print(student_in)</span><br><span class="line">        print(self.student_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2-删除学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入你想删除学员的名字</span></span><br><span class="line">        del_name = input(<span class="string">"请输入你想删除的学员的名字： "</span>)</span><br><span class="line">        <span class="comment"># 查找这个学员的名字在哪,用循环遍历出这个学员的所在</span></span><br><span class="line">        <span class="comment"># 然后删除这个学员的name gender tel，即在list中直接移除这个字典</span></span><br><span class="line">        <span class="comment"># 遍历出的每个字典都是student_in = student(name, gender, tel)，所以这个字典中的名字即可为i.name</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> del_name == i.name:</span><br><span class="line">                self.student_list.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有这个名字就输出这个</span></span><br><span class="line">            print(<span class="string">'没有这个学员'</span>)</span><br><span class="line">        <span class="comment"># 再打印出这个列表的值</span></span><br><span class="line">        print(self.student_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3- 修改学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入你想修改的学员的名字,进行查找,然后修改里面的name,gender,tel</span></span><br><span class="line">        modify_name = input(<span class="string">"请输入你想修改的学员的名字： "</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> modify_name == i.name:</span><br><span class="line">                i.name = input(<span class="string">"姓名修改："</span>)</span><br><span class="line">                i.gender = input(<span class="string">"性别修改："</span>)</span><br><span class="line">                i.tel = input(<span class="string">"电话修改为："</span>)</span><br><span class="line">                print(<span class="string">f'学员信息修改完毕。 姓名为<span class="subst">&#123;i.name&#125;</span>, 性别为：<span class="subst">&#123;i.gender&#125;</span>, 电话为：<span class="subst">&#123;i.tel&#125;</span>'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有这个名字就输出这个</span></span><br><span class="line">            print(<span class="string">'没有这个学员'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4 - 查询学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入你想查询的学员的名字,进行查找</span></span><br><span class="line">        search_name = input(<span class="string">"请输入你想查找的的学员的名字： "</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> search_name == i.name:</span><br><span class="line">                print(<span class="string">f'姓名：<span class="subst">&#123;i.name&#125;</span>, 性别：<span class="subst">&#123;i.gender&#125;</span>, 电话：<span class="subst">&#123;i.tel&#125;</span>'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有这个名字就输出这个</span></span><br><span class="line">            print(<span class="string">'没有这个学员'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5- 显示所有学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 用表格的形式展示</span></span><br><span class="line">        <span class="comment"># 打印表头</span></span><br><span class="line">        print(<span class="string">f'姓名\t性别\t电话'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="comment"># 打印出表格内容</span></span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;i.name&#125;</span>\t<span class="subst">&#123;i.gender&#125;</span>\t<span class="subst">&#123;i.tel&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6- 保存学员信息</span></span><br><span class="line">    <span class="comment"># 即将学员的信息写入student.data文件中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        f = open(<span class="string">'student.data'</span>, <span class="string">'w'</span>)</span><br><span class="line">        <span class="comment"># 将student_list中的内容更改后写入程序</span></span><br><span class="line">        <span class="comment"># 写入的内容必须是字符串</span></span><br><span class="line">        <span class="comment"># 直接写入的列表将会是一个字符串形式，但是不会进行单排的分页，所以需要将它一个一个的展开</span></span><br><span class="line">        <span class="comment"># new_list = []</span></span><br><span class="line">        <span class="comment"># for i in self.student_list:</span></span><br><span class="line">        <span class="comment">#     new_list.append(i.__dict__)</span></span><br><span class="line">        new_list = [i.__dict__ <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list]</span><br><span class="line">        f.write(str(new_list))</span><br><span class="line"></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个符号的意思</span></span><br><span class="line"><span class="comment"># __dict__?直接调用类别中的那列的字典</span></span><br><span class="line"><span class="comment"># 1. 定义类</span></span><br><span class="line"><span class="comment"># class A(object):</span></span><br><span class="line"><span class="comment">#     a = 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def __init__(self):</span></span><br><span class="line"><span class="comment">#         self.b = 1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 2. 创建对象</span></span><br><span class="line"><span class="comment"># aa = A()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 3. 调用__dict__</span></span><br><span class="line"><span class="comment"># print(A.__dict__)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(aa.__dict__)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    # 用只读的形式打开文件</span></span><br><span class="line"><span class="string">    f = open('student.data', 'r')</span></span><br><span class="line"><span class="string">    print(f'文件夹中有该文件')</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    # 如果发生了异常，则在文件夹中创建一个新的文件，用w写入文件</span></span><br><span class="line"><span class="string">    f = open('student.data', 'w')</span></span><br><span class="line"><span class="string">    print(f'创建一个新的文件')</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    # 没有异常才执行的语句，try能够运行才执行的语句</span></span><br><span class="line"><span class="string">    # f.read()读取文件夹中的参数，内容</span></span><br><span class="line"><span class="string">    data = f.read()</span></span><br><span class="line"><span class="string">    # 查看data内的参数内容</span></span><br><span class="line"><span class="string">    print(type(data))</span></span><br><span class="line"><span class="string">    # '[&#123;'name': 'aaa', 'gender': 'nan', 'tel': '11111111'&#125;]'</span></span><br><span class="line"><span class="string">    # data是字符串形式，去除[]列表外的'',使用eval，转换为list</span></span><br><span class="line"><span class="string">    data_list = eval(data)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(f'将字符串&#123;type(data)&#125;转换为列表&#123;type(data_list)&#125;:&#123;data_list&#125;')</span></span><br><span class="line"><span class="string">    print(f'字典的key:&#123;data_list[0].keys()&#125;, 字典的values: &#123;data_list[0].values()&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    name = data_list[0]['name']</span></span><br><span class="line"><span class="string">    gender = data_list[0]['gender']</span></span><br><span class="line"><span class="string">    tel = data_list[0]['tel']</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">    # 不管成功与否，关闭文件夹</span></span><br><span class="line"><span class="string">    f.close()</span></span><br><span class="line"><span class="string">for i in data_list:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">    print(1)</span></span><br><span class="line"><span class="string">    self.student_list = [Student(i['name'], i['gender'], i['tel']) for i in new_list]</span></span><br><span class="line"><span class="string">    生成一个字典i: dict, &#123;'name': 'aaa', 'gender': 'nan', 'tel': '11111111'&#125;</span></span><br><span class="line"><span class="string">    i['name'] = value</span></span><br><span class="line"><span class="string">    # 然后将其赋值到student的属性里面</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="生成一个主程序进行运行"><a href="#生成一个主程序进行运行" class="headerlink" title="生成一个主程序进行运行"></a>生成一个主程序进行运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/28</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个主程序进行运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MangerSystem <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 已经在MangerSystem进行了调用</span></span><br><span class="line"><span class="comment"># from student import *</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启动管理系统</span></span><br><span class="line"><span class="comment"># 保证是当前文件运行才启动管理系统：if --创建对象并调用run方法</span></span><br><span class="line"><span class="comment"># 每个python模块（python文件，也就是此处的 test.py 和 import_test.py）都包含内置的变量</span></span><br><span class="line"><span class="comment"># __name__，当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；</span></span><br><span class="line"><span class="comment"># 如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）。</span></span><br><span class="line"><span class="comment"># 而 “__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == 'main' 结果为真。</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    student_manager = MangerSystem()</span><br><span class="line">    student_manager.run()</span><br></pre></td></tr></table></figure><h2 id="生成的界面："><a href="#生成的界面：" class="headerlink" title="生成的界面："></a>生成的界面：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">成功打开文件</span><br><span class="line">请选择以下功能： </span><br><span class="line"><span class="number">1</span>: 添加学员</span><br><span class="line"><span class="number">2</span>: 删除学员</span><br><span class="line"><span class="number">3</span>: 修改学员信息</span><br><span class="line"><span class="number">4</span>: 查询学员信息</span><br><span class="line"><span class="number">5</span>: 显示所有学员信息 不能进行<span class="keyword">break</span>,要不然会导致添加后跳出循环，无法查找到</span><br><span class="line"><span class="number">6</span>: 保存学员信息</span><br><span class="line"><span class="number">7</span>: 退出系统</span><br><span class="line">请输入你需要的功能序号：</span><br></pre></td></tr></table></figure><p><img src="https://pic.wenwen.soso.com/p/20111224/20111224100129-971797133.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象版学员管理系统&quot;&gt;&lt;a href=&quot;#面向对象版学员管理系统&quot; class=&quot;headerlink&quot; title=&quot;面向对象版学员管理系统&quot;&gt;&lt;/a&gt;面向对象版学员管理系统&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-入门复习之模块和包</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</id>
    <published>2020-05-26T10:43:10.000Z</published>
    <updated>2020-05-26T10:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-入门复习之模块和包"><a href="#python-入门复习之模块和包" class="headerlink" title="python-入门复习之模块和包"></a>python-入门复习之模块和包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">模块</span></span><br><span class="line"><span class="string">Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">模块能定义函数，类和变量，模块里也能包含可执行的代码。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  导入模块的方式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- import 模块名</span></span><br><span class="line"><span class="string">- from 模块名 import 功能名</span></span><br><span class="line"><span class="string">- from 模块名 import *</span></span><br><span class="line"><span class="string">- import 模块名 as 别名</span></span><br><span class="line"><span class="string">- from 模块名 import 功能名 as 别名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 1. 导入模块</span></span><br><span class="line"><span class="string">import 模块名</span></span><br><span class="line"><span class="string">import 模块名1, 模块名2...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2. 调用功能</span></span><br><span class="line"><span class="string">模块名.功能名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 1.1.2.2 from..import..</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from 模块名 import 功能1, 功能2, 功能3...</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 体验</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from math import sqrt</span></span><br><span class="line"><span class="string">print(sqrt(9))</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 1.1.2.3 from .. import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from 模块名 import *</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 体验</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from math import *</span></span><br><span class="line"><span class="string">print(sqrt(9))</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 1.1.2.4 as定义别名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string"># 模块定义别名</span></span><br><span class="line"><span class="string">import 模块名 as 别名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 功能定义别名</span></span><br><span class="line"><span class="string">from 模块名 import 功能 as 别名</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 体验</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string"># 模块别名</span></span><br><span class="line"><span class="string">import time as tt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tt.sleep(2)</span></span><br><span class="line"><span class="string">print('hello')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 功能别名</span></span><br><span class="line"><span class="string">from time import sleep as sl</span></span><br><span class="line"><span class="string">sl(2)</span></span><br><span class="line"><span class="string">print('hello')</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为`__init__.py` 文件，那么这个文件夹就称之为包。</span></span><br><span class="line"><span class="string">## 2.1 制作包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：新建包后，包内部会自动创建`__init__.py`文件，这个文件控制着包的导入行为。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import</span></span><br><span class="line"><span class="string">包名.模块名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">包名.模块名.目标</span></span><br><span class="line"><span class="string">必须在`__init__.py`文件中添加`__all__ = []`，控制允许导入的模块列表。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 导入模块方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">import 模块名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from 模块名 import 目标</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from 模块名 import *</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 导入包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">import 包名.模块名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from 包名 import *</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- `__all__ = []` ：允许导入的模块或功能列表</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="https://i01piccdn.sogoucdn.com/2d90c1f579748784" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-入门复习之模块和包&quot;&gt;&lt;a href=&quot;#python-入门复习之模块和包&quot; class=&quot;headerlink&quot; title=&quot;python-入门复习之模块和包&quot;&gt;&lt;/a&gt;python-入门复习之模块和包&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-入门复习之异常</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/</id>
    <published>2020-05-26T10:38:15.000Z</published>
    <updated>2020-05-26T10:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-入门复习之异常"><a href="#python-入门复习之异常" class="headerlink" title="python-入门复习之异常"></a>python-入门复习之异常</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的"异常"。</span></span><br><span class="line"><span class="string">异常的写法</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    可能发生错误的代码</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    如果出现异常执行的代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">捕获指定异常</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    可能发生错误的代码</span></span><br><span class="line"><span class="string">except 异常类型:</span></span><br><span class="line"><span class="string">    如果捕获到该异常类型执行的代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(num)</span></span><br><span class="line"><span class="string">except NameError:</span></span><br><span class="line"><span class="string">    print('有错误')</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</span></span><br><span class="line"><span class="string">2. 一般try下方只放一行尝试执行的代码。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(1/0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">except (NameError, ZeroDivisionError):</span></span><br><span class="line"><span class="string">    print('有错误')</span></span><br><span class="line"><span class="string">捕获异常描述信息</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(num)</span></span><br><span class="line"><span class="string">except (NameError, ZeroDivisionError) as result:</span></span><br><span class="line"><span class="string">    print(result)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">捕获所有异常</span></span><br><span class="line"><span class="string">Exception是所有程序异常类的父类。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(num)</span></span><br><span class="line"><span class="string">except Exception as result:</span></span><br><span class="line"><span class="string">    print(result)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">else表示的是如果没有异常要执行的代码。</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(1)</span></span><br><span class="line"><span class="string">except Exception as result:</span></span><br><span class="line"><span class="string">    print(result)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    print('我是else，是没有异常的时候执行的代码')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">finally表示的是无论是否异常都要执行的代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异常语法</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">  可能发生异常的代码</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">  如果出现异常执行的代码</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">  没有异常执行的代码</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">  无论是否异常都要执行的代码</span></span><br><span class="line"><span class="string">捕获异常</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">except 异常类型:</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">except 异常类型 as xx:</span></span><br><span class="line"><span class="string">代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">自定义异常</span></span><br><span class="line"><span class="string"># 1. 自定义异常类</span></span><br><span class="line"><span class="string">class 异常类类名(Exception):</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 设置抛出异常的描述信息</span></span><br><span class="line"><span class="string">    def __str__(self):</span></span><br><span class="line"><span class="string">      return ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2. 抛出异常</span></span><br><span class="line"><span class="string">raise 异常类名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 捕获异常</span></span><br><span class="line"><span class="string">except Exception...</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://i2.hdslb.com/bfs/archive/471e7d5ae35e9c08d40cff62982f9d6e1da9b456.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-入门复习之异常&quot;&gt;&lt;a href=&quot;#python-入门复习之异常&quot; class=&quot;headerlink&quot; title=&quot;python-入门复习之异常&quot;&gt;&lt;/a&gt;python-入门复习之异常&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-入门复习面向对象</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-05-26T08:45:05.000Z</published>
    <updated>2020-05-26T08:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-入门复习面向对象"><a href="#python-入门复习面向对象" class="headerlink" title="python-入门复习面向对象"></a>python-入门复习面向对象</h1><p>很类似于数据库slpdb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">面向对象基础</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">==面向对象就是将编程当成是一个事物，对外界来说，事物是直接使用的，不用去管他内部的情况。而编程就是设置事物能够做什么事。==</span></span><br><span class="line"><span class="string">类和对象的关系：用类去创建一个对象。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类是对一系列具有相同==特征==和==行为==的事物的统称，是一个==抽象的概念==，不是真实存在的事物。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 特征即是属性</span></span><br><span class="line"><span class="string">- 行为即是方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象是类创建出来的真实存在的事物</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 定义类</span></span><br><span class="line"><span class="string">Python2中类分为：经典类 和 新式类</span></span><br><span class="line"><span class="string">class 类名():</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">注意：类名要满足标识符命名规则，同时遵循==大驼峰命名习惯==。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def wash(self):</span></span><br><span class="line"><span class="string">        print('我会洗衣服')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不由任意内置类型派生出的类，称之为经典类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class 类名:</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象又名实例。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string">对象名 = 类名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建对象</span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="string">print(haier1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># haier对象调用实例方法</span></span><br><span class="line"><span class="string">haier1.wash()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">self指的是调用该函数的对象。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 1. 定义类</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def wash(self):</span></span><br><span class="line"><span class="string">        print('我会洗衣服')</span></span><br><span class="line"><span class="string">        # &lt;__main__.Washer object at 0x0000024BA2B34240&gt;</span></span><br><span class="line"><span class="string">        print(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2. 创建对象</span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="string">print(haier1)</span></span><br><span class="line"><span class="string"># haier1对象调用实例方法</span></span><br><span class="line"><span class="string">haier1.wash()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier2 = Washer()</span></span><br><span class="line"><span class="string"># &lt;__main__.Washer object at 0x0000022005857EF0&gt;</span></span><br><span class="line"><span class="string">print(haier2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">打印对象和self得到的结果是一致的，都是当前对象的内存中存储地址。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象名.属性名 = 值</span></span><br><span class="line"><span class="string">对象名.属性名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(f'haier1洗衣机的宽度是&#123;haier1.width&#125;')</span></span><br><span class="line"><span class="string">print(f'haier1洗衣机的高度是&#123;haier1.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">self.属性名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 定义类</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def print_info(self):</span></span><br><span class="line"><span class="string">        # 类里面获取实例属性</span></span><br><span class="line"><span class="string">        print(f'haier1洗衣机的宽度是&#123;self.width&#125;')</span></span><br><span class="line"><span class="string">        print(f'haier1洗衣机的高度是&#123;self.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建对象</span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 添加实例属性</span></span><br><span class="line"><span class="string">haier1.width = 500</span></span><br><span class="line"><span class="string">haier1.height = 800</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在Python中，`__xx__()`的函数叫做魔法方法，指的是具有特殊功能的函数。</span></span><br><span class="line"><span class="string">==`__init__()`方法的作用：初始化对象。==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 定义初始化功能的函数</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        # 添加实例属性</span></span><br><span class="line"><span class="string">        self.width = 500</span></span><br><span class="line"><span class="string">        self.height = 800</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def print_info(self):</span></span><br><span class="line"><span class="string">        # 类里面调用实例属性</span></span><br><span class="line"><span class="string">        print(f'洗衣机的宽度是&#123;self.width&#125;, 高度是&#123;self.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string">haier1.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- `__init__()`方法，在创建一个对象时默认被调用，不需要手动调用</span></span><br><span class="line"><span class="string">- `__init__(self)`中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一个类可以创建多个对象，如何对不同的对象设置不同的初始化属性呢？</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def __init__(self, width, height):</span></span><br><span class="line"><span class="string">        self.width = width</span></span><br><span class="line"><span class="string">        self.height = height</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def print_info(self):</span></span><br><span class="line"><span class="string">        print(f'洗衣机的宽度是&#123;self.width&#125;')</span></span><br><span class="line"><span class="string">        print(f'洗衣机的高度是&#123;self.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1 = Washer(10, 20)</span></span><br><span class="line"><span class="string">haier1.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier2 = Washer(30, 40)</span></span><br><span class="line"><span class="string">haier2.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当使用print输出对象的时候，默认打印对象的内存地址。如果类定义了`__str__`方法，那么就会打印从在这个方法中 return 的数据。</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def __init__(self, width, height):</span></span><br><span class="line"><span class="string">        self.width = width</span></span><br><span class="line"><span class="string">        self.height = height</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __str__(self):</span></span><br><span class="line"><span class="string">        return '这是海尔洗衣机的说明书'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1 = Washer(10, 20)</span></span><br><span class="line"><span class="string"># 这是海尔洗衣机的说明书</span></span><br><span class="line"><span class="string">print(haier1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当删除对象时，python解释器也会默认调用`__del__()`方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">#  总结</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 面向对象重要组成部分</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类</span></span><br><span class="line"><span class="string">    - 创建类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  class 类名():</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  对象名 = 类名()</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 添加对象属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类外面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  对象名.属性名 = 值</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类里面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  self.属性名 = 值</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 获取对象属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类外面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  对象名.属性名</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类里面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  self.属性名</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 魔法方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - `__init__()`: 初始化</span></span><br><span class="line"><span class="string">  - `__str__()`:输出对象信息</span></span><br><span class="line"><span class="string">  - `__del__()`:删除对象时调用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">class 类名(object):</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 父类A</span></span><br><span class="line"><span class="string">class A(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.num = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def info_print(self):</span></span><br><span class="line"><span class="string">        print(self.num)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 子类B</span></span><br><span class="line"><span class="string">class B(A):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result = B()</span></span><br><span class="line"><span class="string">result.info_print()  # 1</span></span><br><span class="line"><span class="string">在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">单继承</span></span><br><span class="line"><span class="string"># 1. 师父类</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string"># 2. 徒弟类</span></span><br><span class="line"><span class="string">class Prentice(Master):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 3. 创建对象daqiu</span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string"># 4. 对象访问实例属性</span></span><br><span class="line"><span class="string">print(daqiu.kongfu)</span></span><br><span class="line"><span class="string"># 5. 对象调用实例方法</span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> 多继承</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建学校类</span></span><br><span class="line"><span class="string">class School(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Prentice(School, Master):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string">print(daqiu.kongfu)</span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string">注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">子类重写父类同名方法和属性</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class School(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 独创配方</span></span><br><span class="line"><span class="string">class Prentice(School, Master):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[独创煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string">print(daqiu.kongfu)</span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(Prentice.__mro__)</span></span><br><span class="line"><span class="string">子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">子类调用父类的同名方法和属性</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class School(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Prentice(School, Master):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[独创煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        # 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化</span></span><br><span class="line"><span class="string">        self.__init__()</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化</span></span><br><span class="line"><span class="string">    def make_master_cake(self):</span></span><br><span class="line"><span class="string">        Master.__init__(self)</span></span><br><span class="line"><span class="string">        Master.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_school_cake(self):</span></span><br><span class="line"><span class="string">        School.__init__(self)</span></span><br><span class="line"><span class="string">        School.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_master_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_school_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&gt; 使用super() 可以自动查找父类。调用顺序遵循 `__mro__` 类属性的顺序。比较适合单继承使用。</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class School(Master):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法2.1</span></span><br><span class="line"><span class="string">        # super(School, self).__init__()</span></span><br><span class="line"><span class="string">        # super(School, self).make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法2.2</span></span><br><span class="line"><span class="string">        super().__init__()</span></span><br><span class="line"><span class="string">        super().make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Prentice(School):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[独创煎饼果子技术]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        self.__init__()</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装</span></span><br><span class="line"><span class="string">    def make_master_cake(self):</span></span><br><span class="line"><span class="string">        Master.__init__(self)</span></span><br><span class="line"><span class="string">        Master.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_school_cake(self):</span></span><br><span class="line"><span class="string">        School.__init__(self)</span></span><br><span class="line"><span class="string">        School.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 一次性调用父类的同名属性和方法</span></span><br><span class="line"><span class="string">    def make_old_cake(self):</span></span><br><span class="line"><span class="string">        # 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改</span></span><br><span class="line"><span class="string">        # Master.__init__(self)</span></span><br><span class="line"><span class="string">        # Master.make_cake(self)</span></span><br><span class="line"><span class="string">        # School.__init__(self)</span></span><br><span class="line"><span class="string">        # School.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法二: super()</span></span><br><span class="line"><span class="string">        # 方法2.1 super(当前类名, self).函数()</span></span><br><span class="line"><span class="string">        # super(Prentice, self).__init__()</span></span><br><span class="line"><span class="string">        # super(Prentice, self).make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法2.2 super().函数()</span></span><br><span class="line"><span class="string">        super().__init__()</span></span><br><span class="line"><span class="string">        super().make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_old_cake()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 继承的特点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 子类默认拥有父类的所有属性和方法</span></span><br><span class="line"><span class="string">  - 子类重写父类同名方法和属性</span></span><br><span class="line"><span class="string">  - 子类调用父类同名方法和属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- super()方法快速调用父类方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 私有权限</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 不能继承给子类的属性和方法需要添加私有权限</span></span><br><span class="line"><span class="string">  - 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class 类名():</span></span><br><span class="line"><span class="string">  # 私有属性</span></span><br><span class="line"><span class="string">  __属性名 = 值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # 私有方法</span></span><br><span class="line"><span class="string">  def __函数名(self):</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 封装</span></span><br><span class="line"><span class="string">  - 将属性和方法书写到类的里面的操作即为封装</span></span><br><span class="line"><span class="string">  - 封装可以为属性和方法添加私有权限</span></span><br><span class="line"><span class="string">- 继承</span></span><br><span class="line"><span class="string">  - 子类默认继承父类的所有属性和方法</span></span><br><span class="line"><span class="string">  - 子类可以重写父类属性和方法</span></span><br><span class="line"><span class="string">- 多态</span></span><br><span class="line"><span class="string">  - 传入不同的对象，产生不同的结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</span></span><br><span class="line"><span class="string">- 好处：调用灵活，有了多态，更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化！</span></span><br><span class="line"><span class="string">- 实现步骤：</span></span><br><span class="line"><span class="string">  - 定义父类，并提供公共方法</span></span><br><span class="line"><span class="string">  - 定义子类，并重写父类方法</span></span><br><span class="line"><span class="string">  - 传递子类对象给调用者，可以看到不同子类执行效果不同</span></span><br><span class="line"><span class="string">class Dog(object):</span></span><br><span class="line"><span class="string">    def work(self):  # 父类提供统一的方法，哪怕是空方法</span></span><br><span class="line"><span class="string">        print('指哪打哪...')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class ArmyDog(Dog):  # 继承Dog类</span></span><br><span class="line"><span class="string">    def work(self):  # 子类重写父类同名方法</span></span><br><span class="line"><span class="string">        print('追击敌人...')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class DrugDog(Dog):</span></span><br><span class="line"><span class="string">    def work(self):</span></span><br><span class="line"><span class="string">        print('追查毒品...')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Person(object):</span></span><br><span class="line"><span class="string">    def work_with_dog(self, dog):  # 传入不同的对象，执行不同的代码，即不同的work函数</span></span><br><span class="line"><span class="string">        dog.work()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ad = ArmyDog()</span></span><br><span class="line"><span class="string">dd = DrugDog()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Person()</span></span><br><span class="line"><span class="string">daqiu.work_with_dog(ad)</span></span><br><span class="line"><span class="string">daqiu.work_with_dog(dd)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">### 设置和访问类属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 类属性就是 **类对象** 所拥有的属性，它被 **该类的所有实例对象 所共有**。</span></span><br><span class="line"><span class="string">- 类属性可以使用 **类对象** 或 **实例对象** 访问。</span></span><br><span class="line"><span class="string">class Dog(object):</span></span><br><span class="line"><span class="string">    tooth = 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wangcai = Dog()</span></span><br><span class="line"><span class="string">xiaohei = Dog()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(Dog.tooth)  # 10</span></span><br><span class="line"><span class="string">print(wangcai.tooth)  # 10</span></span><br><span class="line"><span class="string">print(xiaohei.tooth)  # 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类属性的优点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- **记录的某项数据 始终保持一致时**，则定义类属性。</span></span><br><span class="line"><span class="string">- **实例属性** 要求 **每个对象** 为其 **单独开辟一份内存空间** 来记录数据，而 **类属性** 为全类所共有 ，**仅占用一份内存**，**更加节省内存空间**。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 需要用装饰器`@classmethod`来标识其为类方法，对于类方法，**第一个参数必须是类对象**，一般以`cls`作为第一个参数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">### 类方法使用场景</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 当方法中 **需要使用类对象** (如访问私有类属性等)时，定义类方法</span></span><br><span class="line"><span class="string">- 类方法一般和类属性配合使用</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">### 静态方法特点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 需要通过装饰器`@staticmethod`来进行修饰，**静态方法既不需要传递类对象也不需要传递实例对象（形参没有self/cls）**。</span></span><br><span class="line"><span class="string">- 静态方法 也能够通过 **实例对象** 和 **类对象** 去访问。</span></span><br><span class="line"><span class="string">静态方法使用场景</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 当方法中 **既不需要使用实例对象**(如实例对象，实例属性)，**也不需要使用类对象** (如类属性、类方法、创建实例等)时，定义静态方法</span></span><br><span class="line"><span class="string">- **取消不需要的参数传递**，有利于 **减少不必要的内存占用和性能消耗**</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">class Dog(object):</span></span><br><span class="line"><span class="string">    @staticmethod</span></span><br><span class="line"><span class="string">    def info_print():</span></span><br><span class="line"><span class="string">        print('这是一个狗类，用于创建狗实例....')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wangcai = Dog()</span></span><br><span class="line"><span class="string"># 静态方法既可以使用对象访问又可以使用类访问</span></span><br><span class="line"><span class="string">wangcai.info_print()</span></span><br><span class="line"><span class="string">Dog.info_print()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 面向对象三大特性</span></span><br><span class="line"><span class="string">  - 封装</span></span><br><span class="line"><span class="string">  - 继承</span></span><br><span class="line"><span class="string">  - 多态</span></span><br><span class="line"><span class="string">- 类属性</span></span><br><span class="line"><span class="string">  - 归属于类对象的属性，所有对象共有的属性</span></span><br><span class="line"><span class="string">- 实例属性</span></span><br><span class="line"><span class="string">- 类方法</span></span><br><span class="line"><span class="string">@classmethod</span></span><br><span class="line"><span class="string">def xx():</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">静态方法</span></span><br><span class="line"><span class="string">@staticmethod</span></span><br><span class="line"><span class="string">def xx():</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://www.zhouyi.cc/uploads/allimg/151211/4-15121114503Q54.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-入门复习面向对象&quot;&gt;&lt;a href=&quot;#python-入门复习面向对象&quot; class=&quot;headerlink&quot; title=&quot;python-入门复习面向对象&quot;&gt;&lt;/a&gt;python-入门复习面向对象&lt;/h1&gt;&lt;p&gt;很类似于数据库slpdb&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python_入门复习之文件读取</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</id>
    <published>2020-05-26T05:55:41.000Z</published>
    <updated>2020-05-26T05:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-文件读取"><a href="#python-文件读取" class="headerlink" title="python-文件读取"></a>python-文件读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件的基本操作 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 打开</span></span><br><span class="line"><span class="string">- 读写</span></span><br><span class="line"><span class="string">- 关闭</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">打开：</span></span><br><span class="line"><span class="string">在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</span></span><br><span class="line"><span class="string">open(name, mode)</span></span><br><span class="line"><span class="string">name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">| 模式 | 描述                                                         |</span></span><br><span class="line"><span class="string">| :--: | ------------------------------------------------------------ |</span></span><br><span class="line"><span class="string">|  r   | 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 |</span></span><br><span class="line"><span class="string">|  rb  | 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。 |</span></span><br><span class="line"><span class="string">|  r+  | 打开一个文件用于读写。文件指针将会放在文件的开头。           |</span></span><br><span class="line"><span class="string">| rb+  | 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。 |</span></span><br><span class="line"><span class="string">|  w   | 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">|  wb  | 以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">|  w+  | 打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">| wb+  | 以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">|  a   | 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |</span></span><br><span class="line"><span class="string">|  ab  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |</span></span><br><span class="line"><span class="string">|  a+  | 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 |</span></span><br><span class="line"><span class="string">| ab+  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。 |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f = open('test.txt', 'w')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 1. 打开文件</span></span><br><span class="line"><span class="string">f = open('test.txt', 'w')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2.文件写入</span></span><br><span class="line"><span class="string">f.write('hello world')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 3. 关闭文件</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. `w  `和`a`模式：如果文件不存在则创建该文件；如果文件存在，`w`模式先清空再写入，`a`模式直接末尾追加。</span></span><br><span class="line"><span class="string">2. `r`模式：如果文件不存在则报错。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">文件对象.read(num)</span></span><br><span class="line"><span class="string">&gt; num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f = open('test.txt')</span></span><br><span class="line"><span class="string">content = f.readlines()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ['hello world\n', 'abcdefg\n', 'aaa\n', 'bbb\n', 'ccc']</span></span><br><span class="line"><span class="string">print(content)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 关闭文件</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readline()一次读取一行内容。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">文件对象.seek(偏移量, 起始位置)</span></span><br><span class="line"><span class="string">起始位置：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 0：文件开头</span></span><br><span class="line"><span class="string">- 1：当前位置</span></span><br><span class="line"><span class="string">- 2：文件结尾</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">关闭</span></span><br><span class="line"><span class="string">文件对象.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</span></span><br><span class="line"><span class="string">导入os模块</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string">使用`os`模块相关功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">os.函数名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">文件重命名</span></span><br><span class="line"><span class="string">os.rename(目标文件名, 新文件名)</span></span><br><span class="line"><span class="string">删除文件</span></span><br><span class="line"><span class="string">os.remove(目标文件名)</span></span><br><span class="line"><span class="string">创建文件夹</span></span><br><span class="line"><span class="string">os.mkdir(文件夹名字)</span></span><br><span class="line"><span class="string">删除文件夹</span></span><br><span class="line"><span class="string">os.rmdir(文件夹名字)</span></span><br><span class="line"><span class="string">获取当前目录</span></span><br><span class="line"><span class="string">os.getcwd()</span></span><br><span class="line"><span class="string">改变默认目录</span></span><br><span class="line"><span class="string">os.chdir(目录)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取目录列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">os.listdir(目录)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 步骤</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 设置添加删除字符串的的标识</span></span><br><span class="line"><span class="string">2. 获取指定目录的所有文件</span></span><br><span class="line"><span class="string">3. 将原有文件名添加/删除指定字符串，构造新名字</span></span><br><span class="line"><span class="string">4. os.rename()重命名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span></span><br><span class="line"><span class="string">flag = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取指定目录</span></span><br><span class="line"><span class="string">dir_name = './'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取指定目录的文件列表</span></span><br><span class="line"><span class="string">file_list = os.listdir(dir_name)</span></span><br><span class="line"><span class="string"># print(file_list)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 遍历文件列表内的文件</span></span><br><span class="line"><span class="string">for name in file_list:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 添加指定字符</span></span><br><span class="line"><span class="string">    if flag == 1:</span></span><br><span class="line"><span class="string">        new_name = 'Python-' + name</span></span><br><span class="line"><span class="string">    # 删除指定字符</span></span><br><span class="line"><span class="string">    elif flag == 2:</span></span><br><span class="line"><span class="string">        num = len('Python-')</span></span><br><span class="line"><span class="string">        new_name = name[num:]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 打印新文件名，测试程序正确性</span></span><br><span class="line"><span class="string">    print(new_name)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 重命名</span></span><br><span class="line"><span class="string">    os.rename(dir_name+name, dir_name+new_name)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 六. 总结</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 文件操作步骤</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 打开</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  文件对象 = open(目标文件, 访问模式)</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 读</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    文件对象.read()</span></span><br><span class="line"><span class="string">    文件对象.readlines()</span></span><br><span class="line"><span class="string">    文件对象.readline()</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 写</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    文件对象.write()</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - seek()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 关闭</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  文件对象.close()</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 主访问模式</span></span><br><span class="line"><span class="string">  - w：写，文件不存在则新建该文件</span></span><br><span class="line"><span class="string">  - r：读，文件不存在则报错</span></span><br><span class="line"><span class="string">  - a：追加</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 文件和文件夹操作</span></span><br><span class="line"><span class="string">  - 重命名：os.rename()</span></span><br><span class="line"><span class="string">  - 获取当前目录：os.getcwd()</span></span><br><span class="line"><span class="string">  - 获取目录列表：os.listdir()</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://img3.duitang.com/uploads/item/201405/02/20140502173129_G8kzT.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-文件读取&quot;&gt;&lt;a href=&quot;#python-文件读取&quot; class=&quot;headerlink&quot; title=&quot;python-文件读取&quot;&gt;&lt;/a&gt;python-文件读取&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python_入门复习之函数</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0/</id>
    <published>2020-05-26T05:50:42.000Z</published>
    <updated>2020-05-26T05:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-函数"><a href="#python-函数" class="headerlink" title="python-函数"></a>python-函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">函数复习：</span></span><br><span class="line"><span class="string">&gt; 函数在开发过程中，可以更高效的实现==代码重用==。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义函数：</span></span><br><span class="line"><span class="string">def 函数名(参数):</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2.</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用函数：</span></span><br><span class="line"><span class="string">函数名(参数)</span></span><br><span class="line"><span class="string">1. 不同的需求，参数可有可无。</span></span><br><span class="line"><span class="string">2. 在Python中，函数必须==先定义后使用==。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义函数的说明文档</span></span><br><span class="line"><span class="string">def 函数名(参数):</span></span><br><span class="line"><span class="string">    """ 说明文档的位置 """</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">查看函数的说明文档</span></span><br><span class="line"><span class="string">help(函数名)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def sum_num(a, b):</span></span><br><span class="line"><span class="string">    """ 求和函数 """</span></span><br><span class="line"><span class="string">    return a + b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">help(sum_num)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 形参：函数定义时书写的参数(非真实数据)</span></span><br><span class="line"><span class="string">  - 实参：函数调用时书写的参数(真实数据)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的返回值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 作用：函数调用后，返回需要的计算结果</span></span><br><span class="line"><span class="string">  - 写法</span></span><br><span class="line"><span class="string">return 表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的说明文档</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 作用：保存函数解释说明的信息</span></span><br><span class="line"><span class="string">  - 写法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  def 函数名():</span></span><br><span class="line"><span class="string">      """ 函数说明文档 """</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数嵌套调用：一个函数内部嵌套调用另外一个函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">变量作用域</span></span><br><span class="line"><span class="string">变量作用域指的是变量生效的范围，主要分为两类：==局部变量==和==全局变量==。</span></span><br><span class="line"><span class="string">所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。</span></span><br><span class="line"><span class="string">局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 全局变量</span></span><br><span class="line"><span class="string">所谓全局变量，指的是在函数体内、外都能生效的变量。</span></span><br><span class="line"><span class="string"> # global 关键字声明a是全局变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def return_num():</span></span><br><span class="line"><span class="string">    return 1</span></span><br><span class="line"><span class="string">    return 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result = return_num()</span></span><br><span class="line"><span class="string">print(result)  # 1</span></span><br><span class="line"><span class="string">只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</span></span><br><span class="line"><span class="string">`return a, b`写法，返回多个数据的时候，默认是元组类型。</span></span><br><span class="line"><span class="string">&gt; 1. return后面可以连接列表、元组或字典，以返回多个值。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用函数时根据函数定义的参数位置来传递参数。</span></span><br><span class="line"><span class="string">传递和定义参数的顺序及个数必须一致。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。</span></span><br><span class="line"><span class="string">此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</span></span><br><span class="line"><span class="string">包裹位置传递</span></span><br><span class="line"><span class="string">def user_info(*args):</span></span><br><span class="line"><span class="string">    print(args)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ('TOM',)</span></span><br><span class="line"><span class="string">user_info('TOM')</span></span><br><span class="line"><span class="string"># ('TOM', 18)</span></span><br><span class="line"><span class="string">user_info('TOM', 18)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">包裹关键字传递</span></span><br><span class="line"><span class="string">def user_info(**kwargs):</span></span><br><span class="line"><span class="string">    print(kwargs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># &#123;'name': 'TOM', 'age': 18, 'id': 110&#125;</span></span><br><span class="line"><span class="string">user_info(name='TOM', age=18, id=110)</span></span><br><span class="line"><span class="string">无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(name, age, gender)</span>:</span></span><br><span class="line">    print(<span class="string">f'您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">'Rose'</span>, age=<span class="number">20</span>, gender=<span class="string">'女'</span>)</span><br><span class="line">user_info(<span class="string">'小明'</span>, gender=<span class="string">'男'</span>, age=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆包：元组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1, num2 = return_num()</span><br><span class="line">print(num1)  <span class="comment"># 100</span></span><br><span class="line">print(num2)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆包：字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'TOM'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典进行拆包，取出来的是字典的key</span></span><br><span class="line">print(a)  <span class="comment"># name</span></span><br><span class="line">print(b)  <span class="comment"># age</span></span><br><span class="line"></span><br><span class="line">print(dict1[a])  <span class="comment"># TOM</span></span><br><span class="line">print(dict1[b])  <span class="comment"># 18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">**我们可以用`id()`来判断两个变量是否为同一个值的引用。** 我们可以将id值理解为那块内存的地址标识。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 1. int类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">print(b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">print(id(a))  <span class="comment"># 140708464157520</span></span><br><span class="line">print(id(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">print(b)  <span class="comment"># 1,说明int类型为不可变类型</span></span><br><span class="line"></span><br><span class="line">print(id(a))  <span class="comment"># 140708464157552，此时得到是的数据2的内存地址</span></span><br><span class="line">print(id(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">aa = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">bb = aa</span><br><span class="line"></span><br><span class="line">print(id(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line">print(id(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa.append(<span class="number">30</span>)</span><br><span class="line">print(bb)  <span class="comment"># [10, 20, 30], 列表为可变类型</span></span><br><span class="line"></span><br><span class="line">print(id(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line">print(id(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 可变类型</span></span><br><span class="line"><span class="string">  - 列表</span></span><br><span class="line"><span class="string">  - 字典</span></span><br><span class="line"><span class="string">  - 集合</span></span><br><span class="line"><span class="string">- 不可变类型</span></span><br><span class="line"><span class="string">  - 整型</span></span><br><span class="line"><span class="string">  - 浮点型</span></span><br><span class="line"><span class="string">  - 字符串</span></span><br><span class="line"><span class="string">  - 元组</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 变量作用域</span></span><br><span class="line"><span class="string">  - 全局：函数体内外都能生效</span></span><br><span class="line"><span class="string">  - 局部：当前函数体内部生效</span></span><br><span class="line"><span class="string">- 函数多返回值写法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">return 表达式1, 表达式2...</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的参数</span></span><br><span class="line"><span class="string">  - 位置参数</span></span><br><span class="line"><span class="string">    - 形参和实参的个数和书写顺序必须一致</span></span><br><span class="line"><span class="string">  - 关键字参数</span></span><br><span class="line"><span class="string">    - 写法： `key=value`</span></span><br><span class="line"><span class="string">    - 特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</span></span><br><span class="line"><span class="string">  - 缺省参数</span></span><br><span class="line"><span class="string">    - 缺省参数就是默认参数</span></span><br><span class="line"><span class="string">    - 写法：`key=vlaue`</span></span><br><span class="line"><span class="string">  - 不定长位置参数</span></span><br><span class="line"><span class="string">    - 收集所有位置参数，返回一个元组</span></span><br><span class="line"><span class="string">  - 不定长关键字参数</span></span><br><span class="line"><span class="string">    - 收集所有关键字参数，返回一个字典</span></span><br><span class="line"><span class="string">- 引用：Python中，数据的传递都是通过引用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">`abs()`函数可以完成对数字求绝对值计算。</span></span><br><span class="line"><span class="string">`round()`函数可以完成对数字的四舍五入计算。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 递归</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 函数内部自己调用自己</span></span><br><span class="line"><span class="string">  - 必须有出口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- lambda</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  lambda 参数列表: 表达式</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - lambda的参数形式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 无参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 一个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda 参数: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 默认参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda key=value: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 不定长位置参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda *args: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 不定长关键字参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda **kwargs: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 高阶函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 作用：把函数作为参数传入，化简代码</span></span><br><span class="line"><span class="string">  - 内置高阶函数</span></span><br><span class="line"><span class="string">    - map()</span></span><br><span class="line"><span class="string">    - reduce()</span></span><br><span class="line"><span class="string">    - filter()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">strip()函数</span></span><br><span class="line"><span class="string">用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rstrip()函数</span></span><br><span class="line"><span class="string">移除末尾指定字符，默认为空格</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://b-ssl.duitang.com/uploads/item/201608/18/20160818122757_hKY35.thumb.700_0.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-函数&quot;&gt;&lt;a href=&quot;#python-函数&quot; class=&quot;headerlink&quot; title=&quot;python-函数&quot;&gt;&lt;/a&gt;python-函数&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python--入门复习推导式</title>
    <link href="https://esyyes.github.io/2020/05/25/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <id>https://esyyes.github.io/2020/05/25/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%8E%A8%E5%AF%BC%E5%BC%8F/</id>
    <published>2020-05-25T12:00:32.000Z</published>
    <updated>2020-05-25T12:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/25</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">推导式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 列表推导式</span></span><br><span class="line"><span class="string">作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。</span></span><br><span class="line"><span class="string">列表推导式又叫列表生成式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 字典推导式</span></span><br><span class="line"><span class="string">字典推导式作用：快速合并列表为字典或提取字典中目标数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 集合推导式</span></span><br><span class="line"><span class="string">创建一个集合，数据为下方列表的2次方。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 推导式的作用：简化代码</span></span><br><span class="line"><span class="string">- 推导式写法</span></span><br><span class="line"><span class="string"># 列表推导式</span></span><br><span class="line"><span class="string">[xx for xx in range()]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 字典推导式</span></span><br><span class="line"><span class="string">&#123;xx1: xx2 for ... in ...&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 集合推导式</span></span><br><span class="line"><span class="string">&#123;xx for xx in ...&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">列表推导式:</span></span><br><span class="line"><span class="string">需求</span></span><br><span class="line"><span class="string">创建一个0-10的列表。</span></span><br><span class="line"><span class="string">- while循环实现</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 书写循环，依次追加数字到空列表list1中</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    list1.append(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表推导式实现</span></span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：创建0-10的偶数列表</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - 方法一：range()步长实现</span></span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if实现</span></span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">a = [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line">a = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字典：字典key是1-5数字，value是这个数字的2次方</span></span><br><span class="line">dict1 = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line">print(dict1)  <span class="comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将两个列表合并为一个字典</span></span><br><span class="line">list1 = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'gender'</span>]</span><br><span class="line">list2 = [<span class="string">'Tom'</span>, <span class="number">20</span>, <span class="string">'man'</span>]</span><br><span class="line"></span><br><span class="line">dict1 = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list1))&#125;</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取字典中目标数据</span></span><br><span class="line">counts = &#123;<span class="string">'MBP'</span>: <span class="number">268</span>, <span class="string">'HP'</span>: <span class="number">125</span>, <span class="string">'DELL'</span>: <span class="number">201</span>, <span class="string">'Lenovo'</span>: <span class="number">199</span>, <span class="string">'acer'</span>: <span class="number">99</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：提取上述电脑数量大于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br><span class="line">print(count1)  <span class="comment"># &#123;'MBP': 268, 'DELL': 201&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line"><span class="comment"># 需求：创建一个集合，数据为下方列表的2次方。</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">set1 = &#123;i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1&#125;</span><br><span class="line">print(set1)  <span class="comment"># &#123;1, 4&#125;</span></span><br><span class="line"><span class="comment"># 集合有数据去重功能。</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1590418032012&di=8f830b769f26031c8c45b68d558a566b&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2018-10-25%2F5bd1aa108893e.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——入门复习数据序列</title>
    <link href="https://esyyes.github.io/2020/05/25/python/python%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/"/>
    <id>https://esyyes.github.io/2020/05/25/python/python%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/</id>
    <published>2020-05-25T11:57:35.000Z</published>
    <updated>2020-05-25T11:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/25</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据类型为str(字符串)</span></span><br><span class="line"><span class="string">三引号形式的字符串支持换行。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">"I'm Tom"</span></span><br><span class="line">d = <span class="string">'I\'m Tom'</span></span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">切片是指对操作的对象截取其中一部分的操作。**字符串、列表、元组**都支持切片操作。</span></span><br><span class="line"><span class="string">序列[开始位置下标:结束位置下标:步长]</span></span><br><span class="line"><span class="string">步长是选取间隔，正负整数均可，默认步长为1。</span></span><br><span class="line"><span class="string">左闭右开</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">"abcdefg"</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line">print(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line">print(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line">print(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line">print(name[:<span class="number">-1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line">print(name[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># def</span></span><br><span class="line">print(name[::<span class="number">-1</span>])  <span class="comment"># gfedcba</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</span></span><br><span class="line"><span class="string">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">mystr = <span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line">print(mystr.find(<span class="string">'ands'</span>))  <span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</span></span><br><span class="line"><span class="string">开始和结束位置下标可以省略，表示在整个字符串序列中查找。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">mystr = <span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line">print(mystr.index(<span class="string">'and'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(mystr.index(<span class="string">'and'</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line">print(mystr.index(<span class="string">'ands'</span>))  <span class="comment"># 报错</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</span></span><br><span class="line"><span class="string">字符串序列.replace(旧子串, 新子串, 替换次数)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 结果：hello world he itcast he itheima he Python</span></span><br><span class="line">print(mystr.replace(<span class="string">'and'</span>, <span class="string">'he'</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 下标</span></span><br><span class="line"><span class="string">  - 计算机为数据序列中每个元素分配的从0开始的编号</span></span><br><span class="line"><span class="string">- 切片</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">序列名[开始位置下标:结束位置下标:步长]</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 常用操作方法</span></span><br><span class="line"><span class="string">  - find()</span></span><br><span class="line"><span class="string">  - index()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">列表：</span></span><br><span class="line"><span class="string">[数据1, 数据2, 数据3, 数据4......]</span></span><br><span class="line"><span class="string">列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list[<span class="number">0</span>])  <span class="comment"># Tom</span></span><br><span class="line">print(name_list[<span class="number">1</span>])  <span class="comment"># Lily</span></span><br><span class="line">print(name_list[<span class="number">2</span>])  <span class="comment"># Rose</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># index()：返回指定数据所在位置的下标 。</span></span><br><span class="line"><span class="comment"># 列表序列.index(数据, 开始位置下标, 结束位置下标)</span></span><br><span class="line">print(name_list.index(<span class="string">'Lily'</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count()：统计指定数据在当前列表中出现的次数。</span></span><br><span class="line">print(name_list.count(<span class="string">'Lily'</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="comment"># len()：访问列表长度，即列表中数据的个数。</span></span><br><span class="line">print(len(name_list))  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># append()：列表结尾追加数据。</span></span><br><span class="line">name_list.append(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming']</span></span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># 如果append()追加的数据是一个序列，则追加整个序列到列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'x', 'i', 'a', 'o', 'm', 'i', 'n', 'g']</span></span><br><span class="line">print(name_list)</span><br><span class="line">name_list.extend([<span class="string">'xiaoming'</span>])</span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert()：指定位置新增数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表序列.insert(位置下标, 数据)</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'xiaoming', 'Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="comment"># del 目标</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：报错提示：name 'name_list' is not defined</span></span><br><span class="line"><span class="keyword">del</span> name_list</span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定数据</span></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</span></span><br><span class="line"><span class="comment"># 列表序列.pop(下标)</span></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">del_name = name_list.pop(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：Lily</span></span><br><span class="line">print(del_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Rose']</span></span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表序列.sort( key=None, reverse=False)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">列表序列.sort( key=None, reverse=False)</span></span><br><span class="line"><span class="string">如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为唯一的这个数据的数据类型</span></span><br><span class="line"><span class="string">元组数据不支持修改，只支持查找</span></span><br><span class="line"><span class="string">index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同</span></span><br><span class="line"><span class="string">count()：统计某个数据在当前元组出现的次数。</span></span><br><span class="line"><span class="string">len()：统计元组中数据的个数。 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 多个数据元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个数据元组</span></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">字典特点：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 符号为==大括号==</span></span><br><span class="line"><span class="string">- 数据为==键值对==形式出现</span></span><br><span class="line"><span class="string">- 各个键值对之间用==逗号==隔开</span></span><br><span class="line"><span class="string">一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</span></span><br><span class="line"><span class="string">&gt; 字典为可变类型。</span></span><br><span class="line"><span class="string">del() / del：删除字典或删除字典中指定键值对。</span></span><br><span class="line"><span class="string">clear()：清空字典</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 有数据字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">dict3 = dict()</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">'name'</span>] = <span class="string">'Rose'</span></span><br><span class="line"><span class="comment"># 结果：&#123;'name': 'Rose', 'age': 20, 'gender': '男'&#125;</span></span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">'id'</span>] = <span class="number">110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'name': 'Rose', 'age': 20, 'gender': '男', 'id': 110&#125;</span></span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">字典序列.get(key, 默认值)</span></span><br><span class="line"><span class="string">如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">print(dict1.get(<span class="string">'name'</span>))  <span class="comment"># Tom</span></span><br><span class="line">print(dict1.get(<span class="string">'id'</span>, <span class="number">110</span>))  <span class="comment"># 110</span></span><br><span class="line">print(dict1.get(<span class="string">'id'</span>))  <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  keys()</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">print(dict1.keys())  <span class="comment"># dict_keys(['name', 'age', 'gender'])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># values()</span></span><br><span class="line">print(dict1.values())  <span class="comment"># dict_values(['Tom', 20, '男'])</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">print(dict1.items())  <span class="comment"># dict_items([('name', 'Tom'), ('age', 20), ('gender', '男')])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">创建集合使用`&#123;&#125;`或`set()`， 但是如果要创建空集合只能使用`set()`，因为`&#123;&#125;`用来创建空字典。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">s3 = set(<span class="string">'abcdefg'</span>)</span><br><span class="line">print(s3)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1. 集合可以去掉重复数据；</span></span><br><span class="line"><span class="string">2. 集合数据是无序的，故不支持下标</span></span><br><span class="line"><span class="string">增加数据add()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">s1.add(<span class="number">100</span>)</span><br><span class="line">s1.add(<span class="number">10</span>)</span><br><span class="line">print(s1)  <span class="comment"># &#123;100, 10, 20&#125;</span></span><br><span class="line"><span class="comment"># 因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</span></span><br><span class="line"><span class="comment"># update(), 追加的数据是序列。</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment"># s1.update(100)  # 报错</span></span><br><span class="line">s1.update([<span class="number">100</span>, <span class="number">200</span>])</span><br><span class="line">s1.update(<span class="string">'abc'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove()，删除集合中的指定数据，如果数据不存在则报错。</span></span><br><span class="line"><span class="comment"># discard()，删除集合中的指定数据，如果数据不存在也不会报错。</span></span><br><span class="line"><span class="comment"># pop()，随机删除集合中的某个数据，并返回这个数据。</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">del_num = s1.pop()</span><br><span class="line">print(del_num)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">常见操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 增加数据</span></span><br><span class="line"><span class="string">  - add()</span></span><br><span class="line"><span class="string">  - update()</span></span><br><span class="line"><span class="string">- 删除数据</span></span><br><span class="line"><span class="string">  - remove()</span></span><br><span class="line"><span class="string">  - discard()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">| 运算符 |      描述      |      支持的容器类型      |</span></span><br><span class="line"><span class="string">| :----: | :------------: | :----------------------: |</span></span><br><span class="line"><span class="string">|   +    |      合并      |    字符串、列表、元组    |</span></span><br><span class="line"><span class="string">|   *    |      复制      |    字符串、列表、元组    |</span></span><br><span class="line"><span class="string">|   in   |  元素是否存在  | 字符串、列表、元组、字典 |</span></span><br><span class="line"><span class="string">| not in | 元素是否不存在 | 字符串、列表、元组、字典 |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">'aa'</span></span><br><span class="line">str2 = <span class="string">'bb'</span></span><br><span class="line">str3 = str1 + str2</span><br><span class="line">print(str3)  <span class="comment"># aabb</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line">print(list3)  <span class="comment"># [1, 2, 10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t3 = t1 + t2</span><br><span class="line">print(t3)  <span class="comment"># (10, 20, 100, 200)</span></span><br><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">10</span>)  <span class="comment"># ----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">'hello'</span>]</span><br><span class="line">print(list1 * <span class="number">4</span>)  <span class="comment"># ['hello', 'hello', 'hello', 'hello']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">'world'</span>,)</span><br><span class="line">print(t1 * <span class="number">4</span>)  <span class="comment"># ('world', 'world', 'world', 'world')</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">len()计算容器中元素个数</span></span><br><span class="line"><span class="string">del 或 del()删除</span></span><br><span class="line"><span class="string">max()返回容器中元素最大值</span></span><br><span class="line"><span class="string">min()返回容器中元素最小值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">数据类型转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- tuple()</span></span><br><span class="line"><span class="string">- list()</span></span><br><span class="line"><span class="string">- set()</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1590418032013&di=fe751e385ecab479348d00385ced497d&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2Fc%2F59a52e20e45ed.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_入门复习</title>
    <link href="https://esyyes.github.io/2020/05/21/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2020/05/21/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-05-21T08:28:34.000Z</published>
    <updated>2020-05-25T08:23:33.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python入门复习-变量—循环—条件"><a href="#python入门复习-变量—循环—条件" class="headerlink" title="python入门复习_变量—循环—条件"></a>python入门复习_变量—循环—条件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/21</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python 入门复习</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">注释文件: 多行注释：‘’‘ 。。。’‘’或者“”“。。。”“”</span></span><br><span class="line"><span class="string">         单行注释：#</span></span><br><span class="line"><span class="string">         快捷键  ：ctrl + /</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 由数字、字母、下划线组成</span></span><br><span class="line"><span class="string">- 不能数字开头</span></span><br><span class="line"><span class="string">- 不能使用内置关键字</span></span><br><span class="line"><span class="string">- 严格区分大小写</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">变量命名习惯</span></span><br><span class="line"><span class="string">- 大驼峰：即每个单词首字母都大写，例如：`MyName`。</span></span><br><span class="line"><span class="string">- 小驼峰：第二个（含）以后的单词首字母大写，例如：`myName`。</span></span><br><span class="line"><span class="string">- 下划线：例如：`my_name`。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Debug工具是PyCharm IDE中集成 用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Debug工具使用步骤：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 打断点</span></span><br><span class="line"><span class="string">2. Debug调试</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">检测数据类型的方法：`type()`</span></span><br><span class="line"><span class="string">数据类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 整型：int</span></span><br><span class="line"><span class="string">- 浮点型：float</span></span><br><span class="line"><span class="string">- 字符串：str</span></span><br><span class="line"><span class="string">- 布尔型：bool</span></span><br><span class="line"><span class="string">- 元组：tuple</span></span><br><span class="line"><span class="string">- 集合：set</span></span><br><span class="line"><span class="string">- 字典：dict</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 格式化输出</span></span><br><span class="line"><span class="string">  - 格式化符号</span></span><br><span class="line"><span class="string">  - f-字符串</span></span><br><span class="line"><span class="string">- print的结束符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">所谓的格式化输出即按照一定的格式输出内容</span></span><br><span class="line"><span class="string">| 格式符号 |          转换          </span></span><br><span class="line"><span class="string">| :------: | :--------------------: </span></span><br><span class="line"><span class="string">|  ==%s==  |         字符串         </span></span><br><span class="line"><span class="string">|  ==%d==  |   有符号的十进制整数   </span></span><br><span class="line"><span class="string">|  ==%f==  |         浮点数         </span></span><br><span class="line"><span class="string">|    %c    |          字符          </span></span><br><span class="line"><span class="string">|    %u    |    无符号十进制整数    </span></span><br><span class="line"><span class="string">|    %o    |       八进制整数       </span></span><br><span class="line"><span class="string">|    %x    | 十六进制整数（小写ox） </span></span><br><span class="line"><span class="string">|    %X    | 十六进制整数（大写OX） </span></span><br><span class="line"><span class="string">|    %e    | 科学计数法（小写'e'）  </span></span><br><span class="line"><span class="string">|    %E    | 科学计数法（大写'E'）  </span></span><br><span class="line"><span class="string">|    %g    |      %f和%e的简写      </span></span><br><span class="line"><span class="string">|    %G    |      %f和%E的简写      </span></span><br><span class="line"><span class="string">- %06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</span></span><br><span class="line"><span class="string">- %.2f，表示小数点后显示的小数位数。</span></span><br><span class="line"><span class="string">格式化字符串除了%s，还可以写为`f'&#123;表达式&#125;'`</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  print('') or print("")</span></span><br><span class="line">print(<span class="string">'hello Python'</span>)</span><br><span class="line">print(<span class="string">"hello Python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hello Python</span></span><br><span class="line"><span class="comment"># hello Python</span></span><br><span class="line"></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">'TOM'</span></span><br><span class="line">weight = <span class="number">75.5</span></span><br><span class="line">student_id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM</span></span><br><span class="line">print(<span class="string">'我的名字是%s'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的学号是0001</span></span><br><span class="line">print(<span class="string">'我的学号是%4d'</span> % student_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的体重是75.50公斤</span></span><br><span class="line">print(<span class="string">'我的体重是%.2f公斤'</span> % weight)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM，今年18岁了</span></span><br><span class="line">print(<span class="string">'我的名字是%s，今年%d岁了'</span> % (name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM，明年19岁了</span></span><br><span class="line">print(<span class="string">'我的名字是%s，明年%d岁了'</span> % (name, age + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM，明年19岁了</span></span><br><span class="line">print(<span class="string">f'我的名字是<span class="subst">&#123;name&#125;</span>, 明年<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>岁了'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 转义字符</span></span><br><span class="line"><span class="string">  - \n：换行</span></span><br><span class="line"><span class="string">  - \t：制表符</span></span><br><span class="line"><span class="string">- print结束符</span></span><br><span class="line"><span class="string">print('内容', end="")</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出的 print 函数总结：</span></span><br><span class="line"><span class="string">1. 字符串和数值类型</span></span><br><span class="line"><span class="string">可以直接输出</span></span><br><span class="line"><span class="string">2.变量</span></span><br><span class="line"><span class="string">无论什么类型，数值，布尔，列表，字典...都可以直接输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(1). %字符：标记转换说明符的开始</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(2). 转换标志：-表示左对齐；+表示在转换值之前要加上正负号；“”（空白字符）表示正数之前保留空格；0表示转换值若位数不够则用0填充</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(3). 最小字段宽度：转换后的字符串至少应该具有该值指定的宽度。如果是*，则宽度会从值元组中读出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(4). 点(.)后跟精度值：如果转换的是实数，精度值就表示出现在小数点后的位数。如果转换的是字符串，那么该数字就表示最大字段宽度。如果是*，那么精度将从元组中读出</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">(5).字符串格式化转换类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    print(x, end=<span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">abs(number)，返回数字的绝对值</span></span><br><span class="line"><span class="string">cmath.sqrt(number)，返回平方根，也可以应用于负数</span></span><br><span class="line"><span class="string">float(object)，把字符串和数字转换为浮点数</span></span><br><span class="line"><span class="string">help()，提供交互式帮助</span></span><br><span class="line"><span class="string">input(prompt)，获取用户输入</span></span><br><span class="line"><span class="string">int(object)，把字符串和数字转换为整数</span></span><br><span class="line"><span class="string">math.ceil(number)，返回数的上入整数，返回值的类型为浮点数</span></span><br><span class="line"><span class="string">math.floor(number)，返回数的下舍整数，返回值的类型为浮点数</span></span><br><span class="line"><span class="string">math.sqrt(number)，返回平方根不适用于负数</span></span><br><span class="line"><span class="string">pow(x,y[.z]),返回X的y次幂（有z则对z取模）</span></span><br><span class="line"><span class="string">repr(object)，返回值的字符串标示形式</span></span><br><span class="line"><span class="string">round(number[.ndigits])，根据给定的精度对数字进行四舍五入</span></span><br><span class="line"><span class="string">str(object),把值转换为字符串</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 输入功能</span></span><br><span class="line"><span class="string">  - input('提示文字')</span></span><br><span class="line"><span class="string">- 输入的特点</span></span><br><span class="line"><span class="string">  - 一般将input接收的数据存储到变量</span></span><br><span class="line"><span class="string">  - input接收的任何数据默认都是字符串数据类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">k = input(<span class="string">"请输入你的账号："</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"tom的年龄:"</span>, <span class="number">15</span> + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">'我的名字是%s'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">转换数据类型常用的函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- int()</span></span><br><span class="line"><span class="string">- float()</span></span><br><span class="line"><span class="string">- str()</span></span><br><span class="line"><span class="string">- list()</span></span><br><span class="line"><span class="string">- tuple()</span></span><br><span class="line"><span class="string">- eval()</span></span><br><span class="line"><span class="string"> eval() -- 将字符串中的数据转换成Python表达式原本类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">str1 = <span class="string">'10'</span></span><br><span class="line">str2 = <span class="string">'[1, 2, 3]'</span></span><br><span class="line">str3 = <span class="string">'(1000, 2000, 3000)'</span></span><br><span class="line">print(eval(str1))</span><br><span class="line">print(eval(str2))</span><br><span class="line">print(eval(str3))</span><br><span class="line">print(type(eval(str1)))</span><br><span class="line">print(type(eval(str2)))</span><br><span class="line">print(type(eval(str3)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">[1, 2, 3]</span></span><br><span class="line"><span class="string">(1000, 2000, 3000)</span></span><br><span class="line"><span class="string">用eval将数据转换为原有形式，去除两边的''</span></span><br><span class="line"><span class="string">在数据转换中可以用到</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">算数运算符</span></span><br><span class="line"><span class="string">| 运算符 |  描述  | 实例                                                  |</span></span><br><span class="line"><span class="string">| :----: | :----: | ----------------------------------------------------|</span></span><br><span class="line"><span class="string">|   +    |   加   | 1 + 1 输出结果为 2                                    |</span></span><br><span class="line"><span class="string">|   -    |   减   | 1-1 输出结果为 0                                      |</span></span><br><span class="line"><span class="string">|   *    |   乘   | 2 * 2 输出结果为 4                                    |</span></span><br><span class="line"><span class="string">|   /    |   除   | 10 / 2 输出结果为 5                                   |</span></span><br><span class="line"><span class="string">|   //   |  整除  | 9 // 4 输出结果为2                                    |</span></span><br><span class="line"><span class="string">|   %    |  取余  | 9 % 4 输出结果为 1                                    |</span></span><br><span class="line"><span class="string">|   **   |  指数  | 2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2                 |</span></span><br><span class="line"><span class="string">|   ()   | 小括号 | 小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9     |</span></span><br><span class="line"><span class="string">混合运算优先级顺序：`()`高于 `**` 高于 `*` `/` `//` `%` 高于 `+` `-`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">复合赋值运算符 </span></span><br><span class="line"><span class="string">| 运算符 | 描述           | 实例                       |</span></span><br><span class="line"><span class="string">| ------ | -------------- | -------------------------- |</span></span><br><span class="line"><span class="string">| +=     | 加法赋值运算符 | c += a 等价于 c = c + a    |</span></span><br><span class="line"><span class="string">| -=     | 减法赋值运算符 | c -= a 等价于 c = c- a     |</span></span><br><span class="line"><span class="string">| *=     | 乘法赋值运算符 | c *= a 等价于 c = c * a    |</span></span><br><span class="line"><span class="string">| /=     | 除法赋值运算符 | c /= a 等价于 c = c / a    |</span></span><br><span class="line"><span class="string">| //=    | 整除赋值运算符 | c //= a 等价于 c = c // a  |</span></span><br><span class="line"><span class="string">| %=     | 取余赋值运算符 | c %= a 等价于 c = c % a    |</span></span><br><span class="line"><span class="string">| **=    | 幂赋值运算符   | c ** = a 等价于 c = c ** a |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">比较运算符</span></span><br><span class="line"><span class="string">| 运算符 | 描述                                                         | 实例                                            |</span></span><br><span class="line"><span class="string">| ------ | ------------------------------------------------------------ | -------------------------------------|</span></span><br><span class="line"><span class="string">| ==     | 判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False) | 如a=3,b=3，则（a == b) 为 True                              |</span></span><br><span class="line"><span class="string">| !=     | 不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False) | 如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True |</span></span><br><span class="line"><span class="string">| &gt;      | 运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假 | 如a=7,b=3，则(a &gt; b) 为 True                                |</span></span><br><span class="line"><span class="string">| &lt;      | 运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假 | 如a=7,b=3，则(a &lt; b) 为 False                               |</span></span><br><span class="line"><span class="string">| &gt;=     | 运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假 | 如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True  |</span></span><br><span class="line"><span class="string">| &lt;=     | 运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假 | 如a=3,b=3，则(a &lt;= b) 为 True                               |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">逻辑运算符</span></span><br><span class="line"><span class="string">| 运算符 | 逻辑表达式 | 描述                                                         | 实例                                     |</span></span><br><span class="line"><span class="string">| ------ | ---------- | ------------------------------------------------------------ | ------------------ |</span></span><br><span class="line"><span class="string">| and    | x and y    | 布尔"与"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。 | True and False， 返回 False。            |</span></span><br><span class="line"><span class="string">| or     | x or y     | 布尔"或"：如果 x 是 True，它返回 True，否则它返回 y 的值。   | False or True， 返回 True。              |</span></span><br><span class="line"><span class="string">| not    | not x      | 布尔"非"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 | not True 返回 False, not False 返回 True |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字之间的逻辑运算</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span></span><br><span class="line">print(a <span class="keyword">and</span> b)  <span class="comment"># 0</span></span><br><span class="line">print(b <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line">print(a <span class="keyword">and</span> c)  <span class="comment"># 0</span></span><br><span class="line">print(c <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line">print(b <span class="keyword">and</span> c)  <span class="comment"># 2</span></span><br><span class="line">print(c <span class="keyword">and</span> b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span></span><br><span class="line">print(a <span class="keyword">or</span> b)  <span class="comment"># 1</span></span><br><span class="line">print(a <span class="keyword">or</span> c)  <span class="comment"># 2</span></span><br><span class="line">print(b <span class="keyword">or</span> c)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">总结：</span></span><br><span class="line"><span class="string">- 算数运算的优先级</span></span><br><span class="line"><span class="string">  - 混合运算优先级顺序：`()`高于 `**` 高于 `*` `/` `//` `%` 高于 `+` `-`</span></span><br><span class="line"><span class="string">- 赋值运算符</span></span><br><span class="line"><span class="string">  - =</span></span><br><span class="line"><span class="string">- 复合赋值运算符</span></span><br><span class="line"><span class="string">  - +=</span></span><br><span class="line"><span class="string">  - -=</span></span><br><span class="line"><span class="string">  - 优先级</span></span><br><span class="line"><span class="string">    1. 先算复合赋值运算符右侧的表达式</span></span><br><span class="line"><span class="string">    2. 再算复合赋值运算的算数运算</span></span><br><span class="line"><span class="string">    3. 最后算赋值运算</span></span><br><span class="line"><span class="string">- 比较运算符</span></span><br><span class="line"><span class="string">  - 判断相等： == </span></span><br><span class="line"><span class="string">  - 大于等于： &gt;=</span></span><br><span class="line"><span class="string">  - 小于等于：&lt;=</span></span><br><span class="line"><span class="string">  - 不等于： !=</span></span><br><span class="line"><span class="string">- 逻辑运算符</span></span><br><span class="line"><span class="string">  - 与： and</span></span><br><span class="line"><span class="string">  - 或：or</span></span><br><span class="line"><span class="string">  - 非：not</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># round()函数，4舍5入</span></span><br><span class="line">print(<span class="string">f'round(5.3)'</span>)  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'我的名字是<span class="subst">&#123;name&#125;</span>, 明年<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>岁了'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">if 条件1:</span></span><br><span class="line"><span class="string">    条件1成立执行的代码</span></span><br><span class="line"><span class="string">elif 条件2:</span></span><br><span class="line"><span class="string">    条件2成立执行的代码</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    以上条件都不成立执行的代码</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">age = int(input(<span class="string">'请输入您的年龄：'</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">f'您的年龄是<span class="subst">&#123;age&#125;</span>,童工一枚'</span>)</span><br><span class="line"><span class="comment"># elif (age &gt;= 18) and (age &lt;= 60):</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">18</span> &lt;= age &lt;= <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">f'您的年龄是<span class="subst">&#123;age&#125;</span>,合法工龄'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">f'您的年龄是<span class="subst">&#123;age&#125;</span>,可以退休'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># age &gt;= 18 and age &lt;= 60`可以化简为`18 &lt;= age &lt;= 60`。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">随机做法：</span></span><br><span class="line"><span class="string">1. 导出random模块</span></span><br><span class="line"><span class="string">2. random.randint(开始,结束)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">三目运算符也叫三元运算符。</span></span><br><span class="line"><span class="string"># 值1 if 条件 else 值2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl + c 停止运行</span></span><br><span class="line"><span class="comment"># ctrl + d 复制上一行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">while的语法</span></span><br><span class="line"><span class="string">必须加: i += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- break退出整个循环</span></span><br><span class="line"><span class="string">- continue退出本次循环，继续执行下一次重复执行的代码</span></span><br><span class="line"><span class="string">- else</span></span><br><span class="line"><span class="string">  - while和for都可以配合else使用</span></span><br><span class="line"><span class="string">  - else下方缩进的代码含义：当循环正常结束后执行的代码</span></span><br><span class="line"><span class="string">  - break终止循环不会执行else下方缩进的代码</span></span><br><span class="line"><span class="string">  - continue退出循环的方式执行else下方缩进的代码</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">for 临时变量 in 序列:</span></span><br><span class="line"><span class="string">    重复执行的代码1</span></span><br><span class="line"><span class="string">    重复执行的代码2</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">while 条件1:</span></span><br><span class="line"><span class="string">    条件1成立执行的代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">    while 条件2:</span></span><br><span class="line"><span class="string">        条件2成立执行的代码</span></span><br><span class="line"><span class="string">        ......</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出5050</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">4</span>:</span><br><span class="line">        <span class="comment"># 一行内的星星不能换行，取消print默认结束符\n</span></span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span></span><br><span class="line">    print()</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line"><span class="comment"># j表示行号</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复打印9行表达式</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 打印一行里面的表达式 a * b = a*b</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;j*i&#125;</span>'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># end='\t'制表符</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    <span class="comment"># 换行</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行</span></span><br><span class="line"><span class="comment"># &gt; 因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1590405001328&di=92dd5201407c31e2187e000321d669cb&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201803%2F15%2F20180315215629_zvfXe.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python入门复习-变量—循环—条件&quot;&gt;&lt;a href=&quot;#python入门复习-变量—循环—条件&quot; class=&quot;headerlink&quot; title=&quot;python入门复习_变量—循环—条件&quot;&gt;&lt;/a&gt;python入门复习_变量—循环—条件&lt;/h1&gt;&lt;figu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VF基础知识</title>
    <link href="https://esyyes.github.io/2020/05/18/matlab/VF/VF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://esyyes.github.io/2020/05/18/matlab/VF/VF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-05-18T07:17:42.000Z</published>
    <updated>2020-05-18T07:17:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="心室纤颤-Ventricular-Fibrillation-，VF"><a href="#心室纤颤-Ventricular-Fibrillation-，VF" class="headerlink" title="心室纤颤(Ventricular Fibrillation ，VF)"></a>心室纤颤(Ventricular Fibrillation ，VF)</h2><p>心室纤颤(Ventricular Fibrillation ，VF)特点：</p><p>QRS-T波群完全消失，代之以形态不同、大小各异间距极不匀齐的颤动波(f波)，频率为250～500次/分钟，颤动波之间无等电线。</p><p><strong>心室扑动典型的心电图特点</strong></p><p>连续而规则、宽大、畸形的QRS波，即心室扑动波。QRS波的时限长，在0.12s以上，QRS波呈向上向下的波幅似正弦样曲线与T波无法分开，QRS波之间无等电线。QRS波频率多在180～250次/分钟，有时可低达150次/分钟或高达300次/分钟。P波消失。</p><h2 id="心室纤颤的数据库："><a href="#心室纤颤的数据库：" class="headerlink" title="心室纤颤的数据库："></a>心室纤颤的数据库：</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%BF%83%E7%94%B5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200519141433962"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cvfdb%E4%BB%8B%E7%BB%8D.png" alt="image-20200519141519264"></p><h2 id="数据长短："><a href="#数据长短：" class="headerlink" title="数据长短："></a>数据长短：</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E9%95%BF%E7%9F%AD.png" alt="image-20200519141626942"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CMITDB%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9" alt="image-20200519141744095"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>直接选择数据库为VFDB，室颤的，然后根据标签选择室颤的信号，筛选10个的样子，每个10s，然后生成excel表格，再选择正常的数据10段，最后来区分，利用利用python直接来读取数据，然后生成数据组合!再进行预处理。最后筛选出一个算法进行进行分类，并有个准确率输出。</p><h1 id="VF数据库"><a href="#VF数据库" class="headerlink" title="VF数据库"></a>VF数据库</h1><p>含有室颤的数据有：424,426,430</p><p>数据长短为：2100s，35min</p><p>采样率为：250</p><p>首先确定VF和VFIB的位置，将其生成excel文档，10s长短，即2500数据点，</p><h2 id="python-wfdb截取数据"><a href="#python-wfdb截取数据" class="headerlink" title="python-wfdb截取数据"></a>python-wfdb截取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签筛选出室颤信号</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/VF/VFDB/424'</span>, channels=[<span class="number">0</span>], sampfrom=<span class="number">314749</span>, sampto=<span class="number">341173</span>)</span><br><span class="line">VF = record.p_signal</span><br><span class="line"></span><br><span class="line">vf = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(record.sig_len):</span><br><span class="line">    vf.append(VF[i][<span class="number">0</span>])</span><br><span class="line">vf = vf[<span class="number">5000</span>:<span class="number">7500</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot(vf, linewidth=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">"U/mv"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.xlabel(<span class="string">"time/s"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(vf)</span><br><span class="line">data.to_excel(<span class="string">"vf1.xlsx"</span>)</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CVF%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%AC10s%E7%9A%84%E3%80%91.png" alt="image-20200520104746150"></p><p><strong>筛选10个数据片段</strong></p><p><strong>筛选正常数据</strong></p><p>下一步就是用算法将其判断出来，写个循环看看，Ndata数据的效果，用pt算法，另外一个也试试</p><p>数据片段的筛选，重新保存筛选，先选择算法进行分析。</p><p>TCI算法：</p><p><a href="https://link.springer.com/article/10.1186/1475-925X-4-60" target="_blank" rel="noopener">https://link.springer.com/article/10.1186/1475-925X-4-60</a></p><p>随便设定一个大于250和小于250就行了</p><p> 纪念下人生第一单哈哈哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;close all</span><br><span class="line">% 读取室颤数据</span><br><span class="line">data = xlsread(&apos;F:\VF\VFdata\0.xlsx&apos;);</span><br><span class="line">% 读取正常数据</span><br><span class="line">% data = xlsread(&apos;F:\VF\Ndata\0.xlsx&apos;);</span><br><span class="line"></span><br><span class="line">% 采样频率</span><br><span class="line">fs = 250;</span><br><span class="line"></span><br><span class="line">% 想要采样的时间长度为10s，所以数据长短通通为2500</span><br><span class="line">vf = data(2:2501, 2);</span><br><span class="line"></span><br><span class="line">% 将采样点的横坐标转换为s</span><br><span class="line">N = length(vf);</span><br><span class="line">m = 0 : N-1;</span><br><span class="line">t = m / fs;</span><br><span class="line"></span><br><span class="line">% 绘制出原始数据</span><br><span class="line">subplot(2,1,1)</span><br><span class="line">plot(t,vf,&apos;b&apos;);</span><br><span class="line"></span><br><span class="line">title(&apos;原始信号&apos;);</span><br><span class="line">xlabel(&apos;time/s&apos;);</span><br><span class="line">ylabel(&apos;U/mV&apos;);</span><br><span class="line"></span><br><span class="line">% 可要可不要这一步将数据平滑一下</span><br><span class="line">subplot(2,1,2)</span><br><span class="line">df = smooth(vf,3);</span><br><span class="line">plot(t,df);</span><br><span class="line">title(&apos;平滑后的信号&apos;);</span><br><span class="line">xlabel(&apos;time/s&apos;);</span><br><span class="line">ylabel(&apos;U/mV&apos;);</span><br><span class="line"></span><br><span class="line">% 利用TCI (Threshold crossing intervals)算法对TCI值进行判断</span><br><span class="line">% verbose = 0数据直接输出8个3s窗口的平均值，verbose = 1，进入调试界面</span><br><span class="line">verbose = 1;</span><br><span class="line">tci = VF_TCI(vf,fs,10,verbose);</span><br><span class="line"></span><br><span class="line">% VF的频率为250～500次/分钟，转换为ms为120-240ms，即可判定为室颤</span><br><span class="line">if (tci &gt;= 120) &amp;&amp; (tci &lt;= 240)</span><br><span class="line">    disp(&apos;该信号为室颤信号&apos;)</span><br><span class="line">else</span><br><span class="line">    disp(&apos;该信号为正常信号&apos;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>读取单个的图</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;close all</span><br><span class="line"></span><br><span class="line"><span class="comment">% 数据标签，将VF数据判定为1，正常的判定为0</span></span><br><span class="line">tag = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">i</span> &lt;= <span class="number">18</span></span><br><span class="line">        tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 循环读取数据，将VF数据判定为1，正常的判定为0</span></span><br><span class="line">num_vf = <span class="number">0</span>;</span><br><span class="line">num_n = <span class="number">0</span>;</span><br><span class="line">all = [];</span><br><span class="line">TCI = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    data = xlsread([<span class="string">'F:\VF\all_data\', num2str(i), '</span>.xlsx']);</span><br><span class="line">    fs = <span class="number">250</span>;</span><br><span class="line">    vf = data(<span class="number">2</span>:<span class="number">2501</span>, <span class="number">2</span>);    </span><br><span class="line">    tci = VF_TCI(vf,fs,<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">    TCI(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = tci;</span><br><span class="line">    <span class="keyword">if</span> (tci &gt;= <span class="number">120</span>) &amp;&amp; (tci &lt;= <span class="number">240</span>)</span><br><span class="line">        num_vf = num_vf + <span class="number">1</span>;</span><br><span class="line">        all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num_n = num_n + <span class="number">1</span>;</span><br><span class="line">        all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 进行比较，用标签和这个你判定的数据进行比较</span></span><br><span class="line">ALL = <span class="number">32</span>;</span><br><span class="line">True = <span class="number">0</span>;</span><br><span class="line">F = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) == tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        True = True + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        F = F + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span>     </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 输出得到判定准确的值，差不多准确率就基本可以了，毕竟100%了，再转换为百分数</span></span><br><span class="line">ACR = True / ALL;</span><br><span class="line">accuracy = strcat(num2str(ACR * <span class="number">100</span>),<span class="string">'%'</span>);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'准确率为:'</span>,accuracy]);</span><br></pre></td></tr></table></figure><p>输出为准确率</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tci</span> = <span class="title">VF_TCI</span><span class="params">(xf,fs,wL,verbose)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">% INPUT:</span></span><br><span class="line"><span class="comment">% - xf: ecg signal (preprocessed)</span></span><br><span class="line"><span class="comment">% - fs: sampling frequency</span></span><br><span class="line"><span class="comment">% - wL: window length, in seconds </span></span><br><span class="line"><span class="comment">% - verbose: debugging variable (1: plot; 0: default, not ploting)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUT</span></span><br><span class="line"><span class="comment">% - tci parameter</span></span><br><span class="line"></span><br><span class="line">wl = <span class="number">1</span>*fs;  <span class="comment">% 1-sec window samples</span></span><br><span class="line">wa = <span class="number">3</span>*fs;  <span class="comment">% 3-sec window samples</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = wL<span class="number">-3</span>+<span class="number">1</span>; <span class="comment">% number of 3-sec windows in wl segment </span></span><br><span class="line"></span><br><span class="line"><span class="comment">%becg = zeros(1,wa);</span></span><br><span class="line">becg1 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line">becg2 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line">becg3 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line"></span><br><span class="line">tci6 = <span class="built_in">zeros</span>(<span class="number">1</span>,L);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">0</span>:L<span class="number">-1</span></span><br><span class="line">    wsamples1 = <span class="built_in">j</span>*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">1</span>)*wl;</span><br><span class="line">    wsamples2 = (<span class="built_in">j</span>+<span class="number">1</span>)*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">2</span>)*wl;</span><br><span class="line">    wsamples3 = (<span class="built_in">j</span>+<span class="number">2</span>)*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">3</span>)*wl;</span><br><span class="line">    </span><br><span class="line">    stage1 = xf(wsamples1)-<span class="built_in">mean</span>(xf(wsamples1)); maxv = <span class="built_in">max</span>(stage1); </span><br><span class="line">    th1 = <span class="number">0.2</span>*maxv; becg1(stage1&gt;th1) = <span class="number">1</span>;</span><br><span class="line">    stage2 = xf(wsamples2)-<span class="built_in">mean</span>(xf(wsamples2)); maxv = <span class="built_in">max</span>(stage2); </span><br><span class="line">    th2 = <span class="number">0.2</span>*maxv; becg2(stage2&gt;th2) = <span class="number">1</span>;</span><br><span class="line">    stage3 = xf(wsamples3)-<span class="built_in">mean</span>(xf(wsamples3)); maxv = <span class="built_in">max</span>(stage3); </span><br><span class="line">    th3 = <span class="number">0.2</span>*maxv; becg3(stage3&gt;th3) = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    becg = [becg1 becg2 becg3];</span><br><span class="line">    </span><br><span class="line">    aux = [<span class="number">0</span> diff(becg)];</span><br><span class="line">    </span><br><span class="line">    s1 = <span class="built_in">find</span>(aux(<span class="number">1</span>:wl)==<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(s1)</span><br><span class="line">        t1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t1 = (wl-s1(<span class="keyword">end</span>))/fs;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    index = <span class="built_in">find</span>(aux(wl+<span class="number">1</span>:<span class="number">2</span>*wl));</span><br><span class="line">    s2 = aux(wl+<span class="number">1</span>:<span class="number">2</span>*wl);</span><br><span class="line">    pulses = s2(index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pulses(<span class="number">1</span>) == <span class="number">-1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">-1</span></span><br><span class="line">        t2 = <span class="number">0</span>;</span><br><span class="line">        t3 = (wl-index(<span class="keyword">end</span>))/fs;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">1</span></span><br><span class="line">        t2 = index(<span class="number">1</span>)/fs;</span><br><span class="line">        t3 = <span class="number">0</span>;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">-1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">1</span></span><br><span class="line">        t2 = <span class="number">0</span>;</span><br><span class="line">        t3 = <span class="number">0</span>;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">-1</span></span><br><span class="line">        t2 = index(<span class="number">1</span>)/fs;</span><br><span class="line">        t3 = (wl-index(<span class="keyword">end</span>))/fs;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses))/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">'This should not be happening!'</span>)</span><br><span class="line">        keyboard; <span class="comment">%better to debug</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">       </span><br><span class="line">    s4 = <span class="built_in">find</span>(aux(<span class="number">2</span>*wl+<span class="number">1</span>:<span class="number">3</span>*wl)==<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(s4)</span><br><span class="line">        t4 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t4 = s4(<span class="number">1</span>)/fs;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">    tci6(<span class="built_in">j</span>+<span class="number">1</span>) = <span class="number">1000</span>/((N<span class="number">-1</span>)+(t2/(t1+t2))+(t3/(t3+t4)));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%Plot data</span></span><br><span class="line">    <span class="keyword">if</span> verbose</span><br><span class="line">        </span><br><span class="line">        f = <span class="built_in">figure</span>;</span><br><span class="line">        t = [wsamples1 wsamples2 wsamples3]/fs;</span><br><span class="line">        stage = [stage1' stage2' stage3'];</span><br><span class="line">        </span><br><span class="line">        subplot(<span class="number">211</span>)        </span><br><span class="line">        <span class="built_in">plot</span>(t,stage); <span class="built_in">hold</span> on;</span><br><span class="line">        <span class="built_in">plot</span>(t,[th1*<span class="built_in">ones</span>(<span class="number">1</span>,wl) th2*<span class="built_in">ones</span>(<span class="number">1</span>,wl) th3*<span class="built_in">ones</span>(<span class="number">1</span>,wl)],<span class="string">'r'</span>);</span><br><span class="line">        xlabel(<span class="string">'time/s'</span>);</span><br><span class="line">        ylabel(<span class="string">'ECG and threshold'</span>);</span><br><span class="line">        </span><br><span class="line">        subplot(<span class="number">212</span>);</span><br><span class="line">        <span class="built_in">plot</span>(t,becg,<span class="string">'k'</span>); <span class="built_in">hold</span> on; stem(t,aux,<span class="string">'r'</span>); <span class="built_in">hold</span> on;</span><br><span class="line">        line([<span class="built_in">j</span>+<span class="number">1</span> <span class="built_in">j</span>+<span class="number">1</span>],[<span class="number">-1.2</span> <span class="number">1.2</span>]);line([<span class="built_in">j</span>+<span class="number">2</span> <span class="built_in">j</span>+<span class="number">2</span>],[<span class="number">-1.2</span> <span class="number">1.2</span>]);</span><br><span class="line">        axis([t(<span class="number">1</span>) t(<span class="keyword">end</span>) <span class="number">-1.2</span> <span class="number">1.2</span>])</span><br><span class="line">        xlabel(<span class="string">'time/s'</span>);</span><br><span class="line">        ylabel(<span class="string">'pulses'</span>);</span><br><span class="line">        msg = sprintf(<span class="string">'t_1=%2.2f\t\t t_2=%2.2f\t\t t_3=%2.2f\t\t t_4=%2.2f'</span>,...</span><br><span class="line">            t1,t2,t3,t4);</span><br><span class="line">        title(msg)</span><br><span class="line">        text(<span class="built_in">j</span>+<span class="number">1.2</span>,<span class="number">-0.5</span>,[<span class="string">'TCI = '</span> num2str(tci6(<span class="built_in">j</span>+<span class="number">1</span>))])</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">hold</span> off</span><br><span class="line">        <span class="comment">% 是否进行调试，观看效果</span></span><br><span class="line">        keyboard;</span><br><span class="line">        close(f);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    becg1 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    becg2 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    becg3 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tci = <span class="built_in">mean</span>(tci6);</span><br></pre></td></tr></table></figure><p>TCI算法</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CTCI%E7%AE%97%E6%B3%95%E5%BE%97%E5%88%B0%E7%9A%84%E5%9B%BE" alt="image-20200520195855735"></p><p>准确率为100%结束</p><p><img src="http://img1.cache.netease.com/96/2014/8/12/2014081209202754754.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;心室纤颤-Ventricular-Fibrillation-，VF&quot;&gt;&lt;a href=&quot;#心室纤颤-Ventricular-Fibrillation-，VF&quot; class=&quot;headerlink&quot; title=&quot;心室纤颤(Ventricular Fibrillat
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>图像识别的目标</title>
    <link href="https://esyyes.github.io/2020/05/05/opencv/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
    <id>https://esyyes.github.io/2020/05/05/opencv/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E7%9A%84%E7%9B%AE%E6%A0%87/</id>
    <published>2020-05-05T13:54:25.000Z</published>
    <updated>2020-05-05T13:54:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像识别的学习目标"><a href="#图像识别的学习目标" class="headerlink" title="图像识别的学习目标"></a>图像识别的学习目标</h2><ol><li>写一篇专利</li></ol><p>专利：利用图像识别技术，识别QRS波形的R波</p><ol><li>写一个小论文</li></ol><p>利用图像识别来对睡眠进行分类，或者区分是否是OSA和健康人群</p><ol><li>把现在这篇小论文写完，然后重新学下数据处理方向的知识，图像处理还是要先理解</li><li>5月中旬争取写完小论文</li></ol><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%96%B5%E5%86%85.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像识别的学习目标&quot;&gt;&lt;a href=&quot;#图像识别的学习目标&quot; class=&quot;headerlink&quot; title=&quot;图像识别的学习目标&quot;&gt;&lt;/a&gt;图像识别的学习目标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;写一篇专利&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;专利：利用图像识别技术，识别QR
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-opencv基础入门</title>
    <link href="https://esyyes.github.io/2020/05/05/opencv/python-opencv%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://esyyes.github.io/2020/05/05/opencv/python-opencv%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2020-05-05T12:47:17.000Z</published>
    <updated>2020-05-05T12:47:17.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-Matplotlib视频讲解版</title>
    <link href="https://esyyes.github.io/2020/04/12/python/python-Matplotlib%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E7%89%88/"/>
    <id>https://esyyes.github.io/2020/04/12/python/python-Matplotlib%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E7%89%88/</id>
    <published>2020-04-12T04:22:04.000Z</published>
    <updated>2020-04-12T04:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-Matplotlib视频讲解版"><a href="#python-Matplotlib视频讲解版" class="headerlink" title="python-Matplotlib视频讲解版"></a>python-Matplotlib视频讲解版</h1><p>视频连接</p><p><a href="https://www.bilibili.com/video/BV1tt411e7zF?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1tt411e7zF?p=1</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制成一条线形式</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># xy范围</span></span><br><span class="line">plt.ylim((<span class="number">80</span>,<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 设定xy的尺度大小</span></span><br><span class="line">new_ticks = np.linspace(<span class="number">80</span>, <span class="number">100</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticks改变坐标轴的大小</span></span><br><span class="line">plt.yticks(new_ticks, fontsize=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变标签注释的大小</span></span><br><span class="line">plt.ylabel(<span class="string">'Average Accuracy/%'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改横坐标的标签和字体大小，以及转换方向</span></span><br><span class="line">plt.xticks(x,(df.keys()), fontsize=<span class="number">8</span>, rotation=<span class="number">0</span>)</span><br><span class="line">l1, = ax.plot(x,y1,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line">l2, = ax.plot(x,y2,color=<span class="string">'blue'</span>,linewidth=<span class="number">3.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment"># 标准图例</span></span><br><span class="line">plt.legend(handles=[l1,l2],labels=[<span class="string">'Original model'</span>,<span class="string">'Optimization model'</span>],loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment"># shift+tab可以查看图中函数的设置</span></span><br><span class="line"><span class="comment"># 改变图的边框颜色</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cimage-20200412210230713.png" alt="image-20200412210230713"></p><p><a href="https://jishuin.proginn.com/p/7056.html" target="_blank" rel="noopener">https://jishuin.proginn.com/p/7056.html</a></p><p>这个链接中描述了很多绘制</p><p>多用shift+tab加来查看函数的说明</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-Matplotlib视频讲解版&quot;&gt;&lt;a href=&quot;#python-Matplotlib视频讲解版&quot; class=&quot;headerlink&quot; title=&quot;python-Matplotlib视频讲解版&quot;&gt;&lt;/a&gt;python-Matplotlib视频讲
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_可视化之seaborn</title>
    <link href="https://esyyes.github.io/2020/03/26/python/python-%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bseaborn/"/>
    <id>https://esyyes.github.io/2020/03/26/python/python-%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bseaborn/</id>
    <published>2020-03-26T13:16:31.000Z</published>
    <updated>2020-03-26T13:16:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-可视化之seaborn"><a href="#python-可视化之seaborn" class="headerlink" title="python_可视化之seaborn"></a>python_可视化之seaborn</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><p>主题修改：</p><p><a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/introductory/customizing.html</a></p><p>将自己的主题设定为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.cntofu.com/book/172/docs/20.md" target="_blank" rel="noopener">https://www.cntofu.com/book/172/docs/20.md</a></p><p>后面还是参考上面网址进行学习，基本已经理清seaborn怎么绘制。</p><p>好吧还是使用这个！</p><p><a href="https://www.jb51.net/article/104924.htm" target="_blank" rel="noopener">https://www.jb51.net/article/104924.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-可视化之seaborn&quot;&gt;&lt;a href=&quot;#python-可视化之seaborn&quot; class=&quot;headerlink&quot; title=&quot;python_可视化之seaborn&quot;&gt;&lt;/a&gt;python_可视化之seaborn&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
