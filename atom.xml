<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESY</title>
  
  <subtitle>miao</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://esyyes.github.io/"/>
  <updated>2020-07-27T08:14:56.000Z</updated>
  <id>https://esyyes.github.io/</id>
  
  <author>
    <name>esy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>样本数据的生成</title>
    <link href="https://esyyes.github.io/2020/07/27/HMM/%E6%A0%B7%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E6%88%90/"/>
    <id>https://esyyes.github.io/2020/07/27/HMM/%E6%A0%B7%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E6%88%90/</id>
    <published>2020-07-27T08:14:56.000Z</published>
    <updated>2020-07-27T08:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="样本数据的生成"><a href="#样本数据的生成" class="headerlink" title="样本数据的生成"></a>样本数据的生成</h1><p>样本数据只有222个，其中不活跃状态的197个，一般状态的18个，活跃状态的7个，样本数据太不活跃，所以需要将样本进行生成。</p><p>初步打算：不活跃的不变</p><p>一般状态的增加180个，</p><p>活跃状态的增加190个</p><p>利用random生成</p><p><a href="https://www.jb51.net/article/152731.htm" target="_blank" rel="noopener">https://www.jb51.net/article/152731.htm</a></p><p>标注差在进行变换，所以分类个数永远不是一个定值</p><p>先随机生成数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 转换列表</span></span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">200</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">3</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">15</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">35</span>, <span class="number">120</span>))</span><br></pre></td></tr></table></figure><p>状态查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_y1[j])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line">Y_Z = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; np.array(list_y1).std():</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line"><span class="number">197</span>:<span class="number">273</span>:<span class="number">102</span></span><br></pre></td></tr></table></figure><p>基于原本的数据看下规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将Y_Z变成字典形式</span></span><br><span class="line">xuhao = np.arange(len(Y_Z)).tolist()</span><br><span class="line">dict_Y_Z = dict(zip(xuhao, Y_Z))</span><br><span class="line">sort_dict = sorted(zip(dict_Y_Z.values(), dict_Y_Z.keys()))</span><br></pre></td></tr></table></figure><p>对原本的数据进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">0</span>, <span class="number">217</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">218</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">219</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">220</span>),</span><br><span class="line"> (<span class="number">0</span>, <span class="number">221</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">17</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">33</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">37</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">44</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">70</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">75</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">85</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">91</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">98</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">103</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">107</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">142</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">146</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">152</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">179</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">181</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">209</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">54</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">129</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">144</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">158</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">172</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">198</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">206</span>)</span><br></pre></td></tr></table></figure><p>查看下对应状态下的x1,x2,x3,x4的变化</p><p>数据10</p><table><thead><tr><th>11</th><th>1</th><th>2</th><th>799</th><th>520</th><th>3</th><th>3</th><th>3</th><th>37</th></tr></thead><tbody><tr><td>11</td><td>2</td><td>4</td><td>645</td><td>533</td><td>5</td><td>1</td><td></td><td></td></tr><tr><td>11</td><td>3</td><td>1</td><td>659</td><td>651</td><td>2</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>4</td><td>0</td><td>989</td><td>916</td><td>3</td><td>1</td><td></td><td></td></tr><tr><td>11</td><td>5</td><td>5</td><td>817</td><td>442</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>11</td><td>6</td><td>6</td><td>753</td><td>350</td><td>1</td><td>4</td><td></td><td></td></tr><tr><td>11</td><td>7</td><td>2</td><td>745</td><td>626</td><td>1</td><td>5</td><td></td><td></td></tr><tr><td>11</td><td>8</td><td>3</td><td>807</td><td>503</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>9</td><td>3</td><td>774</td><td>304</td><td>2</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>10</td><td>3</td><td>1265</td><td>294</td><td>0</td><td>4</td><td></td><td></td></tr><tr><td>11</td><td>11</td><td>5</td><td>668</td><td>36</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>11</td><td>12</td><td>4</td><td>1075</td><td>472</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>11</td><td>13</td><td>5</td><td>1420</td><td>372</td><td>1</td><td>3</td><td></td><td></td></tr><tr><td>11</td><td>14</td><td>4</td><td>912</td><td>320</td><td>1</td><td>4</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>18</th><th>1</th><th>3</th><th>26</th><th>144</th><th>2</th><th>4</th><th>2</th><th>18</th></tr></thead><tbody><tr><td>18</td><td>2</td><td>4</td><td>24</td><td>95</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>3</td><td>2</td><td>16</td><td>107</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>18</td><td>4</td><td>5</td><td>14</td><td>76</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>5</td><td>7</td><td>32</td><td>398</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>18</td><td>6</td><td>4</td><td>11</td><td>91</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>7</td><td>1</td><td>13</td><td>35</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>18</td><td>8</td><td>1</td><td>29</td><td>144</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>18</td><td>9</td><td>4</td><td>12</td><td>100</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>18</td><td>10</td><td>4</td><td>12</td><td>65</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>18</td><td>11</td><td>3</td><td>19</td><td>41</td><td>0</td><td>4</td><td></td><td></td></tr><tr><td>18</td><td>12</td><td>2</td><td>10</td><td>47</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>18</td><td>13</td><td>3</td><td>46</td><td>46</td><td>1</td><td>3</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>34</th><th>1</th><th>1</th><th>5757</th><th>3368</th><th>5</th><th>0</th><th>1</th><th>99</th></tr></thead><tbody><tr><td>34</td><td>2</td><td>1</td><td>8469</td><td>4823</td><td>4</td><td>0</td><td></td><td></td></tr><tr><td>34</td><td>3</td><td>1</td><td>8290</td><td>5837</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>4</td><td>3</td><td>4158</td><td>5776</td><td>2</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>5</td><td>2</td><td>2713</td><td>10177</td><td>6</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>6</td><td>2</td><td>2351</td><td>6625</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>7</td><td>3</td><td>1679</td><td>3366</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>8</td><td>1</td><td>1847</td><td>3648</td><td>5</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>9</td><td>2</td><td>3032</td><td>3022</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>10</td><td>8</td><td>2006</td><td>2113</td><td>3</td><td>3</td><td></td><td></td></tr><tr><td>34</td><td>11</td><td>4</td><td>1700</td><td>2165</td><td>2</td><td>2</td><td></td><td></td></tr><tr><td>34</td><td>12</td><td>8</td><td>1179</td><td>1162</td><td>2</td><td>3</td><td></td><td></td></tr><tr><td>34</td><td>13</td><td>6</td><td>1970</td><td>1484</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>34</td><td>14</td><td>4</td><td>1828</td><td>1784</td><td>2</td><td>2</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>38</th><th>1</th><th>2</th><th>891</th><th>5400</th><th>1</th><th>1</th><th>0</th><th>99</th></tr></thead><tbody><tr><td>38</td><td>2</td><td>6</td><td>281</td><td>447</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>38</td><td>3</td><td>2</td><td>316</td><td>745</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>38</td><td>4</td><td>9</td><td>737</td><td>630</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>38</td><td>5</td><td>4</td><td>191</td><td>467</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>6</td><td>1</td><td>250</td><td>510</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>38</td><td>7</td><td>1</td><td>202</td><td>487</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>8</td><td>0</td><td>322</td><td>530</td><td>1</td><td>0</td><td></td><td></td></tr><tr><td>38</td><td>9</td><td>7</td><td>352</td><td>584</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>38</td><td>10</td><td>6</td><td>250</td><td>416</td><td>1</td><td>4</td><td></td><td></td></tr><tr><td>38</td><td>11</td><td>3</td><td>364</td><td>418</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>12</td><td>1</td><td>382</td><td>632</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>38</td><td>13</td><td>10</td><td>448</td><td>482</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>38</td><td>14</td><td>10</td><td>461</td><td>1009</td><td>1</td><td>4</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>45</th><th>1</th><th>2</th><th>2901</th><th>26</th><th>0</th><th>2</th><th>2</th><th>19</th></tr></thead><tbody><tr><td>45</td><td>2</td><td>0</td><td>4919</td><td>20</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>45</td><td>3</td><td>1</td><td>4489</td><td>21</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>4</td><td>3</td><td>1614</td><td>20</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>5</td><td>3</td><td>442</td><td>13</td><td>0</td><td>3</td><td></td><td></td></tr><tr><td>45</td><td>6</td><td>2</td><td>703</td><td>13</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>7</td><td>3</td><td>130</td><td>13</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>8</td><td>1</td><td>108</td><td>15</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>45</td><td>9</td><td>2</td><td>215</td><td>14</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>45</td><td>10</td><td>2</td><td>141</td><td>16</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>45</td><td>11</td><td>3</td><td>476</td><td>17</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>45</td><td>12</td><td>6</td><td>230</td><td>5</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>45</td><td>13</td><td>2</td><td>378</td><td>18</td><td>0</td><td>2</td><td></td><td></td></tr><tr><td>45</td><td>14</td><td>1</td><td>377</td><td>13</td><td>0</td><td>0</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>71</th><th>1</th><th>1</th><th>29</th><th>17</th><th>1</th><th>1</th><th>0</th><th>18</th></tr></thead><tbody><tr><td>71</td><td>2</td><td>0</td><td>4</td><td>9</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>3</td><td>0</td><td>0</td><td>12</td><td>1</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>4</td><td>0</td><td>449</td><td>7</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>5</td><td>3</td><td>122</td><td>12</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>6</td><td>0</td><td>67</td><td>10</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>7</td><td>2</td><td>57</td><td>8</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>71</td><td>8</td><td>1</td><td>9</td><td>10</td><td>0</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>9</td><td>1</td><td>2</td><td>9</td><td>2</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>10</td><td>2</td><td>280</td><td>8</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>11</td><td>4</td><td>128</td><td>7</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>12</td><td>1</td><td>35</td><td>8</td><td>2</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>13</td><td>1</td><td>143</td><td>10</td><td>0</td><td>1</td><td></td><td></td></tr><tr><td>71</td><td>14</td><td>0</td><td>181</td><td>12</td><td>0</td><td>0</td><td></td><td></td></tr></tbody></table><p>状态为活跃时</p><table><thead><tr><th>207</th><th>1</th><th>57</th><th>761</th><th>4429</th><th>0</th><th>42</th><th>0</th><th>3</th></tr></thead><tbody><tr><td>207</td><td>2</td><td>85</td><td>109</td><td>497</td><td>0</td><td>68</td><td></td><td></td></tr><tr><td>207</td><td>3</td><td>78</td><td>119</td><td>439</td><td>0</td><td>71</td><td></td><td></td></tr><tr><td>207</td><td>4</td><td>96</td><td>173</td><td>447</td><td>0</td><td>83</td><td></td><td></td></tr><tr><td>207</td><td>5</td><td>86</td><td>152</td><td>430</td><td>0</td><td>70</td><td></td><td></td></tr><tr><td>207</td><td>6</td><td>71</td><td>268</td><td>461</td><td>0</td><td>59</td><td></td><td></td></tr><tr><td>207</td><td>7</td><td>75</td><td>189</td><td>712</td><td>1</td><td>57</td><td></td><td></td></tr><tr><td>207</td><td>8</td><td>94</td><td>208</td><td>982</td><td>0</td><td>82</td><td></td><td></td></tr><tr><td>207</td><td>9</td><td>54</td><td>153</td><td>932</td><td>0</td><td>63</td><td></td><td></td></tr><tr><td>207</td><td>10</td><td>68</td><td>156</td><td>991</td><td>0</td><td>51</td><td></td><td></td></tr><tr><td>207</td><td>11</td><td>103</td><td>174</td><td>949</td><td>0</td><td>89</td><td></td><td></td></tr><tr><td>207</td><td>12</td><td>111</td><td>138</td><td>616</td><td>0</td><td>90</td><td></td><td></td></tr><tr><td>207</td><td>13</td><td>111</td><td>185</td><td>867</td><td>0</td><td>85</td><td></td><td></td></tr><tr><td>207</td><td>14</td><td>44</td><td>343</td><td>358</td><td>0</td><td>54</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>173</th><th>1</th><th>6</th><th>3645</th><th>41</th><th>0</th><th>4</th><th>1</th><th>25</th></tr></thead><tbody><tr><td>173</td><td>2</td><td>10</td><td>6873</td><td>39</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>173</td><td>3</td><td>8</td><td>6508</td><td>39</td><td>0</td><td>5</td><td></td><td></td></tr><tr><td>173</td><td>4</td><td>21</td><td>1906</td><td>62</td><td>1</td><td>13</td><td></td><td></td></tr><tr><td>173</td><td>5</td><td>20</td><td>103</td><td>44</td><td>0</td><td>12</td><td></td><td></td></tr><tr><td>173</td><td>6</td><td>19</td><td>102</td><td>41</td><td>0</td><td>14</td><td></td><td></td></tr><tr><td>173</td><td>7</td><td>12</td><td>91</td><td>55</td><td>0</td><td>9</td><td></td><td></td></tr><tr><td>173</td><td>8</td><td>12</td><td>81</td><td>137</td><td>1</td><td>11</td><td></td><td></td></tr><tr><td>173</td><td>9</td><td>20</td><td>869</td><td>217</td><td>1</td><td>13</td><td></td><td></td></tr><tr><td>173</td><td>10</td><td>10</td><td>107</td><td>136</td><td>0</td><td>6</td><td></td><td></td></tr><tr><td>173</td><td>11</td><td>18</td><td>117</td><td>90</td><td>0</td><td>12</td><td></td><td></td></tr><tr><td>173</td><td>12</td><td>14</td><td>133</td><td>458</td><td>1</td><td>10</td><td></td><td></td></tr><tr><td>173</td><td>13</td><td>15</td><td>878</td><td>2711</td><td>1</td><td>9</td><td></td><td></td></tr><tr><td>173</td><td>14</td><td>16</td><td>247</td><td>197</td><td>0</td><td>13</td><td></td><td></td></tr></tbody></table><p>生成数据+在原有基础上生成数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/27</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 转换列表</span></span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">list_i1 = [int(list_data[i][<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_t1 = [int(list_data[i][<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x1 = [int(list_data[i][<span class="number">3</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x2 = [int(list_data[i][<span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x3 = [int(list_data[i][<span class="number">5</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_x4 = [int(list_data[i][<span class="number">6</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line">list_z1 = [int(list_data[i][<span class="number">7</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">list_z2 = [int(list_data[i][<span class="number">8</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">200</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">3</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">80</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">15</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>*<span class="number">50</span>):</span><br><span class="line">    list_y1.append(random.randint(<span class="number">35</span>, <span class="number">120</span>))</span><br><span class="line"></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_y1[j])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line">Y_Z = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; np.array(list_y1).std():</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Y_Z变成字典形式</span></span><br><span class="line">dict_Y_Z = dict(zip(np.arange(len(Y_Z)).tolist(), Y_Z))</span><br><span class="line">sort_dict = sorted(zip(dict_Y_Z.values(), dict_Y_Z.keys()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">    <span class="keyword">if</span> list_y1[i] &lt; <span class="number">1</span>:</span><br><span class="line">        list_x1.append(random.randint(<span class="number">1</span>, <span class="number">2000</span>))</span><br><span class="line">        list_x2.append(random.randint(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">        list_x3.append(random.randint(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        list_x4.append(random.randint(<span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_y1[i] &lt; np.array(list_y1).std():</span><br><span class="line">        list_x1.append(random.randint(<span class="number">200</span>, <span class="number">5000</span>))</span><br><span class="line">        list_x2.append(random.randint(<span class="number">200</span>, <span class="number">2000</span>))</span><br><span class="line">        list_x3.append(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">        list_x4.append(random.randint(<span class="number">5</span>, <span class="number">20</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list_x1.append(random.randint(<span class="number">2000</span>, <span class="number">10000</span>))</span><br><span class="line">        list_x2.append(random.randint(<span class="number">1000</span>, <span class="number">5000</span>))</span><br><span class="line">        list_x3.append(random.randint(<span class="number">2</span>, <span class="number">30</span>))</span><br><span class="line">        list_x4.append(random.randint(<span class="number">10</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">14</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> Y_Z[int(i/<span class="number">14</span>)] == <span class="number">0</span>:</span><br><span class="line">            list_z1.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">            list_z2.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">        <span class="keyword">elif</span> Y_Z[int(i/<span class="number">14</span>)] == <span class="number">1</span>:</span><br><span class="line">            list_z1.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">            list_z2.append(random.randint(<span class="number">5</span>, <span class="number">100</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_z1.append(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">            list_z2.append(random.randint(<span class="number">50</span>, <span class="number">500</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list_z1.append(<span class="number">0</span>)</span><br><span class="line">        list_z2.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">num_i1 = <span class="number">231</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>), int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            list_i1.append(num_i1)</span><br><span class="line">    num_i1 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>), int(len(list_y1)/<span class="number">14</span>)):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data), len(list_y1)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">            list_t1.append(k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df_i1 = pd.DataFrame(list_i1, columns=[<span class="string">'i'</span>])</span><br><span class="line">df_t1 = pd.DataFrame(list_t1, columns=[<span class="string">'t'</span>])</span><br><span class="line"></span><br><span class="line">df_y1 = pd.DataFrame(list_y1, columns=[<span class="string">'y'</span>])</span><br><span class="line">df_x1 = pd.DataFrame(list_x1, columns=[<span class="string">'x1'</span>])</span><br><span class="line">df_x2 = pd.DataFrame(list_x2, columns=[<span class="string">'x2'</span>])</span><br><span class="line">df_x3 = pd.DataFrame(list_x3, columns=[<span class="string">'x3'</span>])</span><br><span class="line">df_x4 = pd.DataFrame(list_x4, columns=[<span class="string">'x4'</span>])</span><br><span class="line">df_z1 = pd.DataFrame(list_z1, columns=[<span class="string">'z1'</span>])</span><br><span class="line">df_z2 = pd.DataFrame(list_z2, columns=[<span class="string">'z2'</span>])</span><br><span class="line">all_data = pd.concat([df_i1, df_t1, df_y1, df_x1, df_x2, df_x3, df_x4, df_z1, df_z2], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">all_data.to_excel(<span class="string">'all_data.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>此时对应的参数设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">百次循环后，最高准确率<span class="number">0.9383155397390273</span></span><br><span class="line">最大准确率对应的序号：<span class="number">50</span></span><br><span class="line">百次循环后，似然值为<span class="number">-4063.265863470829</span></span><br><span class="line">对应的BIC为<span class="number">-4195.540439027526</span></span><br><span class="line">在<span class="number">4</span>个变量下的状态转移概率矩阵：[[<span class="number">0.9963942307692307</span>, <span class="number">0.003605769230769231</span>, <span class="number">0</span>], [<span class="number">0.10307564422277639</span>, <span class="number">0.8969243557772236</span>, <span class="number">0.0</span>], [<span class="number">0.0</span>, <span class="number">0.058704453441295545</span>, <span class="number">0.9412955465587044</span>]]</span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">-0.12383302</span>  <span class="number">-0.05998412</span>  <span class="number">-0.24795679</span> <span class="number">-14.57070714</span>]</span><br><span class="line"> [  <span class="number">0.0197879</span>   <span class="number">-0.05702528</span>   <span class="number">0.04541117</span>  <span class="number">-0.50336113</span>]</span><br><span class="line"> [  <span class="number">1.42194922</span>   <span class="number">0.30341754</span>   <span class="number">1.19921318</span>   <span class="number">7.34666875</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[<span class="number">-8.58771943</span> <span class="number">-0.06000747</span> <span class="number">-3.32333259</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[<span class="number">-1.01971402</span> <span class="number">-0.57938656</span>]</span><br><span class="line"> [ <span class="number">0.83284649</span> <span class="number">-1.75792799</span>]</span><br><span class="line"> [ <span class="number">0.25329582</span>  <span class="number">2.1562813</span> ]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[<span class="number">-1.02302946</span> <span class="number">-0.42107895</span> <span class="number">-1.67846306</span>]</span><br><span class="line">变量<span class="number">1</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.904165130851456</span>, <span class="number">0.09583486914854404</span>, <span class="number">0</span>], [<span class="number">0.8882108860141567</span>, <span class="number">0.0976324139614352</span>, <span class="number">0.014156700024408104</span>], [<span class="number">0</span>, <span class="number">0.009270704573547589</span>, <span class="number">0.9907292954264524</span>]]</span><br><span class="line">变量<span class="number">2</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8673055657943236</span>, <span class="number">0.13269443420567636</span>, <span class="number">0</span>], [<span class="number">0.877959482548206</span>, <span class="number">0.1098364657066146</span>, <span class="number">0.0122040517451794</span>], [<span class="number">0</span>, <span class="number">0.009888751545117428</span>, <span class="number">0.9901112484548825</span>]]</span><br><span class="line">变量<span class="number">3</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8669369701437523</span>, <span class="number">0.13306302985624768</span>, <span class="number">0</span>], [<span class="number">0.8777154015133024</span>, <span class="number">0.11008054674151818</span>, <span class="number">0.0122040517451794</span>], [<span class="number">0</span>, <span class="number">0.007416563658838072</span>, <span class="number">0.992583436341162</span>]]</span><br><span class="line">变量<span class="number">4</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8669369701437523</span>, <span class="number">0.13306302985624768</span>, <span class="number">0</span>], [<span class="number">0.8777154015133024</span>, <span class="number">0.11008054674151818</span>, <span class="number">0.0122040517451794</span>], [<span class="number">0</span>, <span class="number">0.007416563658838072</span>, <span class="number">0.992583436341162</span>]]</span><br><span class="line">全部变量下的知识贡献意愿转移概率</span><br><span class="line">u1=<span class="number">-8.537239946774692</span>,u2_1=<span class="number">-0.11583742328882626</span>,u2_h=<span class="number">-0.7220150302930365</span>, u3=<span class="number">-0.4933279734329048</span></span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">-0.12383302</span>  <span class="number">-0.05998412</span>  <span class="number">-0.24795679</span> <span class="number">-14.57070714</span>]</span><br><span class="line"> [  <span class="number">0.0197879</span>   <span class="number">-0.05702528</span>   <span class="number">0.04541117</span>  <span class="number">-0.50336113</span>]</span><br><span class="line"> [  <span class="number">1.42194922</span>   <span class="number">0.30341754</span>   <span class="number">1.19921318</span>   <span class="number">7.34666875</span>]]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[<span class="number">-1.01971402</span> <span class="number">-0.57938656</span>]</span><br><span class="line"> [ <span class="number">0.83284649</span> <span class="number">-1.75792799</span>]</span><br><span class="line"> [ <span class="number">0.25329582</span>  <span class="number">2.1562813</span> ]]</span><br><span class="line">观察状态概率转移矩阵的截距为：[<span class="number">-1.02302946</span> <span class="number">-0.42107895</span> <span class="number">-1.67846306</span>]</span><br><span class="line">所有参数和矩阵表格如上</span><br><span class="line">w1(x1)标准偏差为：<span class="number">0.02525464573099962</span></span><br><span class="line">w1(x2)标准偏差为：<span class="number">0.026393311062668005</span></span><br><span class="line">w1(x3)标准偏差为：<span class="number">0.07533481875592112</span></span><br><span class="line">w1(x4)标准偏差为：<span class="number">0.13181323299672285</span></span><br><span class="line">w2(x1)标准偏差为：<span class="number">0.01959329097587093</span></span><br><span class="line">w2(x2)标准偏差为：<span class="number">0.015565458670391606</span></span><br><span class="line">w2(x3)标准偏差为：<span class="number">0.01844469465856866</span></span><br><span class="line">w2(x4)标准偏差为：<span class="number">0.017210850554842068</span></span><br><span class="line">w3(x1)标准偏差为：<span class="number">0.08027460747756567</span></span><br><span class="line">w3(x2)标准偏差为：<span class="number">0.1133582520346092</span></span><br><span class="line">w3(x3)标准偏差为：<span class="number">0.09188332111057886</span></span><br><span class="line">w3(x4)标准偏差为：<span class="number">0.1810153307790173</span></span><br><span class="line">w1(Z1)标准偏差为：<span class="number">0.0722882365013184</span></span><br><span class="line">w1(Z2)标准偏差为：<span class="number">0.12683764260300465</span></span><br><span class="line">w2(Z1)标准偏差为：<span class="number">0.0722882365013184</span></span><br><span class="line">w2(Z2)标准偏差为：<span class="number">0.12683764260300465</span></span><br><span class="line">w3(Z1)标准偏差为：<span class="number">0.0722882365013184</span></span><br><span class="line">w3(Z2)标准偏差为：<span class="number">0.12683764260300465</span></span><br><span class="line">bz1截距的标准偏差为：<span class="number">0.07779008201467114</span></span><br><span class="line">bz2截距的标准偏差为：<span class="number">0.0651521267497443</span></span><br><span class="line">bz3截距的标准偏差为：<span class="number">0.08229776007120924</span></span><br><span class="line">bx1阈值的标准偏差为：<span class="number">0.05107259495619836</span></span><br><span class="line">bx2阈值的标准偏差为：<span class="number">0.015587987616212207</span></span><br><span class="line">bx3阈值的标准偏差为：<span class="number">0.06441769065231308</span></span><br></pre></td></tr></table></figure><p><strong>直接生成数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">math.log(<span class="number">3.9118942731277535</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">1.3640217255107674</span></span><br><span class="line"><span class="number">1.3640217255107674</span>+<span class="number">5.4588414</span></span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">6.822863125510767</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;样本数据的生成&quot;&gt;&lt;a href=&quot;#样本数据的生成&quot; class=&quot;headerlink&quot; title=&quot;样本数据的生成&quot;&gt;&lt;/a&gt;样本数据的生成&lt;/h1&gt;&lt;p&gt;样本数据只有222个，其中不活跃状态的197个，一般状态的18个，活跃状态的7个，样本数据太不活跃，
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HMM之数据的处理</title>
    <link href="https://esyyes.github.io/2020/07/09/HMM/HMM%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/07/09/HMM/HMM%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2020-07-08T23:55:52.000Z</published>
    <updated>2020-07-08T23:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HMM之数据的处理"><a href="#HMM之数据的处理" class="headerlink" title="HMM之数据的处理"></a>HMM之数据的处理</h1><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><p>直接读取数据</p><p>数据类型如下所示：</p><table><thead><tr><th align="right"></th><th align="right">i</th><th align="right">t</th><th align="right">y</th><th align="right">x1</th><th align="right">x2</th><th align="right">x3</th><th align="right">x4</th><th align="right">z1</th><th align="right">z2</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">1</td><td align="right">0</td><td align="right">3891</td><td align="right">116</td><td align="right">0</td><td align="right">0</td><td align="right">6.0</td><td align="right">59.0</td></tr><tr><td align="right">1</td><td align="right">1</td><td align="right">2</td><td align="right">0</td><td align="right">5958</td><td align="right">93</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr><tr><td align="right">2</td><td align="right">1</td><td align="right">3</td><td align="right">0</td><td align="right">5362</td><td align="right">106</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr><tr><td align="right">3</td><td align="right">1</td><td align="right">4</td><td align="right">0</td><td align="right">2528</td><td align="right">126</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr><tr><td align="right">4</td><td align="right">1</td><td align="right">5</td><td align="right">1</td><td align="right">1219</td><td align="right">215</td><td align="right">0</td><td align="right">0</td><td align="right">NaN</td><td align="right">NaN</td></tr></tbody></table><h3 id="数据的含义"><a href="#数据的含义" class="headerlink" title="数据的含义"></a>数据的含义</h3><p>i对应的是一个人，t表示的是一个时期为一周，x1-x4,表示的是自变量，是影响隐马尔科夫模型的转移概率矩阵，z1,z2,是控制变量，是可以长期影响一个人的控制变量数据，是状态转移矩阵的估计量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                  表 <span class="number">4</span><span class="number">-2</span> 变量的统计学描述                </span><br><span class="line">变量名样本数 均值标准差最小值最大值</span><br><span class="line">y<span class="number">3108</span><span class="number">1.119691</span><span class="number">6.266278</span><span class="number">0</span><span class="number">111</span></span><br><span class="line">x1<span class="number">3108</span><span class="number">1301.892</span><span class="number">2582.350</span><span class="number">0</span><span class="number">42864</span></span><br><span class="line">x2<span class="number">3108</span><span class="number">615.3838</span><span class="number">2130.248</span><span class="number">-58</span><span class="number">46162</span></span><br><span class="line">x3<span class="number">3108</span><span class="number">1.071750</span><span class="number">4.706953</span><span class="number">0</span><span class="number">103</span></span><br><span class="line">x4<span class="number">3108</span><span class="number">0.751609</span><span class="number">5.057782</span><span class="number">0</span><span class="number">90</span></span><br></pre></td></tr></table></figure><p>样本差异过大，所以需要进行归一化或者标准化处理</p><p>没有数据缺失，因此只需要进行标准化即可。</p><h3 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">均值插补缺省值</span></span><br><span class="line"><span class="string">z-score标准化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_pre</span><span class="params">(data)</span>:</span></span><br><span class="line">    df = data.replace([np.inf, -np.inf], np.nan)</span><br><span class="line">    num = df.isnull().sum()</span><br><span class="line">    [df[df.keys()[i]].fillna(value=df[df.keys()[i]].mean(), inplace=<span class="literal">True</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)) <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    df_scale = preprocessing.scale(df)</span><br><span class="line">    <span class="comment"># 将标准化后的数据再转换为表格</span></span><br><span class="line">    fea = pd.DataFrame(df_scale, columns=data.keys())</span><br><span class="line">    <span class="keyword">return</span> fea</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">         x1        x2        x3        x4</span><br><span class="line"><span class="number">0</span>  <span class="number">1.002617</span> <span class="number">-0.234425</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.803051</span> <span class="number">-0.245222</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.572253</span> <span class="number">-0.239119</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.474803</span> <span class="number">-0.229731</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.032099</span> <span class="number">-0.187952</span> <span class="number">-0.227695</span> <span class="number">-0.148604</span></span><br></pre></td></tr></table></figure><p>数据标准化后结果如上图所示</p><h3 id="HMM的状态划分"><a href="#HMM的状态划分" class="headerlink" title="HMM的状态划分"></a>HMM的状态划分</h3><p>在现实的数据中，HMM的隐藏状态是无法直接判别的，因此需要对状态进行判别。</p><p>在模型训练中最重要的步骤是进行模型状态数量的<br>确定。由于在大多数实验过程中，并不能直接确定将研究的隐藏状态分为几<br>个状态水平较为合适，因此，需要通过建立多个模型，根据贝叶斯信息准则<br>对模型的拟合效果进行比较，选择最佳的模型作为实际研究模型。</p><p>据相关研究，需要通过假定不同的状态量 S，建立若干个模<br>型，训练模型后计算模型的对数似然值。再根据贝叶斯信息准则（BIC）的<br>计算方法，计算 BIC 的值，比较后选择效果较好的模型。 </p><p> <strong>BIC =ln L − k× ln P / 2</strong>   </p><p>BIC 值的计算方法，其中 ln L 代表模型的对数<br>似然值，k 代表模型的变量个数，P 代表样本大小。BIC 的值越大，表示模<br>型训练的效果越好。</p><p>因此需要最大似然值和BIC进行估计，判断在什么状态下的数据最好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">根据样本数据。因此确定选择<span class="number">1</span>为阈值下</span><br><span class="line">均值下的似然估计值为：    <span class="number">-955.2942841591449</span></span><br><span class="line">分类为<span class="number">2</span>均值下的BIC为：<span class="number">-1028.7801594684208</span></span><br><span class="line">变量：<span class="number">12</span></span><br><span class="line"><span class="number">1</span>值下的似然估计值为：    <span class="number">-1589.5001457084938</span></span><br><span class="line">分类为<span class="number">2</span>阈值为<span class="number">1</span>下的BIC为：<span class="number">-1662.9860210177699</span></span><br><span class="line">状态为<span class="number">3</span>时：设定<span class="number">1</span>《《标准差为阈值</span><br><span class="line">变量：<span class="number">18</span></span><br><span class="line">似然估计值为：    <span class="number">-1486.947107953313</span></span><br><span class="line">分类为<span class="number">3</span>时的BIC为：<span class="number">-1619.2216835100096</span></span><br><span class="line">状态为<span class="number">4</span>时：设定<span class="number">1</span>《《标准差《《方差为阈值</span><br><span class="line">变量：<span class="number">24</span></span><br><span class="line">似然估计值为： <span class="number">-1524.3108928288107</span> </span><br><span class="line">分类为<span class="number">4</span>时的BIC为：<span class="number">-1700.676993571073</span></span><br></pre></td></tr></table></figure><p>因此确定3为状态数</p><h3 id="初始状态概率矩阵"><a href="#初始状态概率矩阵" class="headerlink" title="初始状态概率矩阵"></a>初始状态概率矩阵</h3><p>直接用划分的状态进行划分初始状态概率矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当状态为<span class="number">2</span>时：</span><br><span class="line">[[<span class="number">0.7918275418275418</span>, <span class="number">0.20817245817245822</span>]]</span><br><span class="line">当状态为<span class="number">3</span>时：</span><br><span class="line">[[<span class="number">0.7918275418275418</span>, <span class="number">0.3462033462033462</span>, <span class="number">0.03507078507078507</span>]]</span><br><span class="line">当状态为<span class="number">4</span>时：</span><br><span class="line">[[<span class="number">0.7918275418275418</span>, <span class="number">0.3462033462033462</span>, <span class="number">0.030244530244530245</span>, <span class="number">0.004826254826254826</span>]]</span><br></pre></td></tr></table></figure><h3 id="判断最大似然的收敛性"><a href="#判断最大似然的收敛性" class="headerlink" title="判断最大似然的收敛性"></a>判断最大似然的收敛性</h3><p>用百次循环的结果去对应查看数据是否收敛</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 解决中文显示问题</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line">plt.plot(list_L, <span class="string">"bo"</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Number of Iterations"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Loglik"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 去边框</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cloglik.png" alt="loglik"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/9</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> HMM_class <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LR <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 转换列表</span></span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X1 = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">X = data_pre(X1)</span><br><span class="line">Z = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">7</span>:<span class="number">9</span>])</span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"><span class="comment"># 划分为状态3</span></span><br><span class="line"><span class="comment"># 状态1：小于1的</span></span><br><span class="line"><span class="comment"># 状态2：小于标准差</span></span><br><span class="line"><span class="comment"># 状态3：大于标准差</span></span><br><span class="line"></span><br><span class="line">Y_X = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_X.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std:</span><br><span class="line">        Y_X.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_X.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line">Z1 = [[int(list_data[<span class="number">14</span>*j][k]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)) <span class="keyword">if</span> <span class="number">14</span> * j == i <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">7</span>, <span class="number">9</span>)]</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>))]</span><br><span class="line">Z2 = pd.DataFrame(Z1, columns=[<span class="string">'z1'</span>, <span class="string">'z2'</span>])</span><br><span class="line">Z = data_pre(Z2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line">Y_Z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HMM模型参数设置</span></span><br><span class="line">HMM = HiddenMarkov()</span><br><span class="line">Q = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">V = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">B = [[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>],</span><br><span class="line">     [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>],</span><br><span class="line">     [<span class="number">0.0</span>, <span class="number">0.09183673469387756</span>, <span class="number">0.9081632653061223</span>]]</span><br><span class="line">PI = [[num1/len(data), num2/len(data), num3/len(data)]]</span><br><span class="line"></span><br><span class="line">list_L = []</span><br><span class="line">list_fix_x = []</span><br><span class="line">list_fix_z = []</span><br><span class="line">list_lr_x_w = []</span><br><span class="line">list_lr_z_w = []</span><br><span class="line">list_lr_x_b = []</span><br><span class="line">list_lr_z_b = []</span><br><span class="line">list_A = []</span><br><span class="line">list_BIC = []</span><br><span class="line">list_acr_x = []</span><br><span class="line">list_acr_z = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    acr_x, fix_x, lr_x_w, lr_x_b = run_lr(X, Y_X)</span><br><span class="line">    acr_z, fix_z, lr_z_w, lr_z_b = run_lr(Z, Y_Z)</span><br><span class="line">    A = [[fix_x[<span class="number">0</span>][<span class="number">0</span>]/fix_x[<span class="number">0</span>].sum(), fix_x[<span class="number">0</span>][<span class="number">1</span>]/fix_x[<span class="number">0</span>].sum(), fix_x[<span class="number">0</span>][<span class="number">2</span>]/fix_x[<span class="number">0</span>].sum()],</span><br><span class="line">         [fix_x[<span class="number">1</span>][<span class="number">0</span>]/fix_x[<span class="number">1</span>].sum(), fix_x[<span class="number">1</span>][<span class="number">1</span>]/fix_x[<span class="number">1</span>].sum(), fix_x[<span class="number">1</span>][<span class="number">2</span>]/fix_x[<span class="number">1</span>].sum()],</span><br><span class="line">         [fix_x[<span class="number">2</span>][<span class="number">0</span>]/fix_x[<span class="number">2</span>].sum(), fix_x[<span class="number">2</span>][<span class="number">1</span>]/fix_x[<span class="number">2</span>].sum(), fix_x[<span class="number">2</span>][<span class="number">2</span>]/fix_x[<span class="number">2</span>].sum()]</span><br><span class="line">         ]</span><br><span class="line"></span><br><span class="line">    P = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">        O = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">                O.append(Y_X[i])</span><br><span class="line">        P.append(HMM.forward(Q, V, A, B, O, PI))</span><br><span class="line"></span><br><span class="line">    L = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(P)):</span><br><span class="line">        L += math.log(P[i])</span><br><span class="line">    BIC = L - <span class="number">18</span> * (math.log(<span class="number">3108</span> / <span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 保存似然值</span></span><br><span class="line">    list_A.append(A)</span><br><span class="line">    list_L.append(L)</span><br><span class="line">    list_BIC.append(BIC)</span><br><span class="line">    list_fix_x.append(fix_x)</span><br><span class="line">    list_fix_z.append(fix_z)</span><br><span class="line">    list_lr_x_w.append(lr_x_w)</span><br><span class="line">    list_lr_z_w.append(lr_z_w)</span><br><span class="line">    list_lr_x_b.append(lr_x_b)</span><br><span class="line">    list_lr_z_b.append(lr_z_b)</span><br><span class="line">    list_acr_x.append(acr_x)</span><br><span class="line">    list_acr_z.append(acr_z)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'百次循环后，最高准确率<span class="subst">&#123;max(list_acr_x)&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'最大准确率对应的序号：<span class="subst">&#123;list_acr_x.index(max(list_acr_x))&#125;</span>'</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">f'百次循环后，似然值为<span class="subst">&#123;list_L[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'对应的BIC为<span class="subst">&#123;list_BIC[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'在4个变量下的状态转移概率矩阵：<span class="subst">&#123;list_A[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'-'</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">f'参数估计'</span>)</span><br><span class="line">print(<span class="string">f'状态转移概率矩阵的系数为：<span class="subst">&#123;list_lr_x_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'状态转移概率矩阵的偏差为：<span class="subst">&#123;list_lr_x_b[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的系数为：<span class="subst">&#123;list_lr_z_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的偏差为：<span class="subst">&#123;list_lr_z_b[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">num = list_acr_x.index(max(list_acr_x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_x = np.array(X).tolist()</span><br><span class="line">print(<span class="string">f'变量1下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b0 = []</span><br><span class="line">wx_b1 = []</span><br><span class="line">wx_b2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b0.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b1.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b2.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b0), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b2), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b1), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态1个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H = [[(len(wx_b0) - <span class="number">260</span>)/len(wx_b0), <span class="number">260</span>/len(wx_b0), <span class="number">0</span>],</span><br><span class="line">     [(len(wx_b1) - <span class="number">458</span>)/len(wx_b1), <span class="number">400</span>/len(wx_b1), <span class="number">58</span>/len(wx_b1)],</span><br><span class="line">     [<span class="number">0</span>, <span class="number">15</span>/len(wx_b2), <span class="number">1</span><span class="number">-15</span>/(len(wx_b2))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'变量2下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b20 = []</span><br><span class="line">wx_b21 = []</span><br><span class="line">wx_b22 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b20.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b21.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b22.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b20), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b22), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b21), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态2个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,   状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H2 = [[(len(wx_b20) - <span class="number">360</span>)/len(wx_b20), <span class="number">360</span>/len(wx_b20), <span class="number">0</span>],</span><br><span class="line">      [(len(wx_b21) - <span class="number">500</span>)/len(wx_b21), <span class="number">450</span>/len(wx_b21), <span class="number">50</span>/len(wx_b21)],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">16</span>/len(wx_b22), <span class="number">1</span><span class="number">-16</span>/(len(wx_b22))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H2&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'变量3下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b30 = []</span><br><span class="line">wx_b31 = []</span><br><span class="line">wx_b32 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b30.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b31.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b32.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b30), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b32), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b31), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态2个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,   状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H3 = [[(len(wx_b30) - <span class="number">361</span>)/len(wx_b30), <span class="number">361</span>/len(wx_b30), <span class="number">0</span>],</span><br><span class="line">      [(len(wx_b31) - <span class="number">501</span>)/len(wx_b31), <span class="number">451</span>/len(wx_b31), <span class="number">50</span>/len(wx_b31)],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">12</span>/len(wx_b32), <span class="number">1</span><span class="number">-12</span>/(len(wx_b32))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'变量4下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_b40 = []</span><br><span class="line">wx_b41 = []</span><br><span class="line">wx_b42 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_b40.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] + list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_b41.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] + list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_b42.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] + list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fig = plt.figure(figsize=(10, 8))</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b40), "bo", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b42), "ro", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.plot(np.array(wx_b41), "ko", linewidth=1)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态2个数： len(wx_b0) = 2461</span></span><br><span class="line"><span class="comment"># 将其排序,   状态1中设置260个</span></span><br><span class="line"><span class="comment"># 状态2时的个数： 538,设置为80， 400， 58</span></span><br><span class="line"><span class="comment"># 状态3时的个数：109 ， 在2中设置35个</span></span><br><span class="line"></span><br><span class="line">H4 = [[(len(wx_b40) - <span class="number">361</span>)/len(wx_b40), <span class="number">361</span>/len(wx_b40), <span class="number">0</span>],</span><br><span class="line">      [(len(wx_b41) - <span class="number">501</span>)/len(wx_b41), <span class="number">451</span>/len(wx_b41), <span class="number">50</span>/len(wx_b41)],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">12</span>/len(wx_b42), <span class="number">1</span><span class="number">-12</span>/(len(wx_b42))]]</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;H4&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部数值下</span></span><br><span class="line">print(<span class="string">f'全部变量下的知识贡献意愿转移概率'</span>)</span><br><span class="line">wx_ba0 = []</span><br><span class="line">wx_ba1 = []</span><br><span class="line">wx_ba2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">0</span>:</span><br><span class="line">        wx_ba0.append(list_lr_x_w[num][<span class="number">0</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">0</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">0</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">0</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] +</span><br><span class="line">                      list_lr_x_b[num][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        wx_ba1.append(list_lr_x_w[num][<span class="number">1</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">1</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">1</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">1</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] +</span><br><span class="line">                      list_lr_x_b[num][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wx_ba2.append(list_lr_x_w[num][<span class="number">2</span>][<span class="number">0</span>] * list_x[i][<span class="number">0</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">2</span>][<span class="number">1</span>] * list_x[i][<span class="number">1</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">2</span>][<span class="number">2</span>] * list_x[i][<span class="number">2</span>] +</span><br><span class="line">                      list_lr_x_w[num][<span class="number">2</span>][<span class="number">3</span>] * list_x[i][<span class="number">3</span>] +</span><br><span class="line">                      list_lr_x_b[num][<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 进行排序</span></span><br><span class="line">wx_ba0.sort()</span><br><span class="line">wx_ba1.sort()</span><br><span class="line">wx_ba2.sort()</span><br><span class="line"><span class="comment"># 找到边界,意思就是找到相对应的u1,u2-1,u2-h,u-3</span></span><br><span class="line"><span class="comment"># 我是这样理解的，其实对应的就是x_b的系数，但是少了一个而已</span></span><br><span class="line">b = list_fix_x[num][<span class="number">0</span>][<span class="number">1</span>]/sum(list_fix_x[num][<span class="number">0</span>])</span><br><span class="line">x = len(wx_ba0) * b</span><br><span class="line"><span class="comment"># 即根据前面那个</span></span><br><span class="line"><span class="comment"># 取倒数第16个作为边界吧</span></span><br><span class="line">u1 = wx_b0[<span class="number">-16</span>]</span><br><span class="line">b1 = list_fix_x[num][<span class="number">1</span>][<span class="number">0</span>]/sum(list_fix_x[num][<span class="number">1</span>])</span><br><span class="line">x1 = len(wx_ba1) * b1</span><br><span class="line">u2_1 = wx_ba1[int(x1)]</span><br><span class="line">b2 = list_fix_x[num][<span class="number">1</span>][<span class="number">2</span>]/sum(list_fix_x[num][<span class="number">1</span>])</span><br><span class="line">x2 = len(wx_ba1) * b2</span><br><span class="line">u2_h = wx_ba1[-int(x2)]</span><br><span class="line"></span><br><span class="line">b3 = list_fix_x[num][<span class="number">2</span>][<span class="number">2</span>]/sum(list_fix_x[num][<span class="number">2</span>])</span><br><span class="line">x4 = len(wx_b2) * b3</span><br><span class="line">u3 = wx_ba2[-int(x4)]</span><br><span class="line">print(<span class="string">f'u1=<span class="subst">&#123;u1&#125;</span>,u2_1=<span class="subst">&#123;u2_1&#125;</span>,u2_h=<span class="subst">&#123;u2_h&#125;</span>, u3=<span class="subst">&#123;u3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'状态转移概率矩阵的系数为：<span class="subst">&#123;list_lr_x_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的系数为：<span class="subst">&#123;list_lr_z_w[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'观察状态概率转移矩阵的截距为：<span class="subst">&#123;list_lr_z_b[list_acr_x.index(max(list_acr_x))]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'所有参数和矩阵表格如上'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">百次循环后，最高准确率<span class="number">0.917470525187567</span></span><br><span class="line">最大准确率对应的序号：<span class="number">29</span></span><br><span class="line"></span><br><span class="line">百次循环后，似然值为<span class="number">-1355.7570132278736</span></span><br><span class="line">对应的BIC为<span class="number">-1488.0315887845702</span></span><br><span class="line">在<span class="number">4</span>个变量下的状态转移概率矩阵：[[<span class="number">0.9868073878627969</span>, <span class="number">0.013192612137203167</span>, <span class="number">0.0</span>], [<span class="number">0.40816326530612246</span>, <span class="number">0.5782312925170068</span>, <span class="number">0.013605442176870748</span>], [<span class="number">0.0</span>, <span class="number">0.17857142857142858</span>, <span class="number">0.8214285714285714</span>]]</span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[<span class="number">-0.07814258</span> <span class="number">-0.08035225</span> <span class="number">-0.03518065</span> <span class="number">-8.30153077</span>]</span><br><span class="line"> [<span class="number">-0.07992528</span>  <span class="number">0.07019997</span> <span class="number">-0.02918073</span>  <span class="number">2.04945495</span>]</span><br><span class="line"> [ <span class="number">0.15806786</span>  <span class="number">0.01015228</span>  <span class="number">0.06436137</span>  <span class="number">6.25207582</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[ <span class="number">1.46433444</span>  <span class="number">1.09085289</span> <span class="number">-2.55518733</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[ <span class="number">0.44462513</span>  <span class="number">0.22701876</span>]</span><br><span class="line"> [ <span class="number">0.48690629</span> <span class="number">-0.33289007</span>]</span><br><span class="line"> [<span class="number">-0.93153142</span>  <span class="number">0.10587131</span>]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[ <span class="number">2.26772789</span> <span class="number">-0.16557564</span> <span class="number">-2.10215226</span>]</span><br><span class="line">变量<span class="number">1</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8943518894758228</span>, <span class="number">0.10564811052417716</span>, <span class="number">0</span>], [<span class="number">0.14869888475836432</span>, <span class="number">0.7434944237918215</span>, <span class="number">0.10780669144981413</span>], [<span class="number">0</span>, <span class="number">0.13761467889908258</span>, <span class="number">0.8623853211009174</span>]]</span><br><span class="line">变量<span class="number">2</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8537180008126778</span>, <span class="number">0.14628199918732224</span>, <span class="number">0</span>], [<span class="number">0.07063197026022305</span>, <span class="number">0.8364312267657993</span>, <span class="number">0.09293680297397769</span>], [<span class="number">0</span>, <span class="number">0.14678899082568808</span>, <span class="number">0.8532110091743119</span>]]</span><br><span class="line">变量<span class="number">3</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8533116619260463</span>, <span class="number">0.14668833807395368</span>, <span class="number">0</span>], [<span class="number">0.0687732342007435</span>, <span class="number">0.8382899628252788</span>, <span class="number">0.09293680297397769</span>], [<span class="number">0</span>, <span class="number">0.11009174311926606</span>, <span class="number">0.8899082568807339</span>]]</span><br><span class="line">变量<span class="number">4</span>下的知识贡献意愿转移概率</span><br><span class="line">[[<span class="number">0.8533116619260463</span>, <span class="number">0.14668833807395368</span>, <span class="number">0</span>], [<span class="number">0.0687732342007435</span>, <span class="number">0.8382899628252788</span>, <span class="number">0.09293680297397769</span>], [<span class="number">0</span>, <span class="number">0.11009174311926606</span>, <span class="number">0.8899082568807339</span>]]</span><br><span class="line">全部变量下的知识贡献意愿转移概率</span><br><span class="line">u1=<span class="number">1.4980410992089837</span>,u2_1=<span class="number">0.8129063006054411</span>,u2_h=<span class="number">2.8303668243942806</span>, u3=<span class="number">2.68524912411076</span></span><br><span class="line">状态转移概率矩阵的系数为：[[<span class="number">-0.07814258</span> <span class="number">-0.08035225</span> <span class="number">-0.03518065</span> <span class="number">-8.30153077</span>]</span><br><span class="line"> [<span class="number">-0.07992528</span>  <span class="number">0.07019997</span> <span class="number">-0.02918073</span>  <span class="number">2.04945495</span>]</span><br><span class="line"> [ <span class="number">0.15806786</span>  <span class="number">0.01015228</span>  <span class="number">0.06436137</span>  <span class="number">6.25207582</span>]]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[ <span class="number">0.44462513</span>  <span class="number">0.22701876</span>]</span><br><span class="line"> [ <span class="number">0.48690629</span> <span class="number">-0.33289007</span>]</span><br><span class="line"> [<span class="number">-0.93153142</span>  <span class="number">0.10587131</span>]]</span><br><span class="line">观察状态概率转移矩阵的截距为：[ <span class="number">2.26772789</span> <span class="number">-0.16557564</span> <span class="number">-2.10215226</span>]</span><br><span class="line">所有参数和矩阵表格如上</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594399298975&di=10b635fa56f834e6a4afb58286e8c847&imgtype=0&src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2Fb6d8d812ef63e040bd944da29effa95001176a20.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HMM之数据的处理&quot;&gt;&lt;a href=&quot;#HMM之数据的处理&quot; class=&quot;headerlink&quot; title=&quot;HMM之数据的处理&quot;&gt;&lt;/a&gt;HMM之数据的处理&lt;/h1&gt;&lt;h2 id=&quot;查看数据&quot;&gt;&lt;a href=&quot;#查看数据&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>状态为3时的设定</title>
    <link href="https://esyyes.github.io/2020/07/08/HMM/%E7%8A%B6%E6%80%81%E4%B8%BA3%E6%97%B6%E7%9A%84%E8%AE%BE%E5%AE%9A/"/>
    <id>https://esyyes.github.io/2020/07/08/HMM/%E7%8A%B6%E6%80%81%E4%B8%BA3%E6%97%B6%E7%9A%84%E8%AE%BE%E5%AE%9A/</id>
    <published>2020-07-08T06:45:11.000Z</published>
    <updated>2020-07-08T06:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态为3是的B值设定"><a href="#状态为3是的B值设定" class="headerlink" title="状态为3是的B值设定"></a>状态为3是的B值设定</h1><p>划分为状态3# 状态1：小于平均值的# 状态2：小于标准差# 状态3：大于标准差</p><p>将里面的数据直接划分为3个状态，按照3个状态的区间范围，去设定序列的状态值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分为状态3</span></span><br><span class="line"><span class="comment"># 状态1：小于平均值的</span></span><br><span class="line"><span class="comment"># 状态2：小于标准差</span></span><br><span class="line"><span class="comment"># 状态3：大于标准差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列中出现0,1,2阶段的数目</span></span><br><span class="line">Y_X = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_X.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std:</span><br><span class="line">        Y_X.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_X.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'阶段1的个数：<span class="subst">&#123;num1&#125;</span>,阶段2的个数：<span class="subst">&#123;num2&#125;</span>,阶段3的个数：<span class="subst">&#123;num3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断序列阶段出现出现的次数</span></span><br><span class="line">num1_z = <span class="number">0</span></span><br><span class="line">num2_z = <span class="number">0</span></span><br><span class="line">num3_z = <span class="number">0</span></span><br><span class="line">Y_Z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3_z += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1的序列个数：<span class="subst">&#123;num1_z&#125;</span>,阶段2的序列个数：<span class="subst">&#123;num2_z&#125;</span>, 阶段3的序列个数：<span class="subst">&#123;num3_z&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其划分为14个一组一个序列</span></span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    x1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            x1.append(Y_X[i])</span><br><span class="line">    Y.append(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断阶段1中出现012的次数</span></span><br><span class="line">num_j1 = <span class="number">0</span></span><br><span class="line">num_j2 = <span class="number">0</span></span><br><span class="line">num_j3 = <span class="number">0</span></span><br><span class="line">num_k1 = <span class="number">0</span></span><br><span class="line">num_k2 = <span class="number">0</span></span><br><span class="line">num_k3 = <span class="number">0</span></span><br><span class="line">num_b1 = <span class="number">0</span></span><br><span class="line">num_b2 = <span class="number">0</span></span><br><span class="line">num_b3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][j] == <span class="number">0</span>:</span><br><span class="line">                num_j1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][j] == <span class="number">1</span>:</span><br><span class="line">                num_j2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_j3 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][k] == <span class="number">0</span>:</span><br><span class="line">                num_k1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][k] == <span class="number">1</span>:</span><br><span class="line">                num_k2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_k3 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][b] == <span class="number">0</span>:</span><br><span class="line">                num_b1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][b] == <span class="number">1</span>:</span><br><span class="line">                num_b2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_b3 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'阶段1中状态1的个数  <span class="subst">&#123;num_j1&#125;</span>，状态2的个数<span class="subst">&#123;num_j2&#125;</span>，状态2的个数<span class="subst">&#123;num_j3&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段2中状态1的个数  <span class="subst">&#123;num_k1&#125;</span>，  状态2的个数  <span class="subst">&#123;num_k2&#125;</span>，状态2的个数<span class="subst">&#123;num_k3&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段3中状态1的个数  <span class="subst">&#123;num_b1&#125;</span>，  状态2的个数  <span class="subst">&#123;num_b2&#125;</span>，状态2的个数<span class="subst">&#123;num_b3&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">B = [[num_j1/num1_z/<span class="number">14</span>, num_j2/num1_z/<span class="number">14</span>, num_j3/num1_z/<span class="number">14</span>],</span><br><span class="line">     [num_k1/num2_z/<span class="number">14</span>, num_k2/num2_z/<span class="number">14</span>, num_k3/num2_z/<span class="number">14</span>],</span><br><span class="line">     [num_b1/num3_z/<span class="number">14</span>, num_b2/num3_z/<span class="number">14</span>, num_b3/num3_z/<span class="number">14</span>]]</span><br><span class="line">print(<span class="string">f'在阈值线为平均值下的<span class="subst">&#123;B&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">阶段<span class="number">1</span>的个数：<span class="number">2461</span>,阶段<span class="number">2</span>的个数：<span class="number">1076</span>,阶段<span class="number">3</span>的个数：<span class="number">109</span></span><br><span class="line">阶段<span class="number">1</span>的序列个数：<span class="number">197</span>,阶段<span class="number">2</span>的序列个数：<span class="number">18</span>, 阶段<span class="number">3</span>的序列个数：<span class="number">7</span></span><br><span class="line">阶段<span class="number">1</span>中状态<span class="number">1</span>的个数  <span class="number">2418</span>，状态<span class="number">2</span>的个数<span class="number">340</span>，状态<span class="number">2</span>的个数<span class="number">0</span></span><br><span class="line">阶段<span class="number">2</span>中状态<span class="number">1</span>的个数  <span class="number">43</span>，  状态<span class="number">2</span>的个数  <span class="number">189</span>，状态<span class="number">2</span>的个数<span class="number">20</span></span><br><span class="line">阶段<span class="number">3</span>中状态<span class="number">1</span>的个数  <span class="number">0</span>，  状态<span class="number">2</span>的个数  <span class="number">9</span>，状态<span class="number">2</span>的个数<span class="number">89</span></span><br><span class="line">在阈值线为平均值下的[[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>], [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>], [<span class="number">0.0</span>, <span class="number">0.09183673469387756</span>, <span class="number">0.9081632653061223</span>]]</span><br></pre></td></tr></table></figure><p>将数据设定为4状态时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line">y1_std = np.array(list_y1).std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分为状态4</span></span><br><span class="line"><span class="comment"># # 状态1：小于平均值的</span></span><br><span class="line"><span class="comment"># # 状态2：小于标准差</span></span><br><span class="line"><span class="comment"># # 状态3：小于方差的</span></span><br><span class="line"><span class="comment"># # 状态4：大于方差的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列中出现0,1,2阶段的数目</span></span><br><span class="line">Y_X = []</span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line">num4 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_X.append(<span class="number">0</span>)</span><br><span class="line">        num1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std:</span><br><span class="line">        Y_X.append(<span class="number">1</span>)</span><br><span class="line">        num2 += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> y1_std &lt;= list_data[i][<span class="number">2</span>] &lt; y1_std*y1_std:</span><br><span class="line">        Y_X.append(<span class="number">2</span>)</span><br><span class="line">        num3 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_X.append(<span class="number">3</span>)</span><br><span class="line">        num4 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1的个数：<span class="subst">&#123;num1&#125;</span>,阶段2的个数：<span class="subst">&#123;num2&#125;</span>, 阶段3的个数：<span class="subst">&#123;num3&#125;</span>, 阶段4的个数：<span class="subst">&#123;num4&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断序列阶段出现出现的次数</span></span><br><span class="line">num1_z = <span class="number">0</span></span><br><span class="line">num2_z = <span class="number">0</span></span><br><span class="line">num3_z = <span class="number">0</span></span><br><span class="line">num4_z = <span class="number">0</span></span><br><span class="line">Y_Z = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y)):</span><br><span class="line">    <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span>:</span><br><span class="line">        Y_Z.append(<span class="number">0</span>)</span><br><span class="line">        num1_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> &lt;= list_z_y[i] &lt; y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">1</span>)</span><br><span class="line">        num2_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> y1_std &lt;= list_z_y[i] &lt; y1_std * y1_std:</span><br><span class="line">        Y_Z.append(<span class="number">2</span>)</span><br><span class="line">        num3_z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Y_Z.append(<span class="number">3</span>)</span><br><span class="line">        num4_z += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1的序列个数：<span class="subst">&#123;num1_z&#125;</span>,阶段2的序列个数：<span class="subst">&#123;num2_z&#125;</span>, 阶段3的序列个数：<span class="subst">&#123;num3_z&#125;</span>, 阶段4的序列个数：<span class="subst">&#123;num4_z&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其划分为14个一组一个序列</span></span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    x1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            x1.append(Y_X[i])</span><br><span class="line">    Y.append(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断阶段1中出现012的次数</span></span><br><span class="line">num_j1 = <span class="number">0</span></span><br><span class="line">num_j2 = <span class="number">0</span></span><br><span class="line">num_j3 = <span class="number">0</span></span><br><span class="line">num_j4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">num_k1 = <span class="number">0</span></span><br><span class="line">num_k2 = <span class="number">0</span></span><br><span class="line">num_k3 = <span class="number">0</span></span><br><span class="line">num_k4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">num_b1 = <span class="number">0</span></span><br><span class="line">num_b2 = <span class="number">0</span></span><br><span class="line">num_b3 = <span class="number">0</span></span><br><span class="line">num_b4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">num_h1 = <span class="number">0</span></span><br><span class="line">num_h2 = <span class="number">0</span></span><br><span class="line">num_h3 = <span class="number">0</span></span><br><span class="line">num_h4 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][j] == <span class="number">0</span>:</span><br><span class="line">                num_j1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][j] == <span class="number">1</span>:</span><br><span class="line">                num_j2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][j] == <span class="number">2</span>:</span><br><span class="line">                num_j3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_j4 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][k] == <span class="number">0</span>:</span><br><span class="line">                num_k1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][k] == <span class="number">1</span>:</span><br><span class="line">                num_k2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][k] == <span class="number">2</span>:</span><br><span class="line">                num_k3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_k4 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][b] == <span class="number">0</span>:</span><br><span class="line">                num_b1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][b] == <span class="number">1</span>:</span><br><span class="line">                num_b2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][b] == <span class="number">2</span>:</span><br><span class="line">                num_b3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_b4 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Y_Z[i] == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][h] == <span class="number">0</span>:</span><br><span class="line">                num_h1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][h] == <span class="number">1</span>:</span><br><span class="line">                num_h2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> Y[i][h] == <span class="number">2</span>:</span><br><span class="line">                num_h3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_h4 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1中状态1的个数  <span class="subst">&#123;num_j1&#125;</span>，状态2的个数<span class="subst">&#123;num_j2&#125;</span>，状态3的个数<span class="subst">&#123;num_j3&#125;</span>, 状态4的个数<span class="subst">&#123;num_j4&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段2中状态1的个数  <span class="subst">&#123;num_k1&#125;</span>，状态2的个数  <span class="subst">&#123;num_k2&#125;</span>，状态3的个数<span class="subst">&#123;num_k3&#125;</span>, 状态4的个数<span class="subst">&#123;num_k4&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段3中状态1的个数  <span class="subst">&#123;num_b1&#125;</span>，状态2的个数  <span class="subst">&#123;num_b2&#125;</span>，状态3的个数<span class="subst">&#123;num_b3&#125;</span>, 状态4的个数<span class="subst">&#123;num_b4&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'阶段4中状态1的个数  <span class="subst">&#123;num_h1&#125;</span>，状态2的个数  <span class="subst">&#123;num_h2&#125;</span>，状态3的个数<span class="subst">&#123;num_h3&#125;</span>, 状态4的个数<span class="subst">&#123;num_h4&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">B = [[num_j1/num1_z/<span class="number">14</span>, num_j2/num1_z/<span class="number">14</span>, num_j3/num1_z/<span class="number">14</span>, num_j4/num1_z/<span class="number">14</span>,],</span><br><span class="line">     [num_k1/num2_z/<span class="number">14</span>, num_k2/num2_z/<span class="number">14</span>, num_k3/num2_z/<span class="number">14</span>, num_k4/num2_z/<span class="number">14</span>],</span><br><span class="line">     [num_b1/num3_z/<span class="number">14</span>, num_b2/num3_z/<span class="number">14</span>, num_b3/num3_z/<span class="number">14</span>, num_b4/num3_z/<span class="number">14</span>],</span><br><span class="line">     [num_h1/num4_z/<span class="number">14</span>, num_h2/num4_z/<span class="number">14</span>, num_h3/num4_z/<span class="number">14</span>, num_h4/num4_z/<span class="number">14</span>]</span><br><span class="line">     ]</span><br><span class="line">print(<span class="string">f'在阈值线为平均值下的<span class="subst">&#123;B&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">阶段<span class="number">1</span>的个数：<span class="number">2461</span>,阶段<span class="number">2</span>的个数：<span class="number">1076</span>, 阶段<span class="number">3</span>的个数：<span class="number">94</span>, 阶段<span class="number">4</span>的个数：<span class="number">15</span></span><br><span class="line">阶段<span class="number">1</span>的序列个数：<span class="number">197</span>,阶段<span class="number">2</span>的序列个数：<span class="number">18</span>, 阶段<span class="number">3</span>的序列个数：<span class="number">6</span>, 阶段<span class="number">4</span>的序列个数：<span class="number">1</span></span><br><span class="line">阶段<span class="number">1</span>中状态<span class="number">1</span>的个数  <span class="number">2418</span>，状态<span class="number">2</span>的个数<span class="number">340</span>，状态<span class="number">3</span>的个数<span class="number">0</span>, 状态<span class="number">4</span>的个数<span class="number">0</span></span><br><span class="line">阶段<span class="number">2</span>中状态<span class="number">1</span>的个数  <span class="number">43</span>，状态<span class="number">2</span>的个数  <span class="number">189</span>，状态<span class="number">3</span>的个数<span class="number">20</span>, 状态<span class="number">4</span>的个数<span class="number">0</span></span><br><span class="line">阶段<span class="number">3</span>中状态<span class="number">1</span>的个数  <span class="number">0</span>，状态<span class="number">2</span>的个数  <span class="number">9</span>，状态<span class="number">3</span>的个数<span class="number">74</span>, 状态<span class="number">4</span>的个数<span class="number">1</span></span><br><span class="line">阶段<span class="number">4</span>中状态<span class="number">1</span>的个数  <span class="number">0</span>，状态<span class="number">2</span>的个数  <span class="number">0</span>，状态<span class="number">3</span>的个数<span class="number">0</span>, 状态<span class="number">4</span>的个数<span class="number">14</span></span><br><span class="line">在阈值线为平均值下的[[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>, <span class="number">0.0</span>], [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>, <span class="number">0.0</span>], [<span class="number">0.0</span>, <span class="number">0.10714285714285714</span>, <span class="number">0.880952380952381</span>, <span class="number">0.011904761904761904</span>], [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]</span><br></pre></td></tr></table></figure><p>因此现在B2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B_2 = [[<span class="number">0.78535170413343</span>, <span class="number">0.21464829586656997</span>],</span><br><span class="line">       [<span class="number">0.8428571428571429</span>, <span class="number">0.15714285714285714</span>]]</span><br><span class="line">B_3 = [[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>],</span><br><span class="line">       [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>],</span><br><span class="line">       [<span class="number">0.0</span>, <span class="number">0.09183673469387756</span>, <span class="number">0.9081632653061223</span>]]</span><br><span class="line">B_4 = [[<span class="number">0.8767222625090645</span>, <span class="number">0.12327773749093547</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">       [<span class="number">0.17063492063492064</span>, <span class="number">0.75</span>, <span class="number">0.07936507936507937</span>, <span class="number">0.0</span>],</span><br><span class="line">       [<span class="number">0.0</span>, <span class="number">0.10714285714285714</span>, <span class="number">0.880952380952381</span>, <span class="number">0.011904761904761904</span>],</span><br><span class="line">       [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594262532884&di=531d0fbc2e24db968ffac8fbc73b3d42&imgtype=0&src=http%3A%2F%2Ft7.baidu.com%2Fit%2Fu%3D784355040%2C1080860592%26fm%3D193" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;状态为3是的B值设定&quot;&gt;&lt;a href=&quot;#状态为3是的B值设定&quot; class=&quot;headerlink&quot; title=&quot;状态为3是的B值设定&quot;&gt;&lt;/a&gt;状态为3是的B值设定&lt;/h1&gt;&lt;p&gt;划分为状态3# 状态1：小于平均值的# 状态2：小于标准差# 状态3：大于标
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HMM中的B值确定</title>
    <link href="https://esyyes.github.io/2020/07/08/HMM/HMM%E4%B8%AD%E7%9A%84B%E5%80%BC%E7%A1%AE%E5%AE%9A/"/>
    <id>https://esyyes.github.io/2020/07/08/HMM/HMM%E4%B8%AD%E7%9A%84B%E5%80%BC%E7%A1%AE%E5%AE%9A/</id>
    <published>2020-07-08T06:12:45.000Z</published>
    <updated>2020-07-08T06:12:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HMM中的B值确定"><a href="#HMM中的B值确定" class="headerlink" title="HMM中的B值确定"></a>HMM中的B值确定</h1><p>1．隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的状态的序列，再由各个状态随机生成一个观测而产生观测的序列的过程。</p><p>隐马尔可夫模型由初始状态概率向$\pi$、状态转移概率矩阵$A$和观测概率矩阵$B$决定。因此，隐马尔可夫模型可以写成$\lambda=(A, B, \pi)$。</p><p>隐马尔可夫模型是一个生成模型，表示状态序列和观测序列的联合分布，但是状态序列是隐藏的，不可观测的。</p><p>隐马尔可夫模型可以用于标注，这时状态对应着标记。标注问题是给定观测序列预测其对应的标记序列。</p><p>2．概率计算问题。给定模型$\lambda=(A, B, \pi)$和观测序列$O＝(o_1，o_2,…,o_T)$，计算在模型$\lambda$下观测序列$O$出现的概率$P(O|\lambda)$。前向-后向算法是通过递推地计算前向-后向概率可以高效地进行隐马尔可夫模型的概率计算。</p><p>3．学习问题。已知观测序列$O＝(o_1，o_2,…,o_T)$，估计模型$\lambda=(A, B, \pi)$参数，使得在该模型下观测序列概率$P(O|\lambda)$最大。即用极大似然估计的方法估计参数。Baum-Welch算法，也就是EM算法可以高效地对隐马尔可夫模型进行训练。它是一种非监督学习算法。</p><p>4．预测问题。已知模型$\lambda=(A, B, \pi)$和观测序列$O＝(o_1，o_2,…,o_T)$，求对给定观测序列条件概率$P(I|O)$最大的状态序列$I＝(i_1，i_2,…,i_T)$。维特比算法应用动态规划高效地求解最优路径，即概率最大的状态序列。</p><p>在本次实验中，HMM模型，主要确定了QVAOPI，而直接用逻辑回归模型，进行建模运算时，B值的状态概率会出现100这种情况，导致HMM的似然函数的概率不会改变</p><p>array([[846,   0,   0],<br>       [ 60,   0,   0],<br>       [ 27,   0,   0]], dtype=int64)</p><p>参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HiddenMarkov</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, Q, V, A, B, O, PI)</span>:</span>  <span class="comment"># 使用前向算法</span></span><br><span class="line">        N = len(Q)  <span class="comment">#可能存在的状态数量</span></span><br><span class="line">        M = len(O)  <span class="comment"># 观测序列的大小</span></span><br><span class="line">        alphas = np.zeros((N, M))  <span class="comment"># alpha值</span></span><br><span class="line">        T = M  <span class="comment"># 有几个时刻，有几个观测序列，就有几个时刻</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(T):  <span class="comment"># 遍历每一时刻，算出alpha值</span></span><br><span class="line">            indexOfO = V.index(O[t])  <span class="comment"># 找出序列对应的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">if</span> t == <span class="number">0</span>:  <span class="comment"># 计算初值</span></span><br><span class="line">                    alphas[i][t] = PI[t][i] * B[i][indexOfO]  <span class="comment"># P176（10.15）</span></span><br><span class="line">                    print(</span><br><span class="line">                        <span class="string">'alpha1(%d)=p%db%db(o1)=%f'</span> % (i, i, i, alphas[i][t]))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    alphas[i][t] = np.dot(</span><br><span class="line">                        [alpha[t - <span class="number">1</span>] <span class="keyword">for</span> alpha <span class="keyword">in</span> alphas],</span><br><span class="line">                        [a[i] <span class="keyword">for</span> a <span class="keyword">in</span> A]) * B[i][indexOfO]  <span class="comment"># 对应P176（10.16）</span></span><br><span class="line">                    print(<span class="string">'alpha%d(%d)=[sigma alpha%d(i)ai%d]b%d(o%d)=%f'</span> %</span><br><span class="line">                          (t, i, t - <span class="number">1</span>, i, i, t, alphas[i][t]))</span><br><span class="line">                    <span class="comment"># print(alphas)</span></span><br><span class="line">        P = np.sum([alpha[M - <span class="number">1</span>] <span class="keyword">for</span> alpha <span class="keyword">in</span> alphas])  <span class="comment"># P176(10.17)</span></span><br><span class="line">        <span class="comment"># alpha11 = pi[0][0] * B[0][0]    #代表a1(1)</span></span><br><span class="line">        <span class="comment"># alpha12 = pi[0][1] * B[1][0]    #代表a1(2)</span></span><br><span class="line">        <span class="comment"># alpha13 = pi[0][2] * B[2][0]    #代表a1(3)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self, Q, V, A, B, O, PI)</span>:</span>  <span class="comment"># 后向算法</span></span><br><span class="line">        N = len(Q)  <span class="comment"># 可能存在的状态数量</span></span><br><span class="line">        M = len(O)  <span class="comment"># 观测序列的大小</span></span><br><span class="line">        betas = np.ones((N, M))  <span class="comment"># beta</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            print(<span class="string">'beta%d(%d)=1'</span> % (M, i))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(M - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            indexOfO = V.index(O[t + <span class="number">1</span>])  <span class="comment"># 找出序列对应的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                betas[i][t] = np.dot(</span><br><span class="line">                    np.multiply(A[i], [b[indexOfO] <span class="keyword">for</span> b <span class="keyword">in</span> B]),</span><br><span class="line">                    [beta[t + <span class="number">1</span>] <span class="keyword">for</span> beta <span class="keyword">in</span> betas])</span><br><span class="line">                realT = t + <span class="number">1</span></span><br><span class="line">                realI = i + <span class="number">1</span></span><br><span class="line">                print(</span><br><span class="line">                    <span class="string">'beta%d(%d)=[sigma a%djbj(o%d)]beta%d(j)=('</span> %</span><br><span class="line">                    (realT, realI, realI, realT + <span class="number">1</span>, realT + <span class="number">1</span>),</span><br><span class="line">                    end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    print(</span><br><span class="line">                        <span class="string">"%.2f*%.2f*%.2f+"</span> % (A[i][j], B[j][indexOfO],</span><br><span class="line">                                             betas[j][t + <span class="number">1</span>]),</span><br><span class="line">                        end=<span class="string">''</span>)</span><br><span class="line">                print(<span class="string">"0)=%.3f"</span> % betas[i][t])</span><br><span class="line">        <span class="comment"># print(betas)</span></span><br><span class="line">        indexOfO = V.index(O[<span class="number">0</span>])</span><br><span class="line">        P = np.dot(</span><br><span class="line">            np.multiply(PI, [b[indexOfO] <span class="keyword">for</span> b <span class="keyword">in</span> B]),</span><br><span class="line">            [beta[<span class="number">0</span>] <span class="keyword">for</span> beta <span class="keyword">in</span> betas])</span><br><span class="line">        print(<span class="string">"P(O|lambda)="</span>, end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            print(</span><br><span class="line">                <span class="string">"%.1f*%.1f*%.5f+"</span> % (PI[<span class="number">0</span>][i], B[i][indexOfO], betas[i][<span class="number">0</span>]),</span><br><span class="line">                end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"0=%f"</span> % P)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">viterbi</span><span class="params">(self, Q, V, A, B, O, PI)</span>:</span></span><br><span class="line">        N = len(Q)  <span class="comment">#可能存在的状态数量</span></span><br><span class="line">        M = len(O)  <span class="comment"># 观测序列的大小</span></span><br><span class="line">        deltas = np.zeros((N, M))</span><br><span class="line">        psis = np.zeros((N, M))</span><br><span class="line">        I = np.zeros((<span class="number">1</span>, M))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(M):</span><br><span class="line">            realT = t + <span class="number">1</span></span><br><span class="line">            indexOfO = V.index(O[t])  <span class="comment"># 找出序列对应的索引</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                realI = i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">                    deltas[i][t] = PI[<span class="number">0</span>][i] * B[i][indexOfO]</span><br><span class="line">                    psis[i][t] = <span class="number">0</span></span><br><span class="line">                    print(<span class="string">'delta1(%d)=pi%d * b%d(o1)=%.2f * %.2f=%.2f'</span> %</span><br><span class="line">                          (realI, realI, realI, PI[<span class="number">0</span>][i], B[i][indexOfO],</span><br><span class="line">                           deltas[i][t]))</span><br><span class="line">                    print(<span class="string">'psis1(%d)=0'</span> % (realI))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    deltas[i][t] = np.max(</span><br><span class="line">                        np.multiply([delta[t - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas],</span><br><span class="line">                                    [a[i] <span class="keyword">for</span> a <span class="keyword">in</span> A])) * B[i][indexOfO]</span><br><span class="line">                    print(</span><br><span class="line">                        <span class="string">'delta%d(%d)=max[delta%d(j)aj%d]b%d(o%d)=%.2f*%.2f=%.5f'</span></span><br><span class="line">                        % (realT, realI, realT - <span class="number">1</span>, realI, realI, realT,</span><br><span class="line">                           np.max(</span><br><span class="line">                               np.multiply([delta[t - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas],</span><br><span class="line">                                           [a[i] <span class="keyword">for</span> a <span class="keyword">in</span> A])), B[i][indexOfO],</span><br><span class="line">                           deltas[i][t]))</span><br><span class="line">                    psis[i][t] = np.argmax(</span><br><span class="line">                        np.multiply(</span><br><span class="line">                            [delta[t - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas],</span><br><span class="line">                            [a[i]</span><br><span class="line">                             <span class="keyword">for</span> a <span class="keyword">in</span> A])) + <span class="number">1</span>  <span class="comment">#由于其返回的是索引，因此应+1才能和正常的下标值相符合。</span></span><br><span class="line">                    print(<span class="string">'psis%d(%d)=argmax[delta%d(j)aj%d]=%d'</span> %</span><br><span class="line">                          (realT, realI, realT - <span class="number">1</span>, realI, psis[i][t]))</span><br><span class="line">        print(deltas)</span><br><span class="line">        print(psis)</span><br><span class="line">        I[<span class="number">0</span>][M - <span class="number">1</span>] = np.argmax([delta[M - <span class="number">1</span>] <span class="keyword">for</span> delta <span class="keyword">in</span> deltas</span><br><span class="line">                                 ]) + <span class="number">1</span>  <span class="comment">#由于其返回的是索引，因此应+1才能和正常的下标值相符合。</span></span><br><span class="line">        print(<span class="string">'i%d=argmax[deltaT(i)]=%d'</span> % (M, I[<span class="number">0</span>][M - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(M - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            I[<span class="number">0</span>][t] = psis[int(I[<span class="number">0</span>][t + <span class="number">1</span>]) - <span class="number">1</span>][t + <span class="number">1</span>]</span><br><span class="line">            print(<span class="string">'i%d=psis%d(i%d)=%d'</span> % (t + <span class="number">1</span>, t + <span class="number">2</span>, t + <span class="number">2</span>, I[<span class="number">0</span>][t]))</span><br><span class="line">        print(<span class="string">"状态序列I："</span>, I)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Q = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">V = [<span class="string">'红'</span>, <span class="string">'白'</span>]</span><br><span class="line">A = [[<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.3</span>], [<span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">0.2</span>], [<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.5</span>]]</span><br><span class="line">B = [[<span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.4</span>, <span class="number">0.6</span>], [<span class="number">0.7</span>, <span class="number">0.3</span>]]</span><br><span class="line">O = [<span class="string">'红'</span>, <span class="string">'白'</span>, <span class="string">'红'</span>, <span class="string">'红'</span>, <span class="string">'白'</span>, <span class="string">'红'</span>, <span class="string">'白'</span>, <span class="string">'白'</span>]</span><br><span class="line">PI = [[<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.5</span>]]</span><br><span class="line">HMM = HiddenMarkov()</span><br><span class="line"><span class="comment"># HMM.forward(Q, V, A, B, O, PI)</span></span><br><span class="line"><span class="comment"># HMM.backward(Q, V, A, B, O, PI)</span></span><br><span class="line">HMM.viterbi(Q, V, A, B, O, PI)</span><br><span class="line">HMM.forward(Q, V, A, B, O, PI)</span><br><span class="line">HMM.backward(Q, V, A, B, O, PI)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/7/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">'data1'</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">list_data = np.array(data).tolist()</span><br><span class="line">X = pd.get_dummies(data.iloc[<span class="number">0</span>:len(data), <span class="number">3</span>:<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">list_y1 = [int(list_data[i][<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">y1_mean = np.array(list_y1).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值作为状态的划分</span></span><br><span class="line">Y_X = [<span class="number">0</span> <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; y1_mean <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列阶段的划分</span></span><br><span class="line"><span class="comment"># 将14个时期取平均值</span></span><br><span class="line">list_z_y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * i &lt;= j &lt; <span class="number">14</span> * (i + <span class="number">1</span>):</span><br><span class="line">            y1.append(list_data[j][<span class="number">2</span>])</span><br><span class="line">    list_z_y.append(np.array(y1).mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 14个值的平均值小于1即为0</span></span><br><span class="line"><span class="comment"># 还是用均值作为状态的划分</span></span><br><span class="line">Y_Z = [<span class="number">0</span> <span class="keyword">if</span> list_z_y[i] &lt; y1_mean <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y))]</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'总数目：<span class="subst">&#123;len(Y_Z)&#125;</span>, 阶段0的数目<span class="subst">&#123;len(Y_Z) - num&#125;</span>, 阶段1的数目<span class="subst">&#123;num&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">num_1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    <span class="keyword">if</span> Y_X[i] == <span class="number">1</span>:</span><br><span class="line">        num_1 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'序列中出现1阶段的次数<span class="subst">&#123;num_1&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(int(len(data)/<span class="number">14</span>)):</span><br><span class="line">    x1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">14</span> * j &lt;= i &lt; <span class="number">14</span> * (j + <span class="number">1</span>):</span><br><span class="line">            x1.append(int(list_data[i][<span class="number">2</span>]))</span><br><span class="line">    Y.append(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算1状态时，出现1的概率</span></span><br><span class="line">num_2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(Y_Z)):</span><br><span class="line">    <span class="keyword">if</span> Y_Z[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">            <span class="keyword">if</span> Y[i][j] == <span class="number">1</span>:</span><br><span class="line">                num_2 += <span class="number">1</span></span><br><span class="line">print(<span class="string">f'状态1中出现1的次数<span class="subst">&#123;num_2&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'阶段1中出现1的概率<span class="subst">&#123;num_2/(num*<span class="number">14</span>)&#125;</span>'</span>)</span><br><span class="line">B = [[<span class="number">1</span> - (num_1 - num_2) / ((len(Y_Z) - num) * <span class="number">14</span>), (num_1 - num_2) / ((len(Y_Z) - num) * <span class="number">14</span>)],</span><br><span class="line">     [<span class="number">1</span> - num_2 / (num * <span class="number">14</span>), num_2 / (num * <span class="number">14</span>)]]</span><br><span class="line">print(<span class="string">f'在阈值线为平均值下的'</span></span><br><span class="line">      <span class="string">f'<span class="subst">&#123;B&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>利用平均值作为阈值时的B值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.9118926758520667</span>, <span class="number">0.08810732414793329</span>], </span><br><span class="line"></span><br><span class="line">[<span class="number">0.8428571428571429</span>, <span class="number">0.15714285714285714</span>]]</span><br></pre></td></tr></table></figure><p>利用1作为阈值时的B值为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Y_X = [<span class="number">0</span> <span class="keyword">if</span> list_data[i][<span class="number">2</span>] &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data))]</span><br><span class="line">Y_Z = [<span class="number">0</span> <span class="keyword">if</span> list_z_y[i] &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_z_y))]</span><br><span class="line"></span><br><span class="line">[[<span class="number">0.78535170413343</span>, <span class="number">0.21464829586656997</span>], </span><br><span class="line">[<span class="number">0.8428571428571429</span>, <span class="number">0.15714285</span></span><br><span class="line"> <span class="number">714285714</span>]]</span><br></pre></td></tr></table></figure><p>比较下最大似然值</p><p>均值下的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始概率矩阵[[<span class="number">0.9041184041184042</span>, <span class="number">0.09588159588159584</span>]]</span><br><span class="line">状态转移概率矩阵：[[<span class="number">0.9964114832535885</span>, <span class="number">0.0035885167464114833</span>], [<span class="number">0.26804123711340205</span>, <span class="number">0.7319587628865979</span>]]</span><br><span class="line">均值下的似然估计值为：    <span class="number">-955.2942841591449</span></span><br><span class="line">分类为<span class="number">2</span>均值下的BIC为：<span class="number">-1028.7801594684208</span></span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">1.29445779e-05</span>  <span class="number">5.27657348e-06</span> <span class="number">-2.44868582e-02</span>  <span class="number">3.68198497e+00</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[<span class="number">-4.52277323</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[ <span class="number">0.00304877</span> <span class="number">-0.00165371</span>]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[<span class="number">-2.00454762</span>]</span><br></pre></td></tr></table></figure><p>1值下的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始概率矩阵[[<span class="number">0.7918275418275418</span>, <span class="number">0.20817245817245822</span>]]</span><br><span class="line">状态转移概率矩阵：[[<span class="number">0.984869325997249</span>, <span class="number">0.015130674002751032</span>], [<span class="number">0.4029126213592233</span>, <span class="number">0.5970873786407767</span>]]</span><br><span class="line"><span class="number">1</span>值下的似然估计值为：    <span class="number">-1589.5001457084938</span></span><br><span class="line">分类为<span class="number">2</span>阈值为<span class="number">1</span>下的BIC为：<span class="number">-1662.9860210177699</span></span><br><span class="line">--------------------</span><br><span class="line">参数估计</span><br><span class="line">状态转移概率矩阵的系数为：[[ <span class="number">3.54342024e-05</span>  <span class="number">6.64259922e-05</span> <span class="number">-4.34313674e-03</span>  <span class="number">3.76444931e+00</span>]]</span><br><span class="line">状态转移概率矩阵的偏差为：[<span class="number">-2.26616719</span>]</span><br><span class="line">观察状态概率转移矩阵的系数为：[[<span class="number">-0.02040833</span> <span class="number">-0.00606398</span>]]</span><br><span class="line">观察状态概率转移矩阵的偏差为：[<span class="number">-1.81251543</span>]</span><br></pre></td></tr></table></figure><p>主要还是根据阈值线，来进行判定，BIC这些值的大小</p><p><img src="http://i0.hdslb.com/bfs/article/72162a4abb1e6b985db79d35a2c2d4b9caaf6a3a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HMM中的B值确定&quot;&gt;&lt;a href=&quot;#HMM中的B值确定&quot; class=&quot;headerlink&quot; title=&quot;HMM中的B值确定&quot;&gt;&lt;/a&gt;HMM中的B值确定&lt;/h1&gt;&lt;p&gt;1．隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HMM模型的学习</title>
    <link href="https://esyyes.github.io/2020/07/04/HMM/HMM%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2020/07/04/HMM/HMM%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-04T06:33:33.000Z</published>
    <updated>2020-07-04T06:33:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HMM模型"><a href="#HMM模型" class="headerlink" title="HMM模型"></a>HMM模型</h1><h2 id="马尔科夫模型"><a href="#马尔科夫模型" class="headerlink" title="马尔科夫模型"></a>马尔科夫模型</h2><p> 马尔可夫模型（Markov Model）是一种统计模型，广泛应用在语音识别，词性自动标注，音字转换，概率文法等各个自然语言处理等应用领域。经过长期发展，尤其是在语音识别中的成功应用，使它成为一种通用的统计工具。 </p><p> <a href="https://baike.baidu.com/item/马尔可夫模型/4017874?fromtitle=马尔科夫模型&fromid=11231643&fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/4017874?fromtitle=%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8B&amp;fromid=11231643&amp;fr=aladdin</a> </p><p><img src="https://bkimg.cdn.bcebos.com/pic/7acb0a46f21fbe090f93240c64600c338644addd?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2U4MA==,xp_5,yp_5" alt=""></p><p> 在给定当前只是或信息的情况下，过去（即当前以前的历史状态），对于预测将来（即当前以后的未来状态）是无关的 </p><p> 每个状态的转移只依赖与之前的n个状态，这个过程被称为1个n阶的模型，其中n是影响转移状态的数目。最简单的马尔科夫过程是一阶过程，用数学表达式表示就是下面的形式： </p><h2 id="HMM模型-1"><a href="#HMM模型-1" class="headerlink" title="HMM模型"></a>HMM模型</h2><p> <strong>隐马尔可夫模型</strong>（Hidden Markov Model，HMM）是统计模型，它用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数。然后利用这些参数来作进一步的分析，例如模式识别。 </p><p> <a href="https://www.cnblogs.com/fulcra/p/11065474.html" target="_blank" rel="noopener">https://www.cnblogs.com/fulcra/p/11065474.html</a> </p><p> 假设我手里有三个不同的骰子。第一个骰子是我们平常见的骰子（称这个骰子为D6），6个面，每个面（1，2，3，4，5，6）出现的概率是1/6。第二个骰子是个四面体（称这个骰子为D4），每个面（1，2，3，4）出现的概率是1/4。第三个骰子有八个面（称这个骰子为D8），每个面（1，2，3，4，5，6，7，8）出现的概率是1/8。 </p><p> <a href="https://www.bilibili.com/video/BV1DK411W7jJ" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1DK411W7jJ</a> </p><p> <img src="https://images0.cnblogs.com/blog/133059/201507/161450315321886.png" alt="image"></p><p> 假设我们开始掷骰子，我们先从三个骰子里挑一个，挑到每一个骰子的概率都是1/3。然后我们掷骰子，得到一个数字，1，2，3，4，5，6，7，8中的一个。不停的重复上述过程，我们会得到一串数字，每个数字都是1，2，3，4，5，6，7，8中的一个。例如我们可能得到这么一串数字（掷骰子10次）：<strong>1 6 3 5 2 7 3 5 2 4</strong></p><p><strong>这串数字叫做可见状态链。</strong>但是在隐马尔可夫模型中，我们不仅仅有这么一串可见状态链，还有一串隐含状态链。在这个例子里，这串隐含状态链就是你用的骰子的序列。比如，隐含状态链有可能是：D6 D8 D8 D6 D4 D8 D6 D6 D4 D8</p><p>一般来说，HMM中说到的马尔可夫链其实是指隐含状态链，因为隐含状态（骰子）之间存在转换概率（transition probability）。在我们这个例子里，D6的下一个状态是D4，D6，D8的概率都是1/3。D4，D8的下一个状态是D4，D6，D8的转换概率也都一样是1/3。这样设定是为了最开始容易说清楚，但是我们其实是可以随意设定转换概率的。比如，我们可以这样定义，D6后面不能接D4，D6后面是D6的概率是0.9，是D8的概率是0.1。这样就是一个新的HMM。</p><p>同样的，尽管可见状态之间没有转换概率，但是隐含状态和可见状态之间有一个概率叫做输出概率（emission probability）。就我们的例子来说，六面骰（D6）产生1的输出概率是1/6。产生2，3，4，5，6的概率也都是1/6。我们同样可以对输出概率进行其他定义。比如，我有一个被赌场动过手脚的六面骰子，掷出来是1的概率更大，是1/2，掷出来是2，3，4，5，6的概率是1/10。</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593864632072.png" alt="1593864632072"></p><p>回到正题，和HMM模型相关的算法主要分为三类，分别解决三种问题： </p><p> <strong>1）知道骰子有几种（隐含状态数量），每种骰子是什么（转换概率），根据掷骰子掷出的结果（可见状态链），我想知道每次掷出来的都是哪种骰子（隐含状态链）。</strong> </p><p> 这个问题呢，在语音识别领域呢，叫做<strong>解码问题</strong>。这个问题其实有两种解法，会给出两个不同的答案。每个答案都对，只不过这些答案的意义不一样。第一种解法求<strong>最大似然状态路径</strong>，说通俗点呢，就是我求一串骰子序列，这串骰子序列产生观测结果的概率最大。第二种解法呢，就不是求一组骰子序列了，而是求每次掷出的骰子分别是某种骰子的概率。比如说我看到结果后，我可以求得第一次掷骰子是D4的概率是0.5，D6的概率是0.3，D8的概率是0.2.第一种解法我会在下面说到，但是第二种解法我就不写在这里了，如果大家有兴趣，我们另开一个问题继续写吧。</p><p><strong>2）还是知道骰子有几种**</strong></p><p>（隐含状态数量），每种骰子是什么（<strong>转换概率</strong>），根据掷骰子掷出的结果（可见状态链），我想知道掷出这个结果的概率。**<br>   看似这个问题意义不大，因为你掷出来的结果很多时候都对应了一个比较大的概率。问这个问题的目的呢，其实是检测观察到的结果和已知的模型是否吻合。如果很多次结果都对应了比较小的概率，那么就说明我们已知的模型很有可能是错的，有人偷偷把我们的骰子給换了。</p><p><strong>3）知道骰子有几种**</strong></p><p>（隐含状态数量），不知道每种骰子是什么（<strong>转换概率</strong>），观测到很多次掷骰子的结果（可见状态链），我想反推出每种骰子是什么（转换概率）。**<br>   这个问题很重要，因为这是最常见的情况。很多时候我们只有<strong>可见结果，不知道HMM模型里的参数，我们需要从可见结果估计出这些参数</strong>，这是建模的一个必要步骤。</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865330505.png" alt="1593865330505"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865385128.png" alt="1593865350351"></p><h2 id="隐马尔科夫模型"><a href="#隐马尔科夫模型" class="headerlink" title="隐马尔科夫模型"></a>隐马尔科夫模型</h2><p>总结就是一个<strong>学习问题</strong>，</p><p>然后判断时有监督学习还是无监督学习</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865770153.png" alt="1593865770153"></p><p><strong>有监督学习</strong>：观测序列和状态序列都要有： 极大似然法（pi, A, B）</p><p>无监督学习：观测序列,em算法，</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593865922973.png" alt="1593865922973"></p><p>马尔科夫模型是一种具有代表性的一阶概率统计模型。隐马尔科夫模型<br>强调了不确定性和潜在性，正是由于这种性质，满足现实生活中诸多问题的<br>基本要求，因此研究人员经常用该模型进行实际状态与行为之间问题的抽象<br>研究与概况。隐马尔科夫模型对于潜在和随机的真实问题有着高度的拟合性，<br>也存在着诸多的优势。隐马尔科夫模型是一个双重随机概率模型，该该型的<br>一般结构是 </p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C1593866078621.png" alt="1593866078621"></p><h3 id="隐马尔科夫模型的三个基本问题"><a href="#隐马尔科夫模型的三个基本问题" class="headerlink" title="隐马尔科夫模型的三个基本问题"></a>隐马尔科夫模型的三个基本问题</h3><h4 id="（1）评估问题"><a href="#（1）评估问题" class="headerlink" title="（1）评估问题"></a>（1）评估问题</h4><p>隐马尔科夫模型的评估问题是，已知一个隐藏状态序列对应的观察值序<br>列 O=O1O2…OT，同时已知确定了基本组成矩阵的模型 λ(π，Q，A)的条件下，<br>输入一组待实现的观察值样本序列，计算得到该模型条件下生成该样本序列<br>的概率，即 P（O/λ） 。在隐马尔科夫模型的评估问题中，计算得到已知模型<br>组成部分下的条件概率的算法被称为前向算法。评估问题的目的是在于根据<br>模型产生待实现的观察值序列的大小，如果产生该序列的概率越大，则说明<br>模型解决该样本序列作为实际问题的能力就越强，进而判断已知模型对待解<br>决问题的适用性。  （2）解码问题 </p><p>隐马尔科夫模型的评估问题是，已知一个隐藏状态序列对应的观察值序<br>列 O=O1O2…OT，同时已知确定了基本组成矩阵的模型 λ(π，Q，A)的条件下，<br>利用算法进行计算，能够快速有效的选择一定程度下的最好的状态序列<br>Q=Q1Q2。 。 。QT，生成这一隐藏状态序列的概率值最大，能够很好的满足对观<br>察值序列的解释。隐马尔科夫模型的评估问题使用的算法为维特比算法，解<br>码问题的目的是确定最适宜的隐藏状态量的序列，这种最适合并没有明确的<br>定义和规范，根据具体的现实研究问题进行具体的界定。 </p><h4 id="（3）学习问题"><a href="#（3）学习问题" class="headerlink" title="（3）学习问题"></a>（3）学习问题</h4><p>隐马尔科夫模型的学习问题是实际问题中最常见的问题类型。在隐马尔<br>科夫模型的学习问题中，仅仅能够已知一组输出的模型状态观察值的序列<br>O=O1O2…OT，对隐马尔科夫模型 λ(π，Q，A)中的基本组成部分并不能直接<br>确定，根据已有的观察值样本数据，对模型进行反复的训练和评价，调节模<br>型 λ(π，Q，A)中的三个基本部分的参数，使得输出该观察值序列的概率值<br>最大，即通过学习训练过程使得该模型具备最优的拟合程度。隐马尔科夫模<br>型的学习问题中，主要是通过<strong>前向后向算法（Baum-Welch 算法）</strong>来进行训<br>练和学习的；在模型训练学习中，最常见的是采用<strong>贝叶斯分析方法和最大似</strong><br><strong>然估计方法</strong>，对模型中的参数进行评估和优化，保证模型至少达到局部最优。</p><p>在实际问题的研究中，通常都只能<strong>获取到输出序列值</strong>，因此<strong>前向-后向</strong><br><strong>算法实现隐马尔科夫模型的训练学习问题</strong>具有广泛应用。</p><p>2、模型学习问题：已知观测序列，估计模型中的参数，使得在该模型下观测序列概率最大，即用极大似然估计的方法估计参数。</p><p>Baum-Welch算法解决的是一个模型训练问题，即参数估计，是一种无监督的训练方法，主要通过EM迭代实现；即只有观测序列，无状态序列时训练模型。</p><p>极大似然估计：观测序列和相应的状态序列都存在的监督学习算法，用来估计参数。</p><p>主要用到这两个，然后现在就是学习EM迭代，和用最大似然估计来确定参数！</p><p>第一步是确定，状态数目，或者是生产转移矩阵。</p><p><img src="http://pic.rmb.bdstatic.com/b86ca7466d43fae63a58735e15aa54c53717.jpeg@c_1,w_1280,h_1024,x_0,y_0" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HMM模型&quot;&gt;&lt;a href=&quot;#HMM模型&quot; class=&quot;headerlink&quot; title=&quot;HMM模型&quot;&gt;&lt;/a&gt;HMM模型&lt;/h1&gt;&lt;h2 id=&quot;马尔科夫模型&quot;&gt;&lt;a href=&quot;#马尔科夫模型&quot; class=&quot;headerlink&quot; title=&quot;马
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>交叉验证</title>
    <link href="https://esyyes.github.io/2020/07/02/sleep%20apnea%20and%20sleep%20stage/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/"/>
    <id>https://esyyes.github.io/2020/07/02/sleep%20apnea%20and%20sleep%20stage/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/</id>
    <published>2020-07-02T00:49:24.000Z</published>
    <updated>2020-07-02T00:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h1><h2 id="交叉验证：评估估算器的表现"><a href="#交叉验证：评估估算器的表现" class="headerlink" title="交叉验证：评估估算器的表现"></a>交叉验证：评估估算器的表现</h2><p>学习预测函数的参数，并在相同数据集上进行测试是一种错误的做法: 一个仅给出测试用例标签的模型将会获得极高的分数，但对于尚未出现过的数据它则无法预测出任何有用的信息。 这种情况称为 overfitting（过拟合）. 为了避免这种情况，在进行（监督）机器学习实验时，通常取出部分可利用数据作为 test set（测试数据集）</p><h2 id="置信区间"><a href="#置信区间" class="headerlink" title="置信区间"></a>置信区间</h2><p> <a href="https://baike.baidu.com/item/置信区间/7442583?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4/7442583?fr=aladdin</a> </p><p> 置信区间是指由<a href="https://baike.baidu.com/item/样本统计量/7378689" target="_blank" rel="noopener">样本统计量</a>所构造的总体参数的估计区间。在统计学中，一个<a href="https://baike.baidu.com/item/概率/828845" target="_blank" rel="noopener">概率</a>样本的置信区间（Confidence interval）是对这个样本的某个总体参数的<a href="https://baike.baidu.com/item/区间估计/6611490" target="_blank" rel="noopener">区间估计</a>。 </p><p> 置信区间与置信水平、样本量等因素均有关系，其中<a href="https://baike.baidu.com/item/样本量" target="_blank" rel="noopener">样本量</a>对置信区间的影响为：在<a href="https://baike.baidu.com/item/置信水平" target="_blank" rel="noopener">置信水平</a>固定的情况下，样本量越多，置信区间越窄。其次，在<a href="https://baike.baidu.com/item/样本量" target="_blank" rel="noopener">样本量</a>相同的情况下，置信水平越高，置信区间越宽 </p><p>95%置信区间（Confidence Interval,CI）：当给出某个估计值的95%置信区间为【a,b】时，可以理解为我们有95%的信心（Confidence）可以说样本的平均值介于a到b之间，而发生错误的概率为5%。 </p><p> 有时也会说90%，99%的置信区间，具体含义可参考95%置信区间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Accuracy: %0.2f (+/- %0.2f)"</span> % (scores.mean(), scores.std() * <span class="number">2</span>))</span><br><span class="line">Accuracy: <span class="number">0.98</span> (+/- <span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><h2 id="交叉验证-1"><a href="#交叉验证-1" class="headerlink" title="交叉验证"></a>交叉验证</h2><p>用来验证分类器的性能一种统计分析方法，基本思想是把在某种意义下将原始数据(data set)进行分组，一部分做为训练集(training set)，另一部分做为验证集(validation set)，首先用训练集对分类器进行训练，在利用验证集来测试训练得到的模型(model)，以此来做为评价分类器的性能指标。</p><h3 id="k折交叉验证-k-fold-cross-validation"><a href="#k折交叉验证-k-fold-cross-validation" class="headerlink" title="k折交叉验证(k-fold cross validation)"></a>k折交叉验证(k-fold cross validation)</h3><p>将数据集无替换的随机分为k份，k-1份用来训练模型，剩下一份用来模型性能评估。重复k次，得到k个模型和性能评估结果。得到k个性能评估后，取平均求出最终性能评估。即：<br>第一步：不重复抽样将原始数据随机分为k份。<br>第二步：每一次挑选其中 1 份作为测试集，剩余k-1份作为训练集用于模型训练。<br>第三步：重复第二步k次，每个子集都有一次作为测试集，其余子集作为训练集。在每个训练集上训练后得到一个模型，用这个模型在相应测试集上测试，计算并保存模型的评估指标。<br>第四步：计算k组测试结果的平均值作为模型精度的估计，并作为当前k折交叉验证下模型的性能指标。</p><p>优点：分组后取平均减少方差，使得模型对数据划分不敏感。<br>缺点：k取值需要尝试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/30 0030</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> acr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feature = pd.read_excel(<span class="string">'D:/zccode/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">note = pd.read_excel(<span class="string">'D:/zccode/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定固定的特征值</span></span><br><span class="line">feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % <span class="number">2</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:<span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">std_data = data_pre(data[df.keys()])</span><br><span class="line">label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), <span class="number">2</span>:<span class="number">3</span>])</span><br><span class="line">scores = cross_val_score(RandomForestClassifier(), std_data, label, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;scores&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">"Accuracy: %0.2f (+/- %0.2f)"</span> % (scores.mean(), scores.std() * <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0.88</span>       <span class="number">0.92</span>       <span class="number">0.86956522</span> <span class="number">0.91304348</span> <span class="number">0.95652174</span> <span class="number">1.</span></span><br><span class="line"> <span class="number">1.</span>         <span class="number">0.86363636</span> <span class="number">1.</span>         <span class="number">0.59090909</span>]</span><br><span class="line">Accuracy: <span class="number">0.90</span> (+/- <span class="number">0.23</span>)</span><br></pre></td></tr></table></figure><p>交叉验证K值的确定，找一个样本很平均的，然后再去利用样本来进行判定</p><h2 id="交叉验证的作用："><a href="#交叉验证的作用：" class="headerlink" title="交叉验证的作用："></a>交叉验证的作用：</h2><h3 id="评估模型的稳定性及调参"><a href="#评估模型的稳定性及调参" class="headerlink" title="评估模型的稳定性及调参"></a>评估模型的稳定性及调参</h3><p>比如5折交叉验证，在参数确定了的情况下，我们可以将数据弄成五份，每一份中80%训练，20%作为测试集，这样可以训练五个模型，这五个模型除了训练集测试集不同外，其他的都相同，这样我们可以得到五个模型的评估指标比如<strong>auc</strong>,计算五个模型得到的<strong>auc的方差</strong>，如果方差小说明模型的泛化性比较好，模型比较稳定是个好模型，否则说明模型泛化性不好。<br>xgboost中cv函数返回的值包括两个，一个是单模型的评价指标（比如auc），另外一个是模型的方差。</p><p>参数不确定的情况下，我们通过<strong>模型的准确性和稳定性</strong>来选择最合适的参数。<br> <a href="https://blog.csdn.net/weixin_41060109/article/details/80878325?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41060109/article/details/80878325?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.nonecase</a> </p><p> 在实际训练中，模型通常对训练数据好，但是对训练数据之外的数据拟合程度差。用于<strong>评价模型的泛化能力</strong>，从而进行<strong>模型选择</strong>。 </p><h2 id="交叉验证的初步目标"><a href="#交叉验证的初步目标" class="headerlink" title="交叉验证的初步目标"></a>交叉验证的初步目标</h2><p>初步选择大部分的模型，然后通过交叉验证，例如：10次10折，先初步去筛选得到性能效果好的模型，然后再对这几个好的模型，进行网格搜索的超参数优化</p><p>交叉验证得到一个准确率，但是不能用准确率这个指标去直接判定分类器的性能</p><p>最后用混淆矩阵、精度、召回率等去评估分类的效果和性能</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593683305451&di=084be09798a996ba20acd53f72f8e663&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F1e4a2abbb0ec1309578de3741b1c7619c7a34c4f2834b-zmvQca_fw658" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;交叉验证&quot;&gt;&lt;a href=&quot;#交叉验证&quot; class=&quot;headerlink&quot; title=&quot;交叉验证&quot;&gt;&lt;/a&gt;交叉验证&lt;/h1&gt;&lt;h2 id=&quot;交叉验证：评估估算器的表现&quot;&gt;&lt;a href=&quot;#交叉验证：评估估算器的表现&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>中期答辩题目</title>
    <link href="https://esyyes.github.io/2020/06/29/sleep%20apnea%20and%20sleep%20stage/%E4%B8%AD%E6%9C%9F%E7%AD%94%E8%BE%A9%E9%A2%98%E7%9B%AE/"/>
    <id>https://esyyes.github.io/2020/06/29/sleep%20apnea%20and%20sleep%20stage/%E4%B8%AD%E6%9C%9F%E7%AD%94%E8%BE%A9%E9%A2%98%E7%9B%AE/</id>
    <published>2020-06-29T02:58:18.000Z</published>
    <updated>2020-06-29T02:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中期答辩题目"><a href="#中期答辩题目" class="headerlink" title="中期答辩题目"></a>中期答辩题目</h1><p>考虑睡眠分期、睡眠质量、睡眠呼吸暂停、心电信号、特征选择</p><p>​         睡眠相关的理论知识，包括睡眠周期性，睡眠分期方法以及睡眠呼吸暂停等。  </p><p>参考题目：基于PVDF的睡眠监测系统设计与实现</p><p>直接将睡眠这几个统计到睡眠</p><p>基于心电信号的特征选择和睡眠监测方法研究</p><p>基于心电信号的睡眠分期和阻塞性呼吸暂停相关性研究</p><p><strong>基于心电信号的睡眠分期和呼吸暂停检测算法的研究</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;中期答辩题目&quot;&gt;&lt;a href=&quot;#中期答辩题目&quot; class=&quot;headerlink&quot; title=&quot;中期答辩题目&quot;&gt;&lt;/a&gt;中期答辩题目&lt;/h1&gt;&lt;p&gt;考虑睡眠分期、睡眠质量、睡眠呼吸暂停、心电信号、特征选择&lt;/p&gt;
&lt;p&gt;​         睡眠相关的理论知
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>查看分类器对应的数据系列</title>
    <link href="https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E6%9F%A5%E7%9C%8B%E5%88%86%E7%B1%BB%E5%99%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B3%BB%E5%88%97/"/>
    <id>https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E6%9F%A5%E7%9C%8B%E5%88%86%E7%B1%BB%E5%99%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B3%BB%E5%88%97/</id>
    <published>2020-06-24T13:02:27.000Z</published>
    <updated>2020-06-24T13:02:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>不同特征数之间的分类模型比较</title>
    <link href="https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E4%B8%8D%E5%90%8C%E7%89%B9%E5%BE%81%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83/"/>
    <id>https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E4%B8%8D%E5%90%8C%E7%89%B9%E5%BE%81%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83/</id>
    <published>2020-06-24T02:57:17.000Z</published>
    <updated>2020-06-24T02:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不同特征数之间的分类模型比较"><a href="#不同特征数之间的分类模型比较" class="headerlink" title="不同特征数之间的分类模型比较"></a>不同特征数之间的分类模型比较</h1><p>首先确定特征的个数，确定index和特征数之间的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定固定的特征值</span></span><br><span class="line">feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % <span class="number">2</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="number">5</span>NN20    <span class="number">5</span>pNN20    <span class="number">5</span>pNN50     <span class="number">5</span>NN50</span><br><span class="line"><span class="number">0</span>  <span class="number">0.023794</span>  <span class="number">0.023346</span>  <span class="number">0.022757</span>  <span class="number">0.022194</span></span><br></pre></td></tr></table></figure><p>根据设定的index,还是取的是左闭右开，因此对于下面的特征，index 应该为特征数加1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">最大准确率时对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%特征数为<span class="number">15</span></span><br><span class="line">准确率降低<span class="number">1</span>%后对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">78.85</span>%比较筛选的准确率为<span class="number">78.86</span>%特征数为<span class="number">9</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">85.54</span>%比较筛选的准确率为<span class="number">85.66</span>%特征数为<span class="number">8</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">88.15</span>%比较筛选的准确率为<span class="number">88.22</span>%特征数为<span class="number">7</span></span><br></pre></td></tr></table></figure><p>重新跑下结果；</p><p>因此对于最大准确率时，基于特征数的分类模型就该为下面程序</p><h2 id="最大准确率时特征对应的分类结果"><a href="#最大准确率时特征对应的分类结果" class="headerlink" title="最大准确率时特征对应的分类结果"></a>最大准确率时特征对应的分类结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/23 0023</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sleep_class <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        index = <span class="number">24</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">        index = <span class="number">24</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        index = <span class="number">16</span></span><br><span class="line">        class_feature(k, index)</span><br></pre></td></tr></table></figure><h3 id="sleep-class-中的函数"><a href="#sleep-class-中的函数" class="headerlink" title="sleep class 中的函数"></a>sleep class 中的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/23 0023</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> classifiers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_feature</span><span class="params">(k, index)</span>:</span></span><br><span class="line">    class_scores = []</span><br><span class="line">    kappa_scores = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">        feature = pd.read_excel(<span class="string">'D:/zccode/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        note = pd.read_excel(<span class="string">'D:/zccode/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">        feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % (k+<span class="number">1</span>) + <span class="string">'.xlsx'</span>)</span><br><span class="line">        df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:index])</span><br><span class="line"></span><br><span class="line">        std_data = data_pre(data[df.keys()])</span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), k:k+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        class_score = []</span><br><span class="line">        kappa_score = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(std_data, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            score = run_classifiers(X_train, X_test, y_train, y_test)</span><br><span class="line">            class_score.append(score[<span class="number">0</span>])</span><br><span class="line">            kappa_score.append(score[<span class="number">1</span>])</span><br><span class="line">        class_scores.append([(np.array([class_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        kappa_scores.append([(np.array([kappa_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        print(<span class="string">f'已经运行<span class="subst">&#123;i&#125;</span>次'</span>)</span><br><span class="line"></span><br><span class="line">    class_total = pd.DataFrame(class_scores)</span><br><span class="line">    kappa_total = pd.DataFrame(kappa_scores)</span><br><span class="line"></span><br><span class="line">    class_total.to_excel(<span class="string">'feature_section_class'</span> + <span class="string">'%d'</span> % k + <span class="string">".xlsx"</span>)</span><br><span class="line">    kappa_total.to_excel(<span class="string">'feature_section_kappa'</span> + <span class="string">'%d'</span> % k + <span class="string">".xlsx"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'运行一次'</span></span><br></pre></td></tr></table></figure><h2 id="特征降维后的分类结果"><a href="#特征降维后的分类结果" class="headerlink" title="特征降维后的分类结果"></a>特征降维后的分类结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @time     : 2020/6/23 0023</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sleep_class <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        index = <span class="number">10</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">        index = <span class="number">9</span></span><br><span class="line">        class_feature(k, index)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        index = <span class="number">8</span></span><br><span class="line">        class_feature(k, index)</span><br></pre></td></tr></table></figure><p>保存名字为 <strong>features_section_class</strong></p><p>然后将其取平均值，并绘制柱状图</p><h2 id="分类结果"><a href="#分类结果" class="headerlink" title="分类结果"></a>分类结果</h2><p>文件保存为：</p><p>E:\feature section</p><p> <strong>features_section_class</strong>是降维后</p><p> <strong>feature_section_class</strong> 是最开始的数据分类结果</p><p>经过查看，在即使在最高分期准确率的结果下，都会出现数据一部分特别好一部分都很差的情况</p><p>暂时只进行数据的平均分类准确率，然后筛选出最优的分类模型，比较每个模型中最优的结果</p><p>然后再去考虑单独的人，为什么会差距这么大，是什么因素影响了分期准确率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">           <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>  ...         <span class="number">6</span>         <span class="number">7</span>         <span class="number">8</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0.785217</span>  <span class="number">0.862609</span>  <span class="number">0.828406</span>  ...  <span class="number">0.874493</span>  <span class="number">0.879130</span>  <span class="number">0.882029</span></span><br><span class="line"><span class="number">1</span>   <span class="number">0.789143</span>  <span class="number">0.824000</span>  <span class="number">0.843429</span>  ...  <span class="number">0.844952</span>  <span class="number">0.845714</span>  <span class="number">0.847810</span></span><br><span class="line"><span class="number">2</span>   <span class="number">0.834667</span>  <span class="number">0.866286</span>  <span class="number">0.857714</span>  ...  <span class="number">0.848381</span>  <span class="number">0.853524</span>  <span class="number">0.860381</span></span><br><span class="line"><span class="number">3</span>   <span class="number">0.881538</span>  <span class="number">0.890000</span>  <span class="number">0.886154</span>  ...  <span class="number">0.881795</span>  <span class="number">0.864615</span>  <span class="number">0.898718</span></span><br><span class="line"><span class="number">4</span>   <span class="number">0.601373</span>  <span class="number">0.694902</span>  <span class="number">0.687745</span>  ...  <span class="number">0.756569</span>  <span class="number">0.765588</span>  <span class="number">0.768333</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0.754366</span>  <span class="number">0.805540</span>  <span class="number">0.804131</span>  ...  <span class="number">0.850704</span>  <span class="number">0.847512</span>  <span class="number">0.827793</span></span><br><span class="line"><span class="number">6</span>   <span class="number">0.615450</span>  <span class="number">0.674597</span>  <span class="number">0.664171</span>  ...  <span class="number">0.706161</span>  <span class="number">0.702749</span>  <span class="number">0.715735</span></span><br><span class="line"><span class="number">7</span>   <span class="number">0.754732</span>  <span class="number">0.831122</span>  <span class="number">0.803415</span>  ...  <span class="number">0.840293</span>  <span class="number">0.824195</span>  <span class="number">0.845951</span></span><br><span class="line"><span class="number">8</span>   <span class="number">0.811746</span>  <span class="number">0.826984</span>  <span class="number">0.831429</span>  ...  <span class="number">0.822751</span>  <span class="number">0.834921</span>  <span class="number">0.844339</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0.915749</span>  <span class="number">0.928309</span>  <span class="number">0.927246</span>  ...  <span class="number">0.941739</span>  <span class="number">0.935556</span>  <span class="number">0.938744</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0.535238</span>  <span class="number">0.640173</span>  <span class="number">0.591602</span>  ...  <span class="number">0.674026</span>  <span class="number">0.670216</span>  <span class="number">0.669524</span></span><br><span class="line"><span class="number">11</span>  <span class="number">0.695733</span>  <span class="number">0.780800</span>  <span class="number">0.759822</span>  ...  <span class="number">0.809689</span>  <span class="number">0.798489</span>  <span class="number">0.795289</span></span><br><span class="line"><span class="number">12</span>  <span class="number">0.640356</span>  <span class="number">0.700889</span>  <span class="number">0.687911</span>  ...  <span class="number">0.690844</span>  <span class="number">0.696978</span>  <span class="number">0.705422</span></span><br><span class="line"><span class="number">13</span>  <span class="number">0.694667</span>  <span class="number">0.804148</span>  <span class="number">0.751852</span>  ...  <span class="number">0.786519</span>  <span class="number">0.801037</span>  <span class="number">0.811556</span></span><br><span class="line"><span class="number">14</span>  <span class="number">0.803824</span>  <span class="number">0.833137</span>  <span class="number">0.834608</span>  ...  <span class="number">0.841373</span>  <span class="number">0.833529</span>  <span class="number">0.850392</span></span><br><span class="line"><span class="number">15</span>  <span class="number">0.646479</span>  <span class="number">0.679531</span>  <span class="number">0.723192</span>  ...  <span class="number">0.772582</span>  <span class="number">0.776901</span>  <span class="number">0.803474</span></span><br><span class="line"><span class="number">16</span>  <span class="number">0.682636</span>  <span class="number">0.745271</span>  <span class="number">0.743101</span>  ...  <span class="number">0.760930</span>  <span class="number">0.770078</span>  <span class="number">0.758140</span></span><br><span class="line"><span class="number">17</span>  <span class="number">0.668372</span>  <span class="number">0.708837</span>  <span class="number">0.700465</span>  ...  <span class="number">0.719535</span>  <span class="number">0.696744</span>  <span class="number">0.721395</span></span><br></pre></td></tr></table></figure><p>如下表所示，有些列的数据对应起来就并不好，先基于平均值然后再去筛选为什么为地域80%的原因，找单独的数据序列，去对应查看其中的影响因素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>  ...         <span class="number">6</span>         <span class="number">7</span>         <span class="number">8</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0.721449</span>  <span class="number">0.851304</span>  <span class="number">0.764348</span>  ...  <span class="number">0.848116</span>  <span class="number">0.836232</span>  <span class="number">0.851594</span></span><br><span class="line"><span class="number">1</span>   <span class="number">0.712571</span>  <span class="number">0.770095</span>  <span class="number">0.768381</span>  ...  <span class="number">0.808571</span>  <span class="number">0.814476</span>  <span class="number">0.769714</span></span><br><span class="line"><span class="number">2</span>   <span class="number">0.806476</span>  <span class="number">0.858286</span>  <span class="number">0.844000</span>  ...  <span class="number">0.837524</span>  <span class="number">0.842095</span>  <span class="number">0.861905</span></span><br><span class="line"><span class="number">3</span>   <span class="number">0.818205</span>  <span class="number">0.846154</span>  <span class="number">0.870513</span>  ...  <span class="number">0.854103</span>  <span class="number">0.851538</span>  <span class="number">0.856410</span></span><br><span class="line"><span class="number">4</span>   <span class="number">0.495882</span>  <span class="number">0.645000</span>  <span class="number">0.575392</span>  ...  <span class="number">0.700294</span>  <span class="number">0.696961</span>  <span class="number">0.682059</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0.720845</span>  <span class="number">0.784695</span>  <span class="number">0.757934</span>  ...  <span class="number">0.818592</span>  <span class="number">0.814554</span>  <span class="number">0.764225</span></span><br><span class="line"><span class="number">6</span>   <span class="number">0.521991</span>  <span class="number">0.613175</span>  <span class="number">0.576967</span>  ...  <span class="number">0.637820</span>  <span class="number">0.638768</span>  <span class="number">0.635735</span></span><br><span class="line"><span class="number">7</span>   <span class="number">0.676488</span>  <span class="number">0.782634</span>  <span class="number">0.677366</span>  ...  <span class="number">0.799707</span>  <span class="number">0.803220</span>  <span class="number">0.807902</span></span><br><span class="line"><span class="number">8</span>   <span class="number">0.782540</span>  <span class="number">0.819153</span>  <span class="number">0.817460</span>  ...  <span class="number">0.810794</span>  <span class="number">0.820106</span>  <span class="number">0.832698</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0.906377</span>  <span class="number">0.917005</span>  <span class="number">0.916908</span>  ...  <span class="number">0.920000</span>  <span class="number">0.916908</span>  <span class="number">0.920483</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0.484762</span>  <span class="number">0.586667</span>  <span class="number">0.511688</span>  ...  <span class="number">0.642511</span>  <span class="number">0.638182</span>  <span class="number">0.614978</span></span><br><span class="line"><span class="number">11</span>  <span class="number">0.683378</span>  <span class="number">0.739111</span>  <span class="number">0.730667</span>  ...  <span class="number">0.785156</span>  <span class="number">0.779111</span>  <span class="number">0.758222</span></span><br><span class="line"><span class="number">12</span>  <span class="number">0.637956</span>  <span class="number">0.688356</span>  <span class="number">0.688267</span>  ...  <span class="number">0.670578</span>  <span class="number">0.679467</span>  <span class="number">0.688533</span></span><br><span class="line"><span class="number">13</span>  <span class="number">0.528741</span>  <span class="number">0.705778</span>  <span class="number">0.642519</span>  ...  <span class="number">0.723852</span>  <span class="number">0.733333</span>  <span class="number">0.690519</span></span><br><span class="line"><span class="number">14</span>  <span class="number">0.736569</span>  <span class="number">0.810686</span>  <span class="number">0.774216</span>  ...  <span class="number">0.818431</span>  <span class="number">0.817647</span>  <span class="number">0.819118</span></span><br><span class="line"><span class="number">15</span>  <span class="number">0.490704</span>  <span class="number">0.595869</span>  <span class="number">0.573052</span>  ...  <span class="number">0.724413</span>  <span class="number">0.706291</span>  <span class="number">0.639531</span></span><br><span class="line"><span class="number">16</span>  <span class="number">0.666977</span>  <span class="number">0.746202</span>  <span class="number">0.727907</span>  ...  <span class="number">0.754884</span>  <span class="number">0.753488</span>  <span class="number">0.760310</span></span><br><span class="line"><span class="number">17</span>  <span class="number">0.595814</span>  <span class="number">0.668372</span>  <span class="number">0.650233</span>  ...  <span class="number">0.676279</span>  <span class="number">0.657209</span>  <span class="number">0.696279</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/24</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最高准确率时对应特征数，对应的分类准确率</span></span><br><span class="line">feature = pd.read_excel(<span class="string">'E:/feature section'</span> + <span class="string">'/feature_section_class'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">data.rename(columns=&#123;<span class="number">0</span>: <span class="string">'SGD'</span>, <span class="number">1</span>: <span class="string">'SVM'</span>, <span class="number">2</span>: <span class="string">'LSVM'</span>, <span class="number">3</span>: <span class="string">'LR'</span>, <span class="number">4</span>: <span class="string">'KNN'</span>, <span class="number">5</span>: <span class="string">'DT'</span>, <span class="number">6</span>: <span class="string">'RF'</span>, <span class="number">7</span>: <span class="string">'GBT'</span>, <span class="number">8</span>: <span class="string">'NN'</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过1%牺牲后的分类准确率</span></span><br><span class="line">section = pd.read_excel(<span class="string">'E:/feature section'</span> + <span class="string">'/features_section_class'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">df = pd.get_dummies(section.iloc[<span class="number">0</span>:len(section), <span class="number">1</span>:])</span><br><span class="line">df.rename(columns=&#123;<span class="number">0</span>: <span class="string">'SGD'</span>, <span class="number">1</span>: <span class="string">'SVM'</span>, <span class="number">2</span>: <span class="string">'LSVM'</span>, <span class="number">3</span>: <span class="string">'LR'</span>, <span class="number">4</span>: <span class="string">'KNN'</span>, <span class="number">5</span>: <span class="string">'DT'</span>, <span class="number">6</span>: <span class="string">'RF'</span>, <span class="number">7</span>: <span class="string">'GBT'</span>, <span class="number">8</span>: <span class="string">'NN'</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">9</span>)</span><br><span class="line">y1 = [(np.array([np.array(data).tolist()[i][j] * <span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>)])).mean() <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line">y2 = [(np.array([np.array(df).tolist()[i][j] * <span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>)])).mean() <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line">width = <span class="number">0.4</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">7</span>, <span class="number">5</span>))</span><br><span class="line">rects1 = ax.bar(x - width/<span class="number">2</span>, y1, width, color=<span class="string">'SkyBlue'</span>, label=<span class="string">'Before dimensionality reduction'</span>)</span><br><span class="line">rects2 = ax.bar(x + width/<span class="number">2</span>, y2, width, color=<span class="string">'IndianRed'</span>, label=<span class="string">'After dimensionality reduction'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(x, (df.keys()), fontsize=<span class="number">10</span>, rotation=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">'Average Accuracy/%'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">ax.set_title(<span class="string">'DLRW主题下降维前后准确率对比'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">plt.ylim((<span class="number">60</span>, <span class="number">95</span>))</span><br><span class="line">new_ticks = np.linspace(<span class="number">60</span>, <span class="number">95</span>, <span class="number">5</span>)</span><br><span class="line">plt.yticks(new_ticks, fontsize=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> rects1+rects2:</span><br><span class="line">    h = y.get_height()</span><br><span class="line">    ax.text(y.get_x()+y.get_width()/<span class="number">2</span>, h, <span class="string">'%.1f'</span> % h, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.show()</span><br><span class="line">fig.savefig(<span class="string">'feature_class4_number.png'</span>, dpi=<span class="number">1600</span>, bbox_inches=<span class="string">'tight'</span>)</span><br></pre></td></tr></table></figure><p>感觉效果并不好，考虑下一个步骤</p><p><img src="/images/feature_class3_number.png" alt="feature_class3_number"></p><p><img src="http://b-ssl.duitang.com/uploads/item/201610/09/20161009160331_YNsHu.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不同特征数之间的分类模型比较&quot;&gt;&lt;a href=&quot;#不同特征数之间的分类模型比较&quot; class=&quot;headerlink&quot; title=&quot;不同特征数之间的分类模型比较&quot;&gt;&lt;/a&gt;不同特征数之间的分类模型比较&lt;/h1&gt;&lt;p&gt;首先确定特征的个数，确定index和特征数之
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>特征数的确定</title>
    <link href="https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E7%89%B9%E5%BE%81%E6%95%B0%E7%9A%84%E7%A1%AE%E5%AE%9A/"/>
    <id>https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E7%89%B9%E5%BE%81%E6%95%B0%E7%9A%84%E7%A1%AE%E5%AE%9A/</id>
    <published>2020-06-24T01:42:09.000Z</published>
    <updated>2020-06-24T01:42:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特征数的确定"><a href="#特征数的确定" class="headerlink" title="特征数的确定"></a>特征数的确定</h1><p>经过50次平均值筛选后，可看出对应3分期时，特征数为15,4、5分期的特征数都为23，此时为最高的特征值。</p><p><img src="/images/features_section.png" alt="features section"></p><p>为了确定特征数对准确率的影响，第一个方案</p><p>选择(10-22)个特征，将每个特征都用于分类，然后将对比看看分类的结果</p><h2 id="特征缩减"><a href="#特征缩减" class="headerlink" title="特征缩减"></a>特征缩减</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/17</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> classifiers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">22</span>):</span><br><span class="line">    class_scores = []</span><br><span class="line">    kappa_scores = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">        feature = pd.read_excel(<span class="string">'D:/zccode/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        note = pd.read_excel(<span class="string">'D:/zccode/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选定固定的特征值</span></span><br><span class="line">        feature_import = pd.read_excel(<span class="string">'D:/zccode'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % <span class="number">2</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">        df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:index])</span><br><span class="line"></span><br><span class="line">        std_data = data_pre(data[df.keys()])</span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        class_score = []</span><br><span class="line">        kappa_score = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(std_data, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            score = run_classifiers(X_train, X_test, y_train, y_test)</span><br><span class="line">            class_score.append(score[<span class="number">0</span>])</span><br><span class="line">            kappa_score.append(score[<span class="number">1</span>])</span><br><span class="line">        class_scores.append([(np.array([class_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        kappa_scores.append([(np.array([kappa_score[a][k] <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">50</span>)])).mean() <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">9</span>)])</span><br><span class="line">        print(<span class="string">f'已经运行<span class="subst">&#123;i&#125;</span>次'</span>)</span><br><span class="line"></span><br><span class="line">    class_total = pd.DataFrame(class_scores)</span><br><span class="line">    kappa_total = pd.DataFrame(kappa_scores)</span><br><span class="line">    class_total.to_excel(<span class="string">'no RFE classf'</span> + <span class="string">'%d'</span> % index + <span class="string">".xlsx"</span>)</span><br><span class="line">    kappa_total.to_excel(<span class="string">'no RFE kappaf'</span> + <span class="string">'%d'</span> % index + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><p>此次方案，在进行分类时，直接选用的是固定的特征，即迭代50次特征贡献度，平均后的结果，用固定特征对应的特征数，去进行分类。</p><h2 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/15</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> cohen_kappa_score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_gbt</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = GradientBoostingClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_knn</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = KNeighborsClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_dt</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = DecisionTreeClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_svm</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = SVC()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_lsvm</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = LinearSVC()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_lr</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = LogisticRegression()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_ml</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = MLPClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_sgd</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    clf = SGDClassifier()</span><br><span class="line">    clf.fit(train_x, train_y)</span><br><span class="line">    pred_y = clf.predict(test_x)</span><br><span class="line">    acr = accuracy_score(test_y, pred_y)</span><br><span class="line">    kappa = cohen_kappa_score(test_y, pred_y)</span><br><span class="line">    <span class="keyword">return</span> [acr, kappa]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接运行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_classifiers</span><span class="params">(train_x, test_x, train_y, test_y)</span>:</span></span><br><span class="line">    rf = run_rf(train_x, test_x, train_y, test_y)</span><br><span class="line">    gbt = run_gbt(train_x, test_x, train_y, test_y)</span><br><span class="line">    knn = run_knn(train_x, test_x, train_y, test_y)</span><br><span class="line">    dt = run_dt(train_x, test_x, train_y, test_y)</span><br><span class="line">    svm = run_svm(train_x, test_x, train_y, test_y)</span><br><span class="line">    lsvm = run_lsvm(train_x, test_x, train_y, test_y)</span><br><span class="line">    lr = run_lr(train_x, test_x, train_y, test_y)</span><br><span class="line">    ml = run_ml(train_x, test_x, train_y, test_y)</span><br><span class="line">    sgd = run_sgd(train_x, test_x, train_y, test_y)</span><br><span class="line"></span><br><span class="line">    class_s = [sgd[<span class="number">0</span>], svm[<span class="number">0</span>], lsvm[<span class="number">0</span>], lr[<span class="number">0</span>], knn[<span class="number">0</span>], dt[<span class="number">0</span>], rf[<span class="number">0</span>], gbt[<span class="number">0</span>], ml[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    kappa_s = [sgd[<span class="number">1</span>], svm[<span class="number">1</span>], lsvm[<span class="number">1</span>], lr[<span class="number">1</span>], knn[<span class="number">1</span>], dt[<span class="number">1</span>], rf[<span class="number">1</span>], gbt[<span class="number">1</span>], ml[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [class_s, kappa_s]</span><br></pre></td></tr></table></figure><p>分类模型对应的为以下9种，并分别计算出的kappa值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sgd[<span class="number">0</span>], svm[<span class="number">0</span>], lsvm[<span class="number">0</span>], lr[<span class="number">0</span>], knn[<span class="number">0</span>], dt[<span class="number">0</span>], rf[<span class="number">0</span>], gbt[<span class="number">0</span>], ml[<span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p>文件保存为： E:\sleep_stage</p><p>例如：no RFE class10.xlsx</p><p><strong>10其实对应的是9，在index中，而且不一定对应的是9还可能是对应的8，这点待会儿还需要检验下，直接进行最高的和牺牲对比的</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对比结果发现，特征越多，准确率越高，在其他分类模型中，随机森林相对变化不大</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><h3 id="最大准确率"><a href="#最大准确率" class="headerlink" title="最大准确率"></a>最大准确率</h3><p>虽然此时的max对应的特征数已经确定，但是可以明显看出，从特征数7-9这些开始已经没有太多的明显变化</p><p>所以为了进一步的缩减特征值，在此次方案中采取牺牲1%的准确率，来降低特征数的方针。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/24</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">all_section = []</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    data = pd.read_excel(<span class="string">'E:/features'</span> + <span class="string">'/themes'</span> + <span class="string">'%s'</span> % q + <span class="string">'.xlsx'</span>)</span><br><span class="line">    train_data = np.array(data).tolist()</span><br><span class="line">    list_mean = [[np.array([eval(train_data[i][k])[j] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>)]</span><br><span class="line">    feature_section = [np.array([list_mean[j][i] * <span class="number">100</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">18</span>)]).mean() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>)]</span><br><span class="line">    all_section.append(feature_section)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">26</span>)</span><br><span class="line">class_5 = all_section[<span class="number">0</span>]</span><br><span class="line">class_4 = all_section[<span class="number">1</span>]</span><br><span class="line">class_3 = all_section[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">class_num = [x[all_section[i].index(max(all_section[i]))] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">class_max = [max(all_section[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><p>先找到对应的最大值对应的位置class_num和值class_max</p><p>[23, 23, 15]</p><p>[79.64724146295774, 86.40048338502821, 89.03929260177847]</p><p>来个制表符，直接输出，让他看起来好看点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">f'分期为<span class="subst">&#123;<span class="number">5</span>-i&#125;</span>时'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'最高准确率为%.2f%%'</span> % max(all_section[i]), end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'特征数为<span class="subst">&#123;x[all_section[i].index(max(all_section[i]))]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>输出要%时，即为%%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%特征数为<span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="降低1-后对应结果"><a href="#降低1-后对应结果" class="headerlink" title="降低1%后对应结果"></a>降低1%后对应结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f'准确率降低1%后对应的特征数'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">f'分期为<span class="subst">&#123;<span class="number">5</span>-i&#125;</span>时'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'最高准确率为%.2f%%'</span> % max(all_section[i]), end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">f'最高准确率降低1%%后为%.2f%%'</span> % (max(all_section[i]) * <span class="number">0.99</span>), end=<span class="string">'\t'</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(all_section[i])):</span><br><span class="line">        <span class="keyword">if</span> (max(all_section[i]) * <span class="number">0.99</span>) &lt; all_section[i][j]:</span><br><span class="line">            print(<span class="string">f'比较筛选的准确率为%.2f%%'</span> % (all_section[i][j]), end=<span class="string">'\t'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">f'特征数为<span class="subst">&#123;x[all_section[i].index(all_section[i][j])]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">最大准确率时对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%特征数为<span class="number">23</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%特征数为<span class="number">15</span></span><br><span class="line">准确率降低<span class="number">1</span>%后对应的特征数</span><br><span class="line">分期为<span class="number">5</span>时最高准确率为<span class="number">79.65</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">78.85</span>%比较筛选的准确率为<span class="number">78.86</span>%特征数为<span class="number">9</span></span><br><span class="line">分期为<span class="number">4</span>时最高准确率为<span class="number">86.40</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">85.54</span>%比较筛选的准确率为<span class="number">85.66</span>%特征数为<span class="number">8</span></span><br><span class="line">分期为<span class="number">3</span>时最高准确率为<span class="number">89.04</span>%最高准确率降低<span class="number">1</span>%后为<span class="number">88.15</span>%比较筛选的准确率为<span class="number">88.22</span>%特征数为<span class="number">7</span></span><br></pre></td></tr></table></figure><p><img src="http://pic1.win4000.com/wallpaper/1/5450829edeb96.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特征数的确定&quot;&gt;&lt;a href=&quot;#特征数的确定&quot; class=&quot;headerlink&quot; title=&quot;特征数的确定&quot;&gt;&lt;/a&gt;特征数的确定&lt;/h1&gt;&lt;p&gt;经过50次平均值筛选后，可看出对应3分期时，特征数为15,4、5分期的特征数都为23，此时为最高的特征值。&lt;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>绘制特征重要度筛选结果</title>
    <link href="https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E7%BB%98%E5%88%B6%E7%89%B9%E5%BE%81%E9%87%8D%E8%A6%81%E5%BA%A6%E7%AD%9B%E9%80%89%E7%BB%93%E6%9E%9C/"/>
    <id>https://esyyes.github.io/2020/06/24/sleep%20apnea%20and%20sleep%20stage/%E7%BB%98%E5%88%B6%E7%89%B9%E5%BE%81%E9%87%8D%E8%A6%81%E5%BA%A6%E7%AD%9B%E9%80%89%E7%BB%93%E6%9E%9C/</id>
    <published>2020-06-24T00:59:32.000Z</published>
    <updated>2020-06-24T00:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制特征重要度筛选结果"><a href="#绘制特征重要度筛选结果" class="headerlink" title="绘制特征重要度筛选结果"></a>绘制特征重要度筛选结果</h1><p>基于全部特征的提取和标签处理，初步设定RFE-RF筛选特征时，设定的重要度中的特征个数index为26，即在25个特征之间进行排查。</p><h2 id="输出特征重要度"><a href="#输出特征重要度" class="headerlink" title="输出特征重要度"></a>输出特征重要度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/12</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_rf</span><span class="params">(xtrain, xtest, ytrain, ytest)</span>:</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(xtrain, ytrain)</span><br><span class="line">    ypred = clf.predict(xtest)</span><br><span class="line">    sad = accuracy_score(ytest, ypred)</span><br><span class="line">    <span class="keyword">return</span> sad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">f'在标签<span class="subst">&#123;k&#125;</span>下的特征文件'</span>)</span><br><span class="line">    se = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">        feature = pd.read_excel(<span class="string">'D:/zccode/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">        note = pd.read_excel(<span class="string">'D:/zccode/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">        tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">        df = data_pre(data)</span><br><span class="line">        label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), k:k+<span class="number">1</span>])</span><br><span class="line">        acr = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">            X_train, X_test, y_train, y_test = train_test_split(df, label, test_size=<span class="number">0.3</span>)</span><br><span class="line">            score = []</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">                sel = RFE(RandomForestClassifier(random_state=<span class="number">0</span>), n_features_to_select=index)</span><br><span class="line">                sel.fit(X_train, y_train)</span><br><span class="line">                X_train_rfe = sel.transform(X_train)</span><br><span class="line">                X_test_rfe = sel.transform(X_test)</span><br><span class="line">                score.append(run_rf(X_train_rfe, X_test_rfe, y_train, y_test))</span><br><span class="line">            acr.append(score)</span><br><span class="line">        print(<span class="string">f'检测文件数为：%2d'</span> % i, end=<span class="string">'\t'</span>)</span><br><span class="line">        se.append(acr)</span><br><span class="line">        print()</span><br><span class="line">    sea = pd.DataFrame(se)</span><br><span class="line">    sea.to_excel(<span class="string">'themes'</span> + <span class="string">'%d'</span> % k + <span class="string">".xlsx"</span>)</span><br><span class="line">    print(<span class="string">f'运行主题<span class="subst">&#123;k&#125;</span>次'</span>)</span><br></pre></td></tr></table></figure><p>这个区间就为(1, 26)</p><p>进行了50次循环筛选，然后保存为文件为themes012,对应为分期结果543</p><p>保存在：  E:\features\themes012</p><h2 id="绘制50次平均重要度对应准确率"><a href="#绘制50次平均重要度对应准确率" class="headerlink" title="绘制50次平均重要度对应准确率"></a>绘制50次平均重要度对应准确率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/18</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">all_section = []</span><br><span class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    data = pd.read_excel(<span class="string">'E:/features'</span> + <span class="string">'/themes'</span> + <span class="string">'%s'</span> % q + <span class="string">'.xlsx'</span>)</span><br><span class="line">    train_data = np.array(data).tolist()</span><br><span class="line">    list_mean = [[np.array([eval(train_data[i][k])[j] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">50</span>)]).mean() <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>)]</span><br><span class="line">    feature_section = [np.array([list_mean[j][i] * <span class="number">100</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">18</span>)]).mean() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>)]</span><br><span class="line">    all_section.append(feature_section)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">26</span>)</span><br><span class="line">class_5 = all_section[<span class="number">0</span>]</span><br><span class="line">class_4 = all_section[<span class="number">1</span>]</span><br><span class="line">class_3 = all_section[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 解决中文显示问题</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">plt.xticks(x)</span><br><span class="line">plt.plot(x, class_5, <span class="string">"k*--"</span>, linewidth=<span class="number">1</span>, label=<span class="string">'class_5'</span>)</span><br><span class="line">plt.plot(x, class_4, <span class="string">"bo--"</span>, linewidth=<span class="number">1</span>, label=<span class="string">'class_5'</span>)</span><br><span class="line">plt.plot(x, class_3, <span class="string">"ro--"</span>, linewidth=<span class="number">1</span>, label=<span class="string">'class_5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    plt.scatter(x[all_section[i].index(max(all_section[i]))], max(all_section[i]), s=<span class="number">100</span>, color=<span class="string">'r'</span>)</span><br><span class="line">    plt.text(x[all_section[i].index(max(all_section[i]))], max(all_section[i])<span class="number">-2</span>, <span class="string">r's'</span>,</span><br><span class="line">             fontdict=&#123;<span class="string">'size'</span>: <span class="string">'10'</span>, <span class="string">'color'</span>: <span class="string">'k'</span>&#125;)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"Number of Features"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Average Accuracy of RF/%"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line">fig.savefig(<span class="string">'features_section.png'</span>, dpi=<span class="number">1980</span>, bbox_inches=<span class="string">'tight'</span>)</span><br><span class="line"><span class="comment"># dpi可以控制图象的分辨率,bbox_inches可以剪除图表的空白部分</span></span><br></pre></td></tr></table></figure><p><img src="/images/features_section.png" alt="features section"></p><p>经过50次平均值筛选后，可看出对应3分期时，特征数为15,4、5分期的特征数都为23，此时为最高的特征值。</p><img src="/images/features_section.png" alt="features section"><h1 id="hexo-插入本地图片"><a href="#hexo-插入本地图片" class="headerlink" title="hexo 插入本地图片"></a>hexo 插入本地图片</h1><p>!【】用这个形式，但是根目录和插入的目录的不能再进行重叠，且斜杠为/images/features_section.png</p><p><img src="" alt="features section">用这个形式相同的道理，上面那个好用点</p><p>！【】（<a href="http://pic1.win4000.com/wallpaper/1/5993ff70bfac7.jpg）" target="_blank" rel="noopener">http://pic1.win4000.com/wallpaper/1/5993ff70bfac7.jpg）</a></p><p><img src="http://pic1.win4000.com/wallpaper/1/5993ff70bfac7.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;绘制特征重要度筛选结果&quot;&gt;&lt;a href=&quot;#绘制特征重要度筛选结果&quot; class=&quot;headerlink&quot; title=&quot;绘制特征重要度筛选结果&quot;&gt;&lt;/a&gt;绘制特征重要度筛选结果&lt;/h1&gt;&lt;p&gt;基于全部特征的提取和标签处理，初步设定RFE-RF筛选特征时，设定的
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>重要特征查看</title>
    <link href="https://esyyes.github.io/2020/06/18/sleep%20apnea%20and%20sleep%20stage/%E9%87%8D%E8%A6%81%E7%89%B9%E5%BE%81%E6%9F%A5%E7%9C%8B/"/>
    <id>https://esyyes.github.io/2020/06/18/sleep%20apnea%20and%20sleep%20stage/%E9%87%8D%E8%A6%81%E7%89%B9%E5%BE%81%E6%9F%A5%E7%9C%8B/</id>
    <published>2020-06-18T08:24:02.000Z</published>
    <updated>2020-06-18T08:24:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重要特征查看"><a href="#重要特征查看" class="headerlink" title="重要特征查看"></a>重要特征查看</h1><p>目的：将睡眠分期中的345阶段的睡眠分期结果进行比较，查看特征对睡眠分期的影响,</p><p>筛选出特征贡献度最高的那几个，进行查看</p><p>程序：利用表格形式输出特征的排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/18</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定固定的特征值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    feature_import = pd.read_excel(<span class="string">'E:/features'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % h + <span class="string">'.xlsx'</span>)</span><br><span class="line">    df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:<span class="number">23</span>])</span><br><span class="line">    data = df.T</span><br><span class="line">    print(<span class="string">f'列写特征重要度排序'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">f'序号'</span>, end=<span class="string">'\t\t'</span>)</span><br><span class="line">    print(<span class="string">f'特征'</span>, end=<span class="string">'\t\t'</span>)</span><br><span class="line">    print(<span class="string">f'重要度'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">        print(<span class="string">f'%2d'</span> % i, end=<span class="string">'\t'</span>)</span><br><span class="line">        print(<span class="string">f'%10s'</span> % df.keys()[i], end=<span class="string">'\t'</span>)</span><br><span class="line">        print(<span class="string">f'%0.3f'</span> % data[<span class="number">0</span>][i])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">序号特征 重要度</span><br><span class="line"> <span class="number">0</span>    <span class="number">5</span>pNN20<span class="number">0.021</span></span><br><span class="line"> <span class="number">1</span>     <span class="number">5</span>NN20<span class="number">0.021</span></span><br><span class="line"> <span class="number">2</span>    <span class="number">5</span>pNN50<span class="number">0.019</span></span><br><span class="line"> <span class="number">3</span>     <span class="number">5</span>NN50<span class="number">0.019</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span>p_RMSSD<span class="number">0.018</span></span><br><span class="line"> <span class="number">5</span>    <span class="number">5</span>p_var<span class="number">0.018</span></span><br><span class="line"> <span class="number">6</span>    <span class="number">5</span>csi50<span class="number">0.017</span></span><br><span class="line"> <span class="number">7</span>    <span class="number">5</span>csi30<span class="number">0.017</span></span><br><span class="line"> <span class="number">8</span>    <span class="number">5</span>csi10<span class="number">0.017</span></span><br><span class="line"> <span class="number">9</span>       <span class="number">5</span>HF<span class="number">0.017</span></span><br><span class="line"><span class="number">10</span>   <span class="number">5</span>p_skew<span class="number">0.017</span></span><br><span class="line"><span class="number">11</span>   <span class="number">5</span>p_SDNN<span class="number">0.017</span></span><br><span class="line"><span class="number">12</span> <span class="number">5</span>p_median<span class="number">0.017</span></span><br><span class="line"><span class="number">13</span>   <span class="number">5</span>R_mean<span class="number">0.016</span></span><br><span class="line"><span class="number">14</span>  <span class="number">5</span>HR_mean<span class="number">0.016</span></span><br><span class="line"><span class="number">15</span>    <span class="number">5</span>p_RMS<span class="number">0.015</span></span><br><span class="line"><span class="number">16</span>   <span class="number">5</span>p_mean<span class="number">0.015</span></span><br><span class="line"><span class="number">17</span>    <span class="number">5</span>p_max<span class="number">0.014</span></span><br><span class="line"><span class="number">18</span> <span class="number">5</span>R_median<span class="number">0.014</span></span><br><span class="line"><span class="number">19</span>     <span class="number">5</span>apen<span class="number">0.014</span></span><br><span class="line"><span class="number">20</span><span class="number">5</span>p_peak_factor<span class="number">0.014</span></span><br><span class="line"><span class="number">21</span>   <span class="number">5</span>csi100<span class="number">0.014</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">序号特征 重要度</span><br><span class="line"> 0     5NN200.024</span><br><span class="line"> 1    5pNN200.023</span><br><span class="line"> 2    5pNN500.023</span><br><span class="line"> 3     5NN500.022</span><br><span class="line"> 4   5p_skew0.020</span><br><span class="line"> 5       5HF0.018</span><br><span class="line"> 6 5p_median0.017</span><br><span class="line"> 7   5R_mean0.016</span><br><span class="line"> 8   5p_SDNN0.016</span><br><span class="line"> 9    5p_var0.016</span><br><span class="line">10    5p_RMS0.016</span><br><span class="line">11    5csi100.016</span><br><span class="line">12  5p_RMSSD0.016</span><br><span class="line">13   5R_CVSD0.016</span><br><span class="line">14    5p_max0.016</span><br><span class="line">15    5csi500.016</span><br><span class="line">16   5R_SDSD0.015</span><br><span class="line">17   5p_mean0.015</span><br><span class="line">18      5sd10.015</span><br><span class="line">19  5R_RMSSD0.015</span><br><span class="line">20   5HR_min0.015</span><br><span class="line">21     5apen0.015</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">序号特征 重要度</span><br><span class="line"> <span class="number">0</span>    <span class="number">5</span>pNN20<span class="number">0.026</span></span><br><span class="line"> <span class="number">1</span>     <span class="number">5</span>NN20<span class="number">0.025</span></span><br><span class="line"> <span class="number">2</span>    <span class="number">5</span>pNN50<span class="number">0.023</span></span><br><span class="line"> <span class="number">3</span>     <span class="number">5</span>NN50<span class="number">0.021</span></span><br><span class="line"> <span class="number">4</span>   <span class="number">5</span>R_mean<span class="number">0.019</span></span><br><span class="line"> <span class="number">5</span>   <span class="number">5</span>p_skew<span class="number">0.019</span></span><br><span class="line"> <span class="number">6</span>       <span class="number">5</span>HF<span class="number">0.018</span></span><br><span class="line"> <span class="number">7</span>   <span class="number">5</span>HR_min<span class="number">0.017</span></span><br><span class="line"> <span class="number">8</span> <span class="number">5</span>p_median<span class="number">0.017</span></span><br><span class="line"> <span class="number">9</span> <span class="number">5</span>R_median<span class="number">0.017</span></span><br><span class="line"><span class="number">10</span>     <span class="number">5</span>apen<span class="number">0.017</span></span><br><span class="line"><span class="number">11</span>  <span class="number">5</span>HR_mean<span class="number">0.017</span></span><br><span class="line"><span class="number">12</span>  <span class="number">5</span>p_RMSSD<span class="number">0.016</span></span><br><span class="line"><span class="number">13</span>   <span class="number">5</span>R_CVSD<span class="number">0.016</span></span><br><span class="line"><span class="number">14</span>    <span class="number">5</span>csi10<span class="number">0.016</span></span><br><span class="line"><span class="number">15</span>   <span class="number">5</span>p_SDNN<span class="number">0.016</span></span><br><span class="line"><span class="number">16</span>    <span class="number">5</span>p_RMS<span class="number">0.016</span></span><br><span class="line"><span class="number">17</span>    <span class="number">5</span>p_max<span class="number">0.016</span></span><br><span class="line"><span class="number">18</span>    <span class="number">5</span>p_var<span class="number">0.015</span></span><br><span class="line"><span class="number">19</span>   <span class="number">5</span>p_mean<span class="number">0.015</span></span><br><span class="line"><span class="number">20</span>   <span class="number">5</span>R_SDSD<span class="number">0.015</span></span><br><span class="line"><span class="number">21</span>  <span class="number">5</span>R_RMSSD<span class="number">0.015</span></span><br></pre></td></tr></table></figure><p>排序顺序为543分类</p><p>直接用一个行表格不就行了嘛。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/18</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定固定的特征值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for h in range(1, 4):</span></span><br><span class="line"><span class="comment">#     feature_import = pd.read_excel('E:/features' + '/feature_important' + '%s' % h + '.xlsx')</span></span><br><span class="line"><span class="comment">#     df = pd.get_dummies(feature_import.iloc[0:len(feature_import), 1:23])</span></span><br><span class="line"><span class="comment">#     data = df.T</span></span><br><span class="line"><span class="comment">#     print(f'列写特征重要度排序', end='\t')</span></span><br><span class="line"><span class="comment">#     print()</span></span><br><span class="line"><span class="comment">#     print(f'序号', end='\t\t')</span></span><br><span class="line"><span class="comment">#     print(f'特征', end='\t\t')</span></span><br><span class="line"><span class="comment">#     print(f'重要度')</span></span><br><span class="line"><span class="comment">#     for i in range(22):</span></span><br><span class="line"><span class="comment">#         print(f'%2d' % i, end='\t')</span></span><br><span class="line"><span class="comment">#         print(f'%10s' % df.keys()[i], end='\t')</span></span><br><span class="line"><span class="comment">#         print(f'%0.3f' % data[0][i])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        feature_import = pd.read_excel(<span class="string">'E:/features'</span> + <span class="string">'/feature_important'</span> + <span class="string">'%s'</span> % h + <span class="string">'.xlsx'</span>)</span><br><span class="line">        df = pd.get_dummies(feature_import.iloc[<span class="number">0</span>:len(feature_import), <span class="number">1</span>:<span class="number">23</span>])</span><br><span class="line">        data = df.T</span><br><span class="line">        print(<span class="string">f'%15s'</span> % df.keys()[i], end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  5期  4期 3期</span><br><span class="line"> 5pNN20          5NN20         5pNN20</span><br><span class="line">         5NN20         5pNN20          5NN20</span><br><span class="line">        5pNN50         5pNN50         5pNN50</span><br><span class="line">         5NN50          5NN50          5NN50</span><br><span class="line">      5p_RMSSD        5p_skew        5R_mean</span><br><span class="line">        5p_var            5HF        5p_skew</span><br><span class="line">        5csi50      5p_median            5HF</span><br><span class="line">        5csi30        5R_mean        5HR_min</span><br><span class="line">        5csi10        5p_SDNN      5p_median</span><br><span class="line">           5HF         5p_var      5R_median</span><br><span class="line">       5p_skew         5p_RMS          5apen</span><br><span class="line">       5p_SDNN         5csi10       5HR_mean</span><br><span class="line">     5p_median       5p_RMSSD       5p_RMSSD</span><br><span class="line">       5R_mean        5R_CVSD        5R_CVSD</span><br><span class="line">      5HR_mean         5p_max         5csi10</span><br><span class="line">        5p_RMS         5csi50        5p_SDNN</span><br><span class="line">       5p_mean        5R_SDSD         5p_RMS</span><br><span class="line">        5p_max        5p_mean         5p_max</span><br><span class="line">     5R_median           5sd1         5p_var</span><br><span class="line">         5apen       5R_RMSSD        5p_mean</span><br><span class="line">5p_peak_factor        5HR_min        5R_SDSD</span><br><span class="line">       5csi100          5apen       5R_RMSSD</span><br></pre></td></tr></table></figure><p><img src="http://image.uczzd.cn/889217514512198939.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重要特征查看&quot;&gt;&lt;a href=&quot;#重要特征查看&quot; class=&quot;headerlink&quot; title=&quot;重要特征查看&quot;&gt;&lt;/a&gt;重要特征查看&lt;/h1&gt;&lt;p&gt;目的：将睡眠分期中的345阶段的睡眠分期结果进行比较，查看特征对睡眠分期的影响,&lt;/p&gt;
&lt;p&gt;筛选出特征贡
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>全部特征的提取和标签处理</title>
    <link href="https://esyyes.github.io/2020/06/11/sleep%20apnea%20and%20sleep%20stage/%E5%85%A8%E9%83%A8%E7%89%B9%E5%BE%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%A0%87%E7%AD%BE%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/06/11/sleep%20apnea%20and%20sleep%20stage/%E5%85%A8%E9%83%A8%E7%89%B9%E5%BE%81%E7%9A%84%E6%8F%90%E5%8F%96%E5%92%8C%E6%A0%87%E7%AD%BE%E5%A4%84%E7%90%86/</id>
    <published>2020-06-11T08:49:41.000Z</published>
    <updated>2020-06-11T08:49:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全部特征的提取和标签处理"><a href="#全部特征的提取和标签处理" class="headerlink" title="全部特征的提取和标签处理"></a>全部特征的提取和标签处理</h1><p>提取5分钟片段的特征，并进行滑窗切片，以30s为窗口，5min为步长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/11</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将5分钟的数据进行30s窗口的滑窗切片，然后进行输出为list</span></span><br><span class="line"><span class="comment"># 5min的进行单独的分析，然后进行时频域和非线性的分析</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> peaks_time_features <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> frequency_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> HRV_interp1 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> nonliner_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> eliminate_outliers <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp01a'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line"></span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line">ecg_r_locs1 = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs,</span><br><span class="line">                                       search_radius=search_radius, smooth_window_size=<span class="number">100</span>)</span><br><span class="line"><span class="comment"># ecg_r_locs异常点处理</span></span><br><span class="line">ecg_r_locs = eliminate(ecg_r_locs1)</span><br><span class="line"><span class="comment"># ecg_r_peaks峰值点获取</span></span><br><span class="line">ecg_r_peaks = [ecg_signal[int(ecg_r_locs[i])][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ecg_r_locs))]</span><br><span class="line"></span><br><span class="line">all_RR_5m = []</span><br><span class="line">all_locs_5m = []</span><br><span class="line">all_peaks_5m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">11</span>)):</span><br><span class="line">    RR_300s = []</span><br><span class="line">    locs_300s = []</span><br><span class="line">    peaks_300s = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">10</span>)):</span><br><span class="line">            locs_300s.append(ecg_r_locs[j])</span><br><span class="line">            RR_300s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">            peaks_300s.append(ecg_r_peaks[j][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    RR_300s.pop()</span><br><span class="line">    all_RR_5m.append(RR_300s)</span><br><span class="line">    all_locs_5m.append(locs_300s)</span><br><span class="line">    all_peaks_5m.append(peaks_300s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECG_R</span></span><br><span class="line">peaks_features = [peaks_time_feature(all_peaks_300s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_peaks_300s))]</span><br><span class="line"><span class="comment"># HRV</span></span><br><span class="line">hrv_time = [time_features(all_RR_300s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_300s))]</span><br><span class="line">hrv_freq = [getfreq(resample(hrv_interp1(all_locs_300s[i], all_RR_300s[i], <span class="number">1</span>), <span class="number">250</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_300s))]</span><br><span class="line">hrv_nonl = [non_linear(np.array(all_RR_300s[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">features = [peaks_features[i] + hrv_time[i] + hrv_freq[i] + hrv_nonl[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_300s))]</span><br></pre></td></tr></table></figure><h2 id="特征重要度"><a href="#特征重要度" class="headerlink" title="特征重要度"></a>特征重要度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/11</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> data_preprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">    feature = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/all_feature'</span> + <span class="string">'/features'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">    note = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/all_note'</span> + <span class="string">'/note'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(data), <span class="number">1</span>:])</span><br><span class="line">    <span class="comment"># 数据预处理</span></span><br><span class="line">    df = data_pre(data)</span><br><span class="line">    label = pd.get_dummies(tag.iloc[<span class="number">0</span>:len(data), <span class="number">-2</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    X = df</span><br><span class="line">    Y = label</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="number">0.3</span>)</span><br><span class="line">    sel = SelectFromModel(RandomForestClassifier(n_jobs=<span class="number">-1</span>))</span><br><span class="line">    sel.fit(X_train, y_train)</span><br><span class="line">    features = X_train.columns[sel.get_support()]</span><br><span class="line">    print(<span class="string">f'%2d 重要特征数为：<span class="subst">&#123;len(features)&#125;</span>'</span> %i, end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>1 重要特征数为：26<br> 2 重要特征数为：30<br> 3 重要特征数为：24<br> 4 重要特征数为：34<br> 5 重要特征数为：42<br> 6 重要特征数为：32<br> 7 重要特征数为：40<br> 8 重要特征数为：34<br> 9 重要特征数为：21<br>10 重要特征数为：25<br>11 重要特征数为：41<br>12 重要特征数为：29<br>13 重要特征数为：26<br>14 重要特征数为：32<br>15 重要特征数为：30<br>16 重要特征数为：37<br>17 重要特征数为：21<br>18 重要特征数为：27</p><p>还是选择25个作为特征重要度筛选</p><p><img src="https://images.ali213.net/picfile/pic/2013/11/10/927_20131110120357350.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全部特征的提取和标签处理&quot;&gt;&lt;a href=&quot;#全部特征的提取和标签处理&quot; class=&quot;headerlink&quot; title=&quot;全部特征的提取和标签处理&quot;&gt;&lt;/a&gt;全部特征的提取和标签处理&lt;/h1&gt;&lt;p&gt;提取5分钟片段的特征，并进行滑窗切片，以30s为窗口，5mi
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>hexo相关学习</title>
    <link href="https://esyyes.github.io/2020/06/10/hexo/hexo%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2020/06/10/hexo/hexo%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-06-10T06:45:26.000Z</published>
    <updated>2020-06-10T06:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo相关学习"><a href="#hexo相关学习" class="headerlink" title="hexo相关学习"></a>hexo相关学习</h1><p>hexo -主题切换</p><p><a href="https://github.com/ZEROKISEKI/hexo-theme-gal" target="_blank" rel="noopener">https://github.com/ZEROKISEKI/hexo-theme-gal</a></p><p>看中了gal这个主题</p><p>下载放入themes文件夹下,更名为gai</p><p>hexo s,查看效果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo相关学习&quot;&gt;&lt;a href=&quot;#hexo相关学习&quot; class=&quot;headerlink&quot; title=&quot;hexo相关学习&quot;&gt;&lt;/a&gt;hexo相关学习&lt;/h1&gt;&lt;p&gt;hexo -主题切换&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://esyyes.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://esyyes.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-无法登陆github</title>
    <link href="https://esyyes.github.io/2020/06/10/hexo/hexo-%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86github/"/>
    <id>https://esyyes.github.io/2020/06/10/hexo/hexo-%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86github/</id>
    <published>2020-06-10T01:16:51.000Z</published>
    <updated>2020-06-10T01:16:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-无法登陆github"><a href="#hexo-无法登陆github" class="headerlink" title="hexo-无法登陆github"></a>hexo-无法登陆github</h1><h2 id="Typora进入全屏模式"><a href="#Typora进入全屏模式" class="headerlink" title="Typora进入全屏模式"></a>Typora进入全屏模式</h2><p>按F11进入和退出</p><h2 id="hexo无法上传博客"><a href="#hexo无法上传博客" class="headerlink" title="hexo无法上传博客"></a>hexo无法上传博客</h2><h3 id="github无法访问"><a href="#github无法访问" class="headerlink" title="github无法访问"></a>github无法访问</h3><p>主要修改host文件，去访问IP</p><p>直接C盘输入</p><p>C:\Windows\System32\drivers\etc</p><p>找hosts文件</p><p>检测DNS所在地的IP</p><p><a href="http://tool.chinaz.com/dns?type=1&amp;host=github.com&amp;ip=" target="_blank" rel="noopener">http://tool.chinaz.com/dns?type=1&amp;host=github.com&amp;ip=</a></p><p>在hosts文件中输入ip响应的ip地址加github.com</p><p>192.30.253.112 github.com</p><p>13.229.188.59 github.com</p><p>140.82.114.4 github.com</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591762523205&di=6c4080b0a13a65b3044518782d4ba91b&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3D0767ae5574094b36db921be593cd7c00%2F869a3d87e950352af09675825143fbf2b3118b2a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo-无法登陆github&quot;&gt;&lt;a href=&quot;#hexo-无法登陆github&quot; class=&quot;headerlink&quot; title=&quot;hexo-无法登陆github&quot;&gt;&lt;/a&gt;hexo-无法登陆github&lt;/h1&gt;&lt;h2 id=&quot;Typora进入全屏模式&quot;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://esyyes.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://esyyes.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据预处理</title>
    <link href="https://esyyes.github.io/2020/06/09/sleep%20apnea%20and%20sleep%20stage/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/06/09/sleep%20apnea%20and%20sleep%20stage/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</id>
    <published>2020-06-09T02:48:46.000Z</published>
    <updated>2020-06-09T02:48:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>对特征数据进行预处理，首先进行缺省值插补，然后再进行标准化</p><h2 id="缺省值插补"><a href="#缺省值插补" class="headerlink" title="缺省值插补"></a>缺省值插补</h2><p>首先将inf数据转换为nan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将inf数据转换为nan</span></span><br><span class="line">df = data.replace([np.inf, -np.inf], np.nan)</span><br></pre></td></tr></table></figure><p>pd直接将空格转换为nan所以只需要将nan转换为均值中值等就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每一列缺失值的数量</span></span><br><span class="line">num = df.isnull().sum()</span><br></pre></td></tr></table></figure><p>采用均值插补</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)):</span><br><span class="line">    <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 就需要进行均值填充</span></span><br><span class="line">        values = df[df.keys()[i]].mean()</span><br><span class="line">        df[df.keys()[i]].fillna(value=values, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每一列数据量和数据类型</span></span><br><span class="line"><span class="comment"># df.info()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def fillna(</span></span><br><span class="line"><span class="comment">#         self,</span></span><br><span class="line"><span class="comment">#         value=None,</span></span><br><span class="line"><span class="comment">#         method=None,</span></span><br><span class="line"><span class="comment">#         axis=None,</span></span><br><span class="line"><span class="comment">#         inplace=False,</span></span><br><span class="line"><span class="comment">#         limit=None,</span></span><br><span class="line"><span class="comment">#         downcast=None,</span></span><br><span class="line"><span class="comment">#         **kwargs</span></span><br><span class="line"><span class="comment">#     ):</span></span><br><span class="line"><span class="comment">#         return super().fillna(</span></span><br><span class="line"><span class="comment">#             value=value,</span></span><br><span class="line"><span class="comment">#             method=method,</span></span><br><span class="line"><span class="comment">#             axis=axis,</span></span><br><span class="line"><span class="comment">#             inplace=inplace,</span></span><br><span class="line"><span class="comment">#             limit=limit,</span></span><br><span class="line"><span class="comment">#             downcast=downcast,</span></span><br><span class="line"><span class="comment">#             **kwargs</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://blog.csdn.net/qq_43542339/article/details/105098235?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(value = 30，inplace=True)</span></span><br><span class="line"><span class="comment"># # value = 30，用30填补空值</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].mean() 均值填充</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].median() 中位数填充</span></span><br><span class="line"><span class="comment"># # value = df.Mer_min_distance.mode()[0]  众数填充</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(method = 'pad',inplace=True)</span></span><br><span class="line"><span class="comment"># method参数取值：&#123;‘pad’, ‘ffill’,‘backfill’, ‘bfill’, None&#125;，使用过程中因为对ipad很熟悉，故常常用 'pad’填充</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ‘pad’ or ‘ffill’ : 用前一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘backfill’ or ‘bfill’：用后一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘None’ or default : 默认采用固定值填充</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将缺省值值替换为nan</span></span><br><span class="line"><span class="comment"># 转换和均值，需要一个数据来进行参考，没办法直接进行运行，所以还是采用fillna进行</span></span><br><span class="line"><span class="comment"># imp = SimpleImputer(missing_values=np.nan, strategy='mean')</span></span><br><span class="line"><span class="comment"># data = imp.fit(df)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/9</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">对inf,nan数据采用均值插补</span></span><br><span class="line"><span class="string">缺省值插补，然后再进行z-score</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 缺失值插补</span></span><br><span class="line"><span class="comment"># from sklearn.impute import SimpleImputer</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">feature = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/features_data'</span> + <span class="string">'/slp'</span> + <span class="string">'%s'</span> % <span class="number">1</span> + <span class="string">'.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺省值插补，采用均值插补</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.数据中有inf数据，将其转换为nan,然后用均值插补</span></span><br><span class="line"><span class="string">2.将nan和遗失数据用均值插补</span></span><br><span class="line"><span class="string"># 缺失值插补，用这个库</span></span><br><span class="line"><span class="string">from sklearn.impute import SimpleImputer</span></span><br><span class="line"><span class="string">SimpleImputer(add_indicator=False, copy=True, fill_value=None,</span></span><br><span class="line"><span class="string">              missing_values=nan, strategy='mean', verbose=0)</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">missing_values=nan可以用自己想要的填充  </span></span><br><span class="line"><span class="string">strategy='mean'    缺省值插补填充的内容：mean  median, most_frequent</span></span><br><span class="line"><span class="string">数据是连续型，用均值填充</span></span><br><span class="line"><span class="string">数据是分类型，用纵数填充</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用ctrl+tab再点击函数查看函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">预处理方法：</span></span><br><span class="line"><span class="string">https://blog.csdn.net/Bryan__/article/details/51228971</span></span><br><span class="line"><span class="string">https://blog.csdn.net/luanpeng825485697/article/details/79845629?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># Series和DataFrame都会自动把None转换成NaN 然后 运算的时候会把NaN当成0,直接进行了填充，然后首先将inf转换为nan就行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将inf数据转换为nan</span></span><br><span class="line">df = data.replace([np.inf, -np.inf], np.nan)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他意见自动填充为nan，空格缺省直接填充nan</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用fillna直接进行填充</span></span><br><span class="line"><span class="comment"># data.fillna()</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(value = 30，inplace=True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># df.fillna(value=, axis=1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每一列缺失值的数量</span></span><br><span class="line">num = df.isnull().sum()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)):</span><br><span class="line">    <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 就需要进行均值填充</span></span><br><span class="line">        values = df[df.keys()[i]].mean()</span><br><span class="line">        df[df.keys()[i]].fillna(value=values, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># z-score标准化</span></span><br><span class="line">std = preprocessing.scale(df)</span><br><span class="line">print(<span class="string">f'均值为：<span class="subst">&#123;std.mean()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'标准差为：<span class="subst">&#123;std.std()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列均值为：<span class="subst">&#123;std.mean(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列标准差为：<span class="subst">&#123;std.std(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每一列数据量和数据类型</span></span><br><span class="line"><span class="comment"># df.info()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def fillna(</span></span><br><span class="line"><span class="comment">#         self,</span></span><br><span class="line"><span class="comment">#         value=None,</span></span><br><span class="line"><span class="comment">#         method=None,</span></span><br><span class="line"><span class="comment">#         axis=None,</span></span><br><span class="line"><span class="comment">#         inplace=False,</span></span><br><span class="line"><span class="comment">#         limit=None,</span></span><br><span class="line"><span class="comment">#         downcast=None,</span></span><br><span class="line"><span class="comment">#         **kwargs</span></span><br><span class="line"><span class="comment">#     ):</span></span><br><span class="line"><span class="comment">#         return super().fillna(</span></span><br><span class="line"><span class="comment">#             value=value,</span></span><br><span class="line"><span class="comment">#             method=method,</span></span><br><span class="line"><span class="comment">#             axis=axis,</span></span><br><span class="line"><span class="comment">#             inplace=inplace,</span></span><br><span class="line"><span class="comment">#             limit=limit,</span></span><br><span class="line"><span class="comment">#             downcast=downcast,</span></span><br><span class="line"><span class="comment">#             **kwargs</span></span><br><span class="line"><span class="comment">#         )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://blog.csdn.net/qq_43542339/article/details/105098235?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(value = 30，inplace=True)</span></span><br><span class="line"><span class="comment"># # value = 30，用30填补空值</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].mean() 均值填充</span></span><br><span class="line"><span class="comment"># # value = df['列名1'].median() 中位数填充</span></span><br><span class="line"><span class="comment"># # value = df.Mer_min_distance.mode()[0]  众数填充</span></span><br><span class="line"><span class="comment"># df['列名1'].fillna(method = 'pad',inplace=True)</span></span><br><span class="line"><span class="comment"># method参数取值：&#123;‘pad’, ‘ffill’,‘backfill’, ‘bfill’, None&#125;，使用过程中因为对ipad很熟悉，故常常用 'pad’填充</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ‘pad’ or ‘ffill’ : 用前一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘backfill’ or ‘bfill’：用后一个非缺失值填充</span></span><br><span class="line"><span class="comment"># ‘None’ or default : 默认采用固定值填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将缺省值值替换为nan</span></span><br><span class="line"><span class="comment"># 转换和均值，需要一个数据来进行参考，没办法直接进行运行，所以还是采用fillna进行</span></span><br><span class="line"><span class="comment"># imp = SimpleImputer(missing_values=np.nan, strategy='mean')</span></span><br><span class="line"><span class="comment"># data = imp.fit(df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 正则化，标准化</span></span><br></pre></td></tr></table></figure><h2 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># z-score标准化</span></span><br><span class="line">std = preprocessing.scale(df)</span><br><span class="line">print(<span class="string">f'均值为：<span class="subst">&#123;std.mean()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'标准差为：<span class="subst">&#123;std.std()&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列均值为：<span class="subst">&#123;std.mean(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">f'列标准差为：<span class="subst">&#123;std.std(axis=<span class="number">0</span>)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h2 id="函数形式版"><a href="#函数形式版" class="headerlink" title="函数形式版"></a>函数形式版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/9</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">均值插补缺省值</span></span><br><span class="line"><span class="string">z-score标准化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_pre</span><span class="params">(data)</span>:</span></span><br><span class="line">    df = data.replace([np.inf, -np.inf], np.nan)</span><br><span class="line">    num = df.isnull().sum()</span><br><span class="line">    [df[df.keys()[i]].fillna(value=df[df.keys()[i]].mean(), inplace=<span class="literal">True</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)) <span class="keyword">if</span> num[i] &gt; <span class="number">0</span>]</span><br><span class="line">    df_scale = preprocessing.scale(df)</span><br><span class="line">    <span class="keyword">return</span> df_scale</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591682503590&di=e3acfbf739408b7c159ea65b9d13b665&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2018-05-30%2F5b0e3790a3f13.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据预处理&quot;&gt;&lt;a href=&quot;#数据预处理&quot; class=&quot;headerlink&quot; title=&quot;数据预处理&quot;&gt;&lt;/a&gt;数据预处理&lt;/h1&gt;&lt;p&gt;对特征数据进行预处理，首先进行缺省值插补，然后再进行标准化&lt;/p&gt;
&lt;h2 id=&quot;缺省值插补&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>标签和特征长度处理</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/%E6%A0%87%E7%AD%BE%E5%92%8C%E7%89%B9%E5%BE%81%E9%95%BF%E5%BA%A6%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/%E6%A0%87%E7%AD%BE%E5%92%8C%E7%89%B9%E5%BE%81%E9%95%BF%E5%BA%A6%E5%A4%84%E7%90%86/</id>
    <published>2020-06-08T11:16:50.000Z</published>
    <updated>2020-06-08T11:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签和特征长度处理"><a href="#标签和特征长度处理" class="headerlink" title="标签和特征长度处理"></a>标签和特征长度处理</h1><p>在进行机器学习之前需要查看标签和特征的长度，判断是否相等，数据比标签少30s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">判断：</span></span><br><span class="line"><span class="string">读取注释和特征查看长度是否相等</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">19</span>):</span><br><span class="line">    feature = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/features_data'</span> + <span class="string">'/slp'</span> + <span class="string">'%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    data = pd.get_dummies(feature.iloc[<span class="number">0</span>:len(feature), <span class="number">1</span>:])</span><br><span class="line">    note = pd.read_excel(<span class="string">'F:/py/python-ECG信号处理/note_data'</span> + <span class="string">'/%s'</span> % i + <span class="string">'.xlsx'</span>)</span><br><span class="line">    tag = pd.get_dummies(note.iloc[<span class="number">0</span>:len(note)<span class="number">-1</span>, <span class="number">-1</span>:])</span><br><span class="line">    <span class="keyword">if</span> len(data) == len(tag):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'数据slp<span class="subst">&#123;i&#125;</span>不相等'</span>)</span><br><span class="line">        print(<span class="string">f'特征长度<span class="subst">&#123;len(data)&#125;</span>, 标签长度‘<span class="subst">&#123;len(tag)&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">f'检测完毕'</span>)</span><br></pre></td></tr></table></figure><h2 id="检测结果"><a href="#检测结果" class="headerlink" title="检测结果"></a>检测结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数据slp5不相等特征长度<span class="number">700</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp7不相等特征长度<span class="number">719</span>标签长度<span class="number">713</span></span><br><span class="line">数据slp8不相等特征长度<span class="number">719</span>标签长度<span class="number">693</span></span><br><span class="line">数据slp10不相等特征长度<span class="number">699</span>标签长度<span class="number">697</span></span><br><span class="line">数据slp14不相等特征长度<span class="number">479</span>标签长度<span class="number">457</span></span><br><span class="line">数据slp15不相等特征长度<span class="number">699</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp16不相等特征长度<span class="number">739</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp17不相等特征长度<span class="number">439</span>标签长度<span class="number">438</span></span><br><span class="line">检测完毕</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>slp5和slp15为slp03和slp60，只清除了AHI标签，没有清理睡眠标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line"><span class="comment"># test = input("请输入想读取的文件名： ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test = 'slp03'</span></span><br><span class="line">test = <span class="string">'slp60'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">            tag1.append(<span class="number">1</span>)</span><br><span class="line">            tag2.append(<span class="number">1</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">            tag1.append(<span class="number">2</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">            tag1.append(<span class="number">3</span>)</span><br><span class="line">            tag2.append(<span class="number">2</span>)</span><br><span class="line">            tag3.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">            tag1.append(<span class="number">4</span>)</span><br><span class="line">            tag2.append(<span class="number">3</span>)</span><br><span class="line">            tag3.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag1.append(<span class="number">5</span>)</span><br><span class="line">            tag2.append(<span class="number">4</span>)</span><br><span class="line">            tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="comment"># slp03</span></span><br><span class="line">    <span class="comment"># if 174 &lt; i &lt; 194:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:</span><br><span class="line">        <span class="comment"># slp60</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">                tag4.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tag4.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line">label4 = pd.DataFrame(tag4, columns=[<span class="string">'AHI'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3, label4], axis=<span class="number">1</span>)</span><br><span class="line">num = int(input(<span class="string">"输入保存的文件名： "</span>))</span><br><span class="line">label.to_excel(<span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><h2 id="再次检测"><a href="#再次检测" class="headerlink" title="再次检测"></a>再次检测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据slp7不相等特征长度<span class="number">719</span>标签长度<span class="number">713</span></span><br><span class="line">数据slp8不相等特征长度<span class="number">719</span>标签长度<span class="number">693</span></span><br><span class="line">数据slp10不相等特征长度<span class="number">699</span>标签长度<span class="number">697</span></span><br><span class="line">数据slp14不相等特征长度<span class="number">479</span>标签长度<span class="number">457</span></span><br><span class="line">数据slp16不相等特征长度<span class="number">739</span>标签长度<span class="number">719</span></span><br><span class="line">数据slp17不相等特征长度<span class="number">439</span>标签长度<span class="number">438</span></span><br><span class="line">检测完毕</span><br></pre></td></tr></table></figure><h2 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h2><p>slp7即为slp14</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line"><span class="comment"># test = input("请输入想读取的文件名： ")</span></span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp14'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line">sample_min = annotation.sample.min()</span><br><span class="line">sample_max = annotation.sample.max()</span><br><span class="line">print(<span class="string">f'起始位置为<span class="subst">&#123;sample_min&#125;</span>, 终止位置为<span class="subst">&#123;sample_max&#125;</span>'</span>)</span><br><span class="line">起始位置为<span class="number">45000</span>, 终止位置为<span class="number">5392500</span></span><br></pre></td></tr></table></figure><p>slp8:slp16</p><p>起始位置为195000, 终止位置为5392500</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(<span class="number">195000</span>/record.fs/<span class="number">30</span>), int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br></pre></td></tr></table></figure><p>slp10:slp37</p><p>数据slp10不相等    特征长度699    标签长度697</p><p>起始位置为15000, 终止位置为5242500</p><p>slp14:slp59</p><p>起始位置为165000, 终止位置为3592500</p><p>slp16:slp61</p><p>数据slp16不相等    特征长度739    标签长度719</p><p>起始位置为150000, 终止位置为5542500</p><p>slp17:slp66</p><p>数据slp17不相等    特征长度439    标签长度438</p><p>起始位置为1, 终止位置为3285000</p><h2 id="数据检测完毕"><a href="#数据检测完毕" class="headerlink" title="数据检测完毕"></a>数据检测完毕</h2><p>以后5分钟的数据片段还是要经过这个处理，标签缺失</p><p><img src="http://img3.a0bi.com/upload/ttq/20150716/1437008701869.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标签和特征长度处理&quot;&gt;&lt;a href=&quot;#标签和特征长度处理&quot; class=&quot;headerlink&quot; title=&quot;标签和特征长度处理&quot;&gt;&lt;/a&gt;标签和特征长度处理&lt;/h1&gt;&lt;p&gt;在进行机器学习之前需要查看标签和特征的长度，判断是否相等，数据比标签少30s&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>HRV的30s特征提取</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/HRV%E7%9A%8430s%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/HRV%E7%9A%8430s%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</id>
    <published>2020-06-08T09:50:09.000Z</published>
    <updated>2020-06-08T09:50:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HRV的30s特征提取"><a href="#HRV的30s特征提取" class="headerlink" title="HRV的30s特征提取"></a>HRV的30s特征提取</h1><p> slp03和slp60数据中有一段数据遗失了ecg——r,</p><p>slp03消除174-194之间的数据</p><p>slp60消除538 &lt; i &lt; 549之间的数据</p><p> 标签这一部分全是w，可以删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/2</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slp60数据到时需要加0.7或者其他左右，没有经过预处理后，就不会出现复数，所以peaks中就不需要abs，加起也好</span></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> peaks_time_features <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> frequency_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> HRV_interp1 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> nonliner_domain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> eliminate_outliers <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line">test = input(<span class="string">'请输入文件名：'</span>)</span><br><span class="line"><span class="comment"># test = 'slp03'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line"></span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line">ecg_r_locs1 = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs, search_radius=search_radius,</span><br><span class="line">                                       smooth_window_size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ecg_r_locs异常点处理</span></span><br><span class="line">ecg_r_locs = eliminate(ecg_r_locs1)</span><br><span class="line"><span class="comment"># ecg_r_peaks峰值点获取</span></span><br><span class="line">ecg_r_peaks = [ecg_signal[int(ecg_r_locs[i])][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ecg_r_locs))]</span><br><span class="line"></span><br><span class="line">all_RR_30s = []</span><br><span class="line">all_locs_30s = []</span><br><span class="line">all_peaks_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">    RR_30s = []</span><br><span class="line">    locs_30s = []</span><br><span class="line">    peaks_30s = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">1</span>)):</span><br><span class="line">            locs_30s.append(ecg_r_locs[j])</span><br><span class="line">            RR_30s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">            peaks_30s.append(ecg_r_peaks[j])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    RR_30s.pop()</span><br><span class="line">    all_RR_30s.append(RR_30s)</span><br><span class="line">    <span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br><span class="line">    all_locs_30s.append(locs_30s)</span><br><span class="line">    all_peaks_30s.append(peaks_30s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECG_R</span></span><br><span class="line">peaks_features = [peaks_time_feature(all_peaks_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_peaks_30s))]</span><br><span class="line"><span class="comment"># HRV</span></span><br><span class="line">hrv_time = [time_features(all_RR_30s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">hrv_freq = [getfreq(resample(hrv_interp1(all_locs_30s[i], all_RR_30s[i], <span class="number">1</span>), <span class="number">250</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">hrv_nonl = [non_linear(np.array(all_RR_30s[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line">features = [peaks_features[i] + hrv_time[i] + hrv_freq[i] + hrv_nonl[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_RR_30s))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为excel</span></span><br><span class="line">feature = pd.DataFrame(features, columns=[<span class="string">'p_max'</span>, <span class="string">'p_min'</span>, <span class="string">'p_mean'</span>, <span class="string">'p_median'</span>, <span class="string">'p_SDNN'</span>, <span class="string">'p_var'</span>,</span><br><span class="line">                                          <span class="string">'p_Peaks'</span>, <span class="string">'p_RMSSD'</span>, <span class="string">'p_kurt'</span>, <span class="string">'p_skew'</span>, <span class="string">'p_wave_factor'</span>,</span><br><span class="line">                                          <span class="string">'p_peak_factor'</span>, <span class="string">'p_Impulse_factor'</span>, <span class="string">'p_Margin_factor'</span>, <span class="string">'p_RMS'</span>,</span><br><span class="line">                                          <span class="string">'R_mean'</span>, <span class="string">'R_SDNN'</span>, <span class="string">'R_SDSD'</span>, <span class="string">'NN50'</span>, <span class="string">'pNN50'</span>, <span class="string">'NN20'</span>, <span class="string">'pNN20'</span>, <span class="string">'R_RMSSD'</span>,</span><br><span class="line">                                          <span class="string">'R_median'</span>, <span class="string">'R_NUM'</span>, <span class="string">'R_CVSD'</span>, <span class="string">'R_CV'</span>, <span class="string">'HR_mean'</span>, <span class="string">'HR_max'</span>, <span class="string">'HR_min'</span>, <span class="string">'HR_std'</span>,</span><br><span class="line">                                          <span class="string">'LF'</span>, <span class="string">'HF'</span>, <span class="string">'LF_HF'</span>, <span class="string">'LFnu'</span>, <span class="string">'HFnu'</span>, <span class="string">'total'</span>, <span class="string">' VLF'</span>, <span class="string">'sd1'</span>, <span class="string">'sd2'</span>, <span class="string">'sd2/sd1'</span>,</span><br><span class="line">                                          <span class="string">'csi10'</span>, <span class="string">'cvi'</span>, <span class="string">'Modified_CSI10'</span>, <span class="string">'apen'</span>, <span class="string">'spen'</span>, <span class="string">'lle'</span>, <span class="string">'sampen'</span>])</span><br><span class="line">num = int(input(<span class="string">'请输入特征的名字:'</span>))</span><br><span class="line">feature.to_excel(<span class="string">'slp'</span> + <span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">all_peaks_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:slp60</span><br><span class="line">        <span class="number">174</span><span class="number">-194</span> slp03</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RR_30s = []</span><br><span class="line">        locs_30s = []</span><br><span class="line">        peaks_30s = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">1</span>)):</span><br><span class="line">                locs_30s.append(ecg_r_locs[j])</span><br><span class="line">                RR_30s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">                peaks_30s.append(ecg_r_peaks[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        RR_30s.pop()</span><br><span class="line">        all_RR_30s.append(RR_30s)</span><br><span class="line">        <span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br><span class="line">        all_locs_30s.append(locs_30s)</span><br><span class="line">        all_peaks_30s.append(peaks_30s)</span><br></pre></td></tr></table></figure><h2 id="消除异常点"><a href="#消除异常点" class="headerlink" title="消除异常点"></a>消除异常点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># RR间期获取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RR_rr</span><span class="params">(locs1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [locs1[i+<span class="number">1</span>]-locs1[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(locs1) - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到19个RR间期的均值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MRR</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [np.mean(x[i:i+<span class="number">19</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">19</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消除过检</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Eliminate_check</span><span class="params">(locs1)</span>:</span></span><br><span class="line">    RR_lou = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    RR_locs_lou = []</span><br><span class="line">    RR = RR_rr(locs1)</span><br><span class="line">    mRR = MRR(RR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(RR)):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &lt; (<span class="number">0.55</span> * mRR[<span class="number">0</span>]):</span><br><span class="line">                RR2 = RR[i] + RR[i<span class="number">-1</span>]</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                RR_lou.pop(i - num)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                RR_locs_lou.pop(i - num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR2 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> i &gt; (len(RR) - <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> RR[i] &lt; (<span class="number">0.55</span> * mRR[len(mRR) - <span class="number">1</span>]):</span><br><span class="line">                RR2 = RR[i] + RR[i - <span class="number">1</span>]</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                RR_lou.pop(i - num)</span><br><span class="line">                RR_locs_lou.pop(i - num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR2 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &lt; (<span class="number">0.55</span> * mRR[i - <span class="number">10</span>]):</span><br><span class="line">                RR2 = RR[i] + RR[i - <span class="number">1</span>]</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line">                RR_lou.pop(i - num)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                RR_locs_lou.pop(i - num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR2 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        RR_lou.append(RR2)</span><br><span class="line">        RR_locs_lou.append(locs2)</span><br><span class="line">    RR_locs_lou.insert(<span class="number">0</span>, locs1[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> RR_locs_lou</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消除漏检</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Eliminate_LOW</span><span class="params">(locs)</span>:</span></span><br><span class="line">    locs1 = Eliminate_check(locs)</span><br><span class="line">    RR = RR_rr(locs1)</span><br><span class="line">    mRR = MRR(RR)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    RR_guo = []</span><br><span class="line">    RR_locs_guo = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(RR):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &gt; (<span class="number">1.55</span> * mRR[<span class="number">0</span>]):</span><br><span class="line">                m = int(round(RR[i] / mRR[<span class="number">0</span>]))</span><br><span class="line">                RR3 = RR[i] / m</span><br><span class="line">                RR_guo[(i + k):(i + k)] = (m - <span class="number">1</span>) * [RR3]</span><br><span class="line">                cs = []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">                    cs1 = locs1[i] + (j + <span class="number">1</span>) * RR3</span><br><span class="line">                    cs.append(cs1)</span><br><span class="line">                RR_locs_guo.extend(cs)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                k = k + m</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR3 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> i &gt; (len(RR) - <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> RR[i] &gt; (<span class="number">1.55</span> * mRR[len(mRR) - <span class="number">1</span>]):</span><br><span class="line">                m = int(round(RR[i] / mRR[len(mRR) - <span class="number">1</span>]))</span><br><span class="line">                RR3 = RR[i] / m</span><br><span class="line">                RR_guo[(i + k):(i + k)] = (m - <span class="number">1</span>) * [RR3]</span><br><span class="line">                cs = []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">                    cs1 = locs1[i] + (j + <span class="number">1</span>) * RR3</span><br><span class="line">                    cs.append(cs1)</span><br><span class="line">                RR_locs_guo.extend(cs)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                k = k + m</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR3 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> RR[i] &gt; (<span class="number">1.55</span> * mRR[i - <span class="number">10</span>]):</span><br><span class="line">                m = int(round(RR[i] / mRR[i]))</span><br><span class="line">                RR3 = RR[i] / m</span><br><span class="line">                RR_guo[(i + k):(i + k)] = (m - <span class="number">1</span>) * [RR3]</span><br><span class="line">                cs = []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">                    cs1 = locs1[i] + (j + <span class="number">1</span>) * RR3</span><br><span class="line">                    cs.append(cs1)</span><br><span class="line">                RR_locs_guo.extend(cs)</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">                k = k + m</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RR3 = RR[i]</span><br><span class="line">                locs2 = locs1[i + <span class="number">1</span>]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        RR_locs_guo.append(locs2)</span><br><span class="line">        RR_guo.append(RR3)</span><br><span class="line">    RR_locs_guo.insert(<span class="number">0</span>, locs1[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> RR_locs_guo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eliminate</span><span class="params">(locs1)</span>:</span></span><br><span class="line">    c = Eliminate_LOW(Eliminate_check(locs1))</span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h2 id="peaks的时域特征"><a href="#peaks的时域特征" class="headerlink" title="peaks的时域特征"></a>peaks的时域特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/3</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># R峰值的时域特征分析</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 裕度因子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">margin_factor</span><span class="params">(x)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">1</span>):</span><br><span class="line">        sum += math.sqrt(x[i])</span><br><span class="line">    mean = np.mean(sum)</span><br><span class="line">    <span class="keyword">return</span> mean**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差值均方根</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_RMSSD</span><span class="params">(x)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">1</span>):</span><br><span class="line">        sum += (x[i+<span class="number">1</span>] - x[i])**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(sum/(len(x) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均方根</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rms</span><span class="params">(x)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x) - <span class="number">1</span>):</span><br><span class="line">        sum += (x[i])**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(sum / (len(x)<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peaks_time_feature</span><span class="params">(f)</span>:</span></span><br><span class="line">    x = abs(np.array(f))</span><br><span class="line">    <span class="comment"># 最大值</span></span><br><span class="line">    p_max = x.max()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最小值</span></span><br><span class="line">    p_min = x.min()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 均值：</span></span><br><span class="line">    p_mean = x.mean()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中位数</span></span><br><span class="line">    p_median = np.median(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标准差</span></span><br><span class="line">    SDNN = x.std()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方差</span></span><br><span class="line">    p_var = x.var()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 峰峰值</span></span><br><span class="line">    p_peaks = p_max - p_min</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 差值均方根</span></span><br><span class="line">    RMSSD = get_RMSSD(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 峭度/峰度</span></span><br><span class="line">    p_kurt = stats.kurtosis(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 偏度</span></span><br><span class="line">    p_skew = stats.skew(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 波形因子</span></span><br><span class="line">    p_wave_factor = RMSSD / p_mean</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 峰值因子</span></span><br><span class="line">    p_peak_factor = p_peaks / RMSSD</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 脉冲因子</span></span><br><span class="line">    p_impulse_factor = p_peaks / p_mean</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裕度因子</span></span><br><span class="line">    p_margin_factor = p_peaks / margin_factor(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 均方根</span></span><br><span class="line">    p_RMS = get_rms(x)</span><br><span class="line"></span><br><span class="line">    list_time_features = [p_max, p_min, p_mean, p_median, SDNN, p_var, p_peaks, RMSSD, p_kurt, p_skew,</span><br><span class="line">                          p_wave_factor, p_peak_factor, p_impulse_factor, p_margin_factor, p_RMS]</span><br><span class="line">    <span class="keyword">return</span> list_time_features</span><br></pre></td></tr></table></figure><h2 id="HRV的时域特征"><a href="#HRV的时域特征" class="headerlink" title="HRV的时域特征"></a>HRV的时域特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrvanalysis <span class="keyword">import</span> get_time_domain_features</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_features</span><span class="params">(x)</span>:</span></span><br><span class="line">    A = get_time_domain_features(x)</span><br><span class="line">    RR_mean = A[<span class="string">'mean_nni'</span>]</span><br><span class="line">    SDNN = A[<span class="string">'sdnn'</span>]</span><br><span class="line">    SDSD = A[<span class="string">'sdsd'</span>]</span><br><span class="line">    NN50 = A[<span class="string">'nni_50'</span>]</span><br><span class="line">    PNN50 = A[<span class="string">'pnni_50'</span>]</span><br><span class="line">    NN20 = A[<span class="string">'nni_20'</span>]</span><br><span class="line">    PNN20 = A[<span class="string">'pnni_20'</span>]</span><br><span class="line">    RMSSD = A[<span class="string">'rmssd'</span>]</span><br><span class="line">    RR_median = A[<span class="string">'median_nni'</span>]</span><br><span class="line">    NUM = A[<span class="string">'range_nni'</span>]</span><br><span class="line">    CVSD = A[<span class="string">'cvsd'</span>]</span><br><span class="line">    RR_CV = A[<span class="string">'cvnni'</span>]</span><br><span class="line">    HR_mean = A[<span class="string">'mean_hr'</span>]</span><br><span class="line">    HR_max = A[<span class="string">'max_hr'</span>]</span><br><span class="line">    HR_min = A[<span class="string">'min_hr'</span>]</span><br><span class="line">    HR_std = A[<span class="string">'std_hr'</span>]</span><br><span class="line">    ALL = [RR_mean, SDNN, SDSD, NN50, PNN50, NN20, PNN20, RMSSD, RR_median, NUM, CVSD, RR_CV, HR_mean, HR_max,</span><br><span class="line">           HR_min, HR_std]</span><br><span class="line">    <span class="keyword">return</span> ALL</span><br></pre></td></tr></table></figure><h2 id="插值并重采样"><a href="#插值并重采样" class="headerlink" title="插值并重采样"></a>插值并重采样</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.interpolate <span class="keyword">as</span> spi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hrv_interp1</span><span class="params">(x, y, s)</span>:</span></span><br><span class="line">    x_new = np.linspace(x[<span class="number">0</span>], x[len(x) - <span class="number">1</span>], <span class="number">7500</span> * s)  <span class="comment"># 新的插值区间及其点的个数</span></span><br><span class="line">    ipo3 = spi.splrep(x, y, k=<span class="number">3</span>)  <span class="comment"># 样本点导入，生成参数</span></span><br><span class="line">    hrv_interpolation = spi.splev(x_new, ipo3)  <span class="comment"># 根据观测点和样条参数，生成插值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hrv_interpolation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重采样</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resample</span><span class="params">(input_signal, src_fs, tar_fs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param input_signal:输入信号</span></span><br><span class="line"><span class="string">    :param src_fs:输入信号采样率</span></span><br><span class="line"><span class="string">    :param tar_fs:输出信号采样率</span></span><br><span class="line"><span class="string">    :return:输出信号</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    dtype = input_signal.dtype</span><br><span class="line">    audio_len = len(input_signal)</span><br><span class="line">    audio_time_max = <span class="number">1.0</span> * audio_len / src_fs</span><br><span class="line">    src_time = <span class="number">1.0</span> * np.linspace(<span class="number">0</span>, audio_len, audio_len) / src_fs</span><br><span class="line">    tar_time = <span class="number">1.0</span> * np.linspace(<span class="number">0</span>, np.int(audio_time_max*tar_fs), np.int(audio_time_max*tar_fs)) / tar_fs</span><br><span class="line">    output_signal = np.interp(tar_time, src_time, input_signal).astype(dtype)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output_signal</span><br></pre></td></tr></table></figure><h2 id="HRV的频域特征"><a href="#HRV的频域特征" class="headerlink" title="HRV的频域特征"></a>HRV的频域特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrvanalysis <span class="keyword">import</span> get_frequency_domain_features</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfreq</span><span class="params">(x)</span>:</span></span><br><span class="line">    all = get_frequency_domain_features(x)</span><br><span class="line">    LF = all[<span class="string">'lf'</span>]</span><br><span class="line">    HF = all[<span class="string">'hf'</span>]</span><br><span class="line">    LF_HF = all[<span class="string">'lf_hf_ratio'</span>]</span><br><span class="line">    LFnu = all[<span class="string">'lfnu'</span>]</span><br><span class="line">    HFnu = all[<span class="string">'hfnu'</span>]</span><br><span class="line">    total = all[<span class="string">'total_power'</span>]</span><br><span class="line">    VLF = all[<span class="string">'vlf'</span>]</span><br><span class="line">    freqs = [LF, HF, LF_HF, LFnu, HFnu, total, VLF]</span><br><span class="line">    <span class="keyword">return</span> freqs</span><br></pre></td></tr></table></figure><h2 id="HRV的非线性特征"><a href="#HRV的非线性特征" class="headerlink" title="HRV的非线性特征"></a>HRV的非线性特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrvanalysis <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> non_features <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SD1</span><span class="params">(x)</span>:</span></span><br><span class="line">    sd = [x[i+<span class="number">1</span>] - x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)<span class="number">-1</span>)]</span><br><span class="line">    <span class="keyword">return</span> np.std(sd) / np.sqrt(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SD2</span><span class="params">(x)</span>:</span></span><br><span class="line">    sd = [x[i+<span class="number">1</span>] + x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)<span class="number">-1</span>)]</span><br><span class="line">    <span class="keyword">return</span> np.std(sd) / np.sqrt(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_linear5</span><span class="params">(x)</span>:</span></span><br><span class="line">    RR_sd1 = SD1(x)</span><br><span class="line">    RR_sd2 = SD2(x)</span><br><span class="line">    RR_csi10 = csi(x, <span class="number">10</span>)</span><br><span class="line">    RR_csi30 = csi(x, <span class="number">30</span>)</span><br><span class="line">    RR_csi50 = csi(x, <span class="number">50</span>)</span><br><span class="line">    RR_csi100 = csi(x, <span class="number">100</span>)</span><br><span class="line">    RR_cvi = get_csi_cvi_features(x)[<span class="string">'cvi'</span>]</span><br><span class="line">    Modified_CSI10 = Modified_csi(x, <span class="number">10</span>)</span><br><span class="line">    Modified_CSI30 = Modified_csi(x, <span class="number">30</span>)</span><br><span class="line">    Modified_CSI50 = Modified_csi(x, <span class="number">50</span>)</span><br><span class="line">    Modified_CSI100 = Modified_csi(x, <span class="number">100</span>)</span><br><span class="line">    RR_apen = apen(x, m=<span class="number">2</span>, r=<span class="number">0.6</span>)</span><br><span class="line">    RR_spen = spen(x)</span><br><span class="line">    A = get_sampen(x)</span><br><span class="line">    RR_sampen = A[<span class="string">'sampen'</span>]</span><br><span class="line">    RR_lle = lle(x)</span><br><span class="line">    ALL_5 = [RR_sd1, RR_sd2, RR_sd2/RR_sd1, RR_csi10, RR_csi30, RR_csi50, RR_csi100, RR_cvi, Modified_CSI10,</span><br><span class="line">             Modified_CSI30, Modified_CSI50, Modified_CSI100, RR_apen, RR_spen, RR_sampen, RR_lle]</span><br><span class="line">    <span class="keyword">return</span> ALL_5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_linear</span><span class="params">(x)</span>:</span></span><br><span class="line">    RR_sd1 = SD1(x)</span><br><span class="line">    RR_sd2 = SD2(x)</span><br><span class="line">    RR_csi10 = csi(x, <span class="number">10</span>)</span><br><span class="line">    RR_cvi = get_csi_cvi_features(x)[<span class="string">'cvi'</span>]</span><br><span class="line">    Modified_CSI10 = Modified_csi(x, <span class="number">10</span>)</span><br><span class="line">    RR_apen = apen(x, m=<span class="number">2</span>, r=<span class="number">0.6</span>)</span><br><span class="line">    RR_spen = spen(x)</span><br><span class="line">    RR_lle = lle(x)</span><br><span class="line">    RR_sampen = get_sampen(x)[<span class="string">'sampen'</span>]</span><br><span class="line">    ALL_30 = [RR_sd1, RR_sd2, RR_sd2/RR_sd1, RR_csi10, RR_cvi, Modified_CSI10, RR_apen, RR_spen, RR_lle, RR_sampen]</span><br><span class="line">    <span class="keyword">return</span> ALL_30</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/8</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Provides the non-linear functions for processing ECGs. Signals should be input</span></span><br><span class="line"><span class="string">as an np.array of R-R intervals. Arrays can be multi-dimensional as long as</span></span><br><span class="line"><span class="string">axis 1 moves through time (i.e. inputs should have shapes (n,) or (m, n)).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Includes function: csi (cardiac sympathatic index) apen (approximate entropy),</span></span><br><span class="line"><span class="string">spen (spectral entropy), lle (largest Lypunov exponent).</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.fftpack <span class="keyword">import</span> fft, ifft</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csi</span><span class="params">(intervals, num_points)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    From Geometry of the Poincare plot of RR intervals and its asymmetry in</span></span><br><span class="line"><span class="string">    healthy adults, J. Piskorski and P. Guzik; and A new method of assessing</span></span><br><span class="line"><span class="string">    cardiac autonomic function and its comparison with spectral analysis and</span></span><br><span class="line"><span class="string">    coefficient of variation of R--R interval, Motomi Toichi, Takeshi Sugiura</span></span><br><span class="line"><span class="string">    Toshiya Murai, and Akira Sengoku.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Cardiac Sympathetic Index (CSI). The poincare plot is method for visualizing</span></span><br><span class="line"><span class="string">    chaotic signals by plotting the peaks of a signal against the same peaks</span></span><br><span class="line"><span class="string">    delayed by one, for use with heart rate the peaks used are the R-R</span></span><br><span class="line"><span class="string">    intervals. This produces a ellipse aligned along the line x=y with major</span></span><br><span class="line"><span class="string">    and minor axes 4*SD2 and 4*SD1 respectively. The minor axis represents</span></span><br><span class="line"><span class="string">    variation between consecutive beats while the major axis represents</span></span><br><span class="line"><span class="string">    total beat difference. The CSI is given by SD2/SD1. Large CSI values</span></span><br><span class="line"><span class="string">    indicate relatively large inter-beat variation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        num_points (positive integer): The number of datapoints used to</span></span><br><span class="line"><span class="string">        calculate the CSI. Used as a window so the output will be of length</span></span><br><span class="line"><span class="string">        len(intervals) - num_points + 1.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    sd1, sd2 = _sd(intervals, num_points)</span><br><span class="line"></span><br><span class="line">    sd2[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    sd1[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    CSI = (sd2 / sd1).T</span><br><span class="line"><span class="comment">#     心交感指数CSI</span></span><br><span class="line"><span class="comment"># 庞加莱曲线图是一种将混沌信号可视化的方法，方法是将信号的峰值与延迟1的相同峰值相对照，用于心率。使用的峰值是R-R间隔。这会产生一个沿线x=y对齐的椭圆，长轴和短轴分别为4*sd2和4*sd1。短轴表示连续拍子之间的变化，而长轴表示总拍子差</span></span><br><span class="line"><span class="comment">#    找出最大的庞加莱曲线图</span></span><br><span class="line">    <span class="keyword">return</span> CSI.mean()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Modified_csi</span><span class="params">(intervals, num_points)</span>:</span></span><br><span class="line">    sd1, sd2 = _sd(intervals, num_points)</span><br><span class="line">    sd2[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    sd1[sd1 == <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    Modified_CSI = ((sd2 ** <span class="number">2</span>) / sd1).T</span><br><span class="line">    <span class="keyword">return</span> Modified_CSI.mean()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_sd</span><span class="params">(intervals, num_points)</span>:</span></span><br><span class="line">    axis = _function_dimension(intervals)</span><br><span class="line"></span><br><span class="line">    signal_length = intervals.shape[axis]</span><br><span class="line">    n = signal_length - num_points + <span class="number">1</span></span><br><span class="line">    indices = np.sum(np.mgrid[<span class="number">0</span>:n, <span class="number">0</span>:num_points], axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> axis == <span class="number">0</span>:</span><br><span class="line">        windowed_intervals = intervals[indices]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        windowed_intervals = intervals.swapaxes(<span class="number">0</span>, axis)[indices]</span><br><span class="line"></span><br><span class="line">    x = windowed_intervals[:<span class="number">-1</span>]</span><br><span class="line">    y = windowed_intervals[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_means</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        mean_x = x.mean(axis=<span class="number">1</span>)</span><br><span class="line">        mean_y = y.mean(axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>(mean_x, mean_y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_transpose</span><span class="params">(vals)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> axis == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> vals.T</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> vals.swapaxes(<span class="number">0</span>, axis)</span><br><span class="line"></span><br><span class="line">    mean_x, mean_y = _means(x, y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sd1</span><span class="params">()</span>:</span></span><br><span class="line">        mean = _transpose(np.array([mean_y - mean_x]))</span><br><span class="line"></span><br><span class="line">        sd1 = np.std((x - y) + mean, axis=<span class="number">1</span>) / (<span class="number">2.0</span> ** <span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">return</span> sd1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sd2</span><span class="params">()</span>:</span></span><br><span class="line">        mean = _transpose(np.array([mean_x + mean_y]))</span><br><span class="line"></span><br><span class="line">        sd2 = np.std((x + y) - mean, axis=<span class="number">1</span>) / (<span class="number">2.0</span> ** <span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">return</span> sd2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(_sd1(), _sd2())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apen</span><span class="params">(intervals, m=<span class="number">2</span>, r=<span class="number">0.6</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Approximate Entropy (ApEn) as described in "Physiological time-series</span></span><br><span class="line"><span class="string">    analysis what does regularity quantify?" by Steven M. Pingus And Ary L.</span></span><br><span class="line"><span class="string">    Goldberger.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Vector x_i contains the ith heart rate to the (i + m - 1)th heart rate.</span></span><br><span class="line"><span class="string">    The distance between two vectors, x_i and x_j, is greater than r if</span></span><br><span class="line"><span class="string">    abs(x_i[k] - x_j[k]) &gt; r for any k = 0 ... (m - 1). A pair of vectors</span></span><br><span class="line"><span class="string">    (or groups), x_i and x_j, are said to be close if the distance between them</span></span><br><span class="line"><span class="string">    is less than r. C_i is the number of close groups of length m + 1 divided</span></span><br><span class="line"><span class="string">    by the number of close groups of length m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Based on the definition of distance if the ith and jth group are close</span></span><br><span class="line"><span class="string">    when using length m + 1 then they must also be close when using a length of</span></span><br><span class="line"><span class="string">    only m. Therefore C is the probability heart rate i + m is close to heart</span></span><br><span class="line"><span class="string">    rate j + m given all m heart rates in groups i and j are also close.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ApEn = phi^(m+1)(r) - phi^m(r) where phi^m(r) is the average of natural</span></span><br><span class="line"><span class="string">    log C_i, for all i groups, calculated using a group size of m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        m (positive int): group lengths.</span></span><br><span class="line"><span class="string">        r (float): max distance between close groups.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    heart_rates = <span class="number">1</span> / intervals.astype(np.float32)</span><br><span class="line"></span><br><span class="line">    num_close_groups_m = _find_num_close_groups(heart_rates, m, r)</span><br><span class="line">    num_close_groups_m_plus_1 = _find_num_close_groups(heart_rates, m+<span class="number">1</span>, r)</span><br><span class="line">    num_close_groups_m_plus_2 = _find_num_close_groups(heart_rates, m+<span class="number">2</span>, r)</span><br><span class="line"></span><br><span class="line">    C_m = num_close_groups_m_plus_1 / num_close_groups_m[:<span class="number">-1</span>]</span><br><span class="line">    C_m_plus_1 = num_close_groups_m_plus_2 / num_close_groups_m_plus_1[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    phi = <span class="keyword">lambda</span> C: np.nanmean(np.log(C), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phi(C_m_plus_1) - phi(C_m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_num_close_groups</span><span class="params">(heart_rates, m, r)</span>:</span></span><br><span class="line">    dim = _function_dimension(heart_rates)</span><br><span class="line"></span><br><span class="line">    err_msg = <span class="string">'Group lengths must be smaller than the signal length'</span></span><br><span class="line">    <span class="keyword">assert</span> m &lt; heart_rates.shape[dim], err_msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dim == <span class="number">0</span>:</span><br><span class="line">        dist_mat = _one_dim_distance_matrix(heart_rates)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dist_mat = _multi_dim_distance_matrix(heart_rates)</span><br><span class="line"></span><br><span class="line">    far_vals = np.logical_or(np.greater(dist_mat, r), np.less(dist_mat, -r))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _sum_num_close_groups(far_vals, m).astype(np.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_function_dimension</span><span class="params">(x)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(x.shape) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_one_dim_distance_matrix</span><span class="params">(vals)</span>:</span></span><br><span class="line">    repeats = np.tile(vals, (vals.shape[<span class="number">0</span>], <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> repeats - repeats.T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_multi_dim_distance_matrix</span><span class="params">(vals)</span>:</span></span><br><span class="line">    vals = _rotate_and_repeat(vals)</span><br><span class="line">    <span class="keyword">return</span> vals - np.swapaxes(vals, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_rotate_and_repeat</span><span class="params">(vals)</span>:</span></span><br><span class="line">    vals = np.swapaxes(np.array([vals]), <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    size = vals.shape</span><br><span class="line">    new_size = (size[<span class="number">1</span>],) + size[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> np.broadcast_to(vals, new_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_sum_num_close_groups</span><span class="params">(group_dist_mat, m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sum(_is_group_close(group_dist_mat, m), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_group_close</span><span class="params">(far_vals, m)</span>:</span></span><br><span class="line">    close_groups = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> str_idx <span class="keyword">in</span> range(m):</span><br><span class="line">        end_idx = m - str_idx</span><br><span class="line">        close_groups += far_vals[str_idx:-end_idx, str_idx:-end_idx]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> close_groups == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spen</span><span class="params">(intervals)</span>:</span></span><br><span class="line">    <span class="string">""" Spectral Entropy (SpEn) is a measure of entropy based on the</span></span><br><span class="line"><span class="string">    probability mass distribution of the discreate Fourier transformation.</span></span><br><span class="line"><span class="string">    If a few frequencies dominate a signal the signal is predictable and</span></span><br><span class="line"><span class="string">    thus has a low entropy. SpEn uses log based 2 and can therefore be</span></span><br><span class="line"><span class="string">    interpreted as the min number of bits needed to encode the signals</span></span><br><span class="line"><span class="string">    power spectrum. Because of this length of the signal can affect the</span></span><br><span class="line"><span class="string">    outcome. """</span></span><br><span class="line"></span><br><span class="line">    axis = _function_dimension(intervals)</span><br><span class="line"></span><br><span class="line">    spectrum = np.abs(fft(intervals)) ** <span class="number">2</span></span><br><span class="line">    probs = spectrum / np.array([spectrum.sum(axis=axis)]).T</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> - np.sum(probs * np.log2(probs), axis=axis)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lle</span><span class="params">(intervals)</span>:</span></span><br><span class="line">    <span class="string">""" Largest Lypunov exponent (LLE) is a measure chaos within a signal.</span></span><br><span class="line"><span class="string">    If the LLE of a signal is positive the signal is determined to be chaotic.</span></span><br><span class="line"><span class="string">    The Lypunov exponent of each dimension represents how quickly two initially</span></span><br><span class="line"><span class="string">    close points move apart from one another.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This method of calculating the LLE is based on M. Rosenstein, J. Collins,</span></span><br><span class="line"><span class="string">    and C. De Luca's method from "A practical method for calculating largest</span></span><br><span class="line"><span class="string">    Lypunov exponents from small data sets".</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    dim = _function_dimension(intervals)</span><br><span class="line">    j = _calc_j_from_autocorr(intervals, dim)</span><br><span class="line">    <span class="keyword">return</span> j</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_calc_j_from_autocorr</span><span class="params">(intervals, axis)</span>:</span></span><br><span class="line"></span><br><span class="line">    Intervals = fft(intervals, axis=axis)</span><br><span class="line">    Corr = np.abs(Intervals ** <span class="number">2</span>)</span><br><span class="line">    corr = ifft(Corr, axis=axis).real</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> axis <span class="keyword">is</span> <span class="number">0</span>:</span><br><span class="line">        corr = corr[:int(len(corr) / <span class="number">2</span>)] / corr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        corr = corr[:, :corr.shape[<span class="number">1</span>] / <span class="number">2</span>] / np.array([corr[:, <span class="number">0</span>]]).T</span><br><span class="line"></span><br><span class="line">    diminish_factor = <span class="number">1</span> - <span class="number">1</span>/np.exp(<span class="number">1</span>)</span><br><span class="line">    lag_vals = np.abs(corr - diminish_factor)</span><br><span class="line">    min_val = np.argmin(lag_vals, axis=axis)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min_val</span><br></pre></td></tr></table></figure><p><img src="https://pic.wenwen.soso.com/p/20090717/20090717191255-665709535.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HRV的30s特征提取&quot;&gt;&lt;a href=&quot;#HRV的30s特征提取&quot; class=&quot;headerlink&quot; title=&quot;HRV的30s特征提取&quot;&gt;&lt;/a&gt;HRV的30s特征提取&lt;/h1&gt;&lt;p&gt; slp03和slp60数据中有一段数据遗失了ecg——r,&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>ECG_RR间期预处理</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG-RR%E9%97%B4%E6%9C%9F%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG-RR%E9%97%B4%E6%9C%9F%E9%A2%84%E5%A4%84%E7%90%86/</id>
    <published>2020-06-08T09:46:48.000Z</published>
    <updated>2020-06-08T09:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECG-RR间期预处理"><a href="#ECG-RR间期预处理" class="headerlink" title="ECG_RR间期预处理"></a>ECG_RR间期预处理</h1><p>还是要用矫正后的R进行读取，所以第一个点进行查看<br>用矫正后的R间期序列，第一个点，就直接按照标注结果进行标注，直接不要第一个点，<br>数据点很多，而且分析的时候，第一个30s并没有进行分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/2</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">还是要用矫正后的R进行读取，所以第一个点进行查看</span></span><br><span class="line"><span class="string">用矫正后的R间期序列，第一个点，就直接按照标注结果进行标注，直接不要第一个点，</span></span><br><span class="line"><span class="string">数据点很多，而且分析的时候，第一个30s并没有进行分析</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp01b'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取心电数据库的R峰值点</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Correct the peaks shifting them to local maxima</span></span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"><span class="comment"># Use the maximum possible bpm as the search radius,进行平滑校准到峰值点位置</span></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line"><span class="comment"># 进行矫正后的峰值点信号坐标，用这个来进行后续的分析，虽然RR间期没什么影响，但是峰值点的值有很大的影响</span></span><br><span class="line">ecg_r_locs = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs,</span><br><span class="line">                                      search_radius=search_radius, smooth_window_size=<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 峰值信号</span></span><br><span class="line">ecg_r_peaks = ecg_signal[ecg_r_locs].tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常点处理，感觉可以不写，毕竟写了会出现R峰值无法对应的现象，会报错，到时可以写这个步骤，但是，没必要在程序中书写</span></span><br><span class="line"><span class="comment"># 30s切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(record.sig_len/record.fs/30 - 1):</span></span><br><span class="line">RR_30s = []</span><br><span class="line">locs_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>*record.fs):</span><br><span class="line">    <span class="keyword">if</span> ecg_r_locs[i] &lt;= <span class="number">30</span>*record.fs:</span><br><span class="line">        locs_30s.append(ecg_r_locs[i])</span><br><span class="line">        RR_30s.append(ecg_r_locs[i+<span class="number">1</span>] - ecg_r_locs[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 删除RR间期的最后一个，i+1数据超出了范围</span></span><br><span class="line">RR_30s.pop()</span><br><span class="line"><span class="comment"># 删除locs对应的第一个坐标，因为是用后面的R峰值点的坐标去对应RR波形</span></span><br><span class="line"><span class="keyword">del</span> locs_30s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1 id="将30s的数据进行循环切片，然后进行输出为list"><a href="#将30s的数据进行循环切片，然后进行输出为list" class="headerlink" title="将30s的数据进行循环切片，然后进行输出为list"></a>将30s的数据进行循环切片，然后进行输出为list</h1><h1 id="30s的和5min的进行单独的分析，然后进行时频域和非线性的分析"><a href="#30s的和5min的进行单独的分析，然后进行时频域和非线性的分析" class="headerlink" title="30s的和5min的进行单独的分析，然后进行时频域和非线性的分析"></a>30s的和5min的进行单独的分析，然后进行时频域和非线性的分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/6/2</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将30s的数据进行循环切片，然后进行输出为list</span></span><br><span class="line"><span class="comment"># 30s的和5min的进行单独的分析，然后进行时频域和非线性的分析</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">from</span> wfdb <span class="keyword">import</span> processing</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">test = <span class="string">'slp01a'</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, channels=[<span class="number">0</span>])</span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'ecg'</span>)</span><br><span class="line">ecg_signal = record.p_signal</span><br><span class="line">ecg_locs = annotation.sample.tolist()</span><br><span class="line">ecg_locs.pop(<span class="number">0</span>)</span><br><span class="line">min_bpm = <span class="number">40</span></span><br><span class="line">max_bpm = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">search_radius = int(record.fs * <span class="number">60</span> / max_bpm)</span><br><span class="line">ecg_r_locs = processing.correct_peaks(ecg_signal[:, <span class="number">0</span>], peak_inds=ecg_locs,</span><br><span class="line">                                      search_radius=search_radius, smooth_window_size=<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 峰值信号</span></span><br><span class="line">ecg_r_peaks = ecg_signal[ecg_r_locs].tolist()</span><br><span class="line"></span><br><span class="line">all_RR_30s = []</span><br><span class="line">all_locs_30s = []</span><br><span class="line">all_peaks_30s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(record.sig_len/record.fs/<span class="number">30</span> - <span class="number">1</span>)):</span><br><span class="line">    RR_30s = []</span><br><span class="line">    locs_30s = []</span><br><span class="line">    peaks_30s = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ecg_r_locs)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">30</span>*record.fs*i) &lt;= ecg_r_locs[j] &lt;= (<span class="number">30</span>*record.fs*(i+<span class="number">1</span>)):</span><br><span class="line">            locs_30s.append(ecg_r_locs[j])</span><br><span class="line">            RR_30s.append((ecg_r_locs[j+<span class="number">1</span>] - ecg_r_locs[j]) * <span class="number">4</span>)</span><br><span class="line">            peaks_30s.append(ecg_r_peaks[j][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    RR_30s.pop()</span><br><span class="line">    all_RR_30s.append(RR_30s)</span><br><span class="line">    all_locs_30s.append(locs_30s)</span><br><span class="line">    all_peaks_30s.append(peaks_30s)</span><br></pre></td></tr></table></figure><p><img src="https://pic.wenwen.soso.com/p/20100306/20100306173003-1233891219.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ECG-RR间期预处理&quot;&gt;&lt;a href=&quot;#ECG-RR间期预处理&quot; class=&quot;headerlink&quot; title=&quot;ECG_RR间期预处理&quot;&gt;&lt;/a&gt;ECG_RR间期预处理&lt;/h1&gt;&lt;p&gt;还是要用矫正后的R进行读取，所以第一个点进行查看&lt;br&gt;用矫正后的R
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>ECG信号读取</title>
    <link href="https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG%E4%BF%A1%E5%8F%B7%E8%AF%BB%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/06/08/sleep%20apnea%20and%20sleep%20stage/ECG%E4%BF%A1%E5%8F%B7%E8%AF%BB%E5%8F%96/</id>
    <published>2020-06-08T09:42:03.000Z</published>
    <updated>2020-06-08T09:42:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECG信号读取"><a href="#ECG信号读取" class="headerlink" title="ECG信号读取"></a>ECG信号读取</h1><p>读取RR和st中的注释程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/29</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用wfdb读取ECG数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="comment"># 读取slp01a的数据，sampfrom：起始位置，sampto：结束位置，即可写做</span></span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata/slp02a', sampfrom=0, sampto=1500, channels=[0])</span></span><br><span class="line"><span class="comment"># 相当于已经把这个写成了一个类别，然后进行读取时，读取相关的属性就可以了。面向对象类别record.p_signal即为相关信号</span></span><br><span class="line"><span class="comment"># 读取注释文件</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata/slp14'</span>, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接读取注释的信息，然后进行判断即可，所以就可以不需要txt。直接用[][0]来进行判断睡眠分期</span></span><br><span class="line"><span class="comment"># 用【】【2】来判定是否是呼吸暂停</span></span><br><span class="line"><span class="comment"># aux[16][0]</span></span><br><span class="line"><span class="comment"># Out[13]: '1'</span></span><br><span class="line"><span class="comment"># aux[67][0]</span></span><br><span class="line"><span class="comment"># Out[14]: 'M'</span></span><br><span class="line"><span class="comment"># aux[63][3]</span></span><br><span class="line"><span class="comment"># Out[15]: 'A'</span></span><br><span class="line"><span class="comment"># aux[63][2]</span></span><br><span class="line"><span class="comment"># Out[16]: 'H'</span></span><br><span class="line"><span class="comment"># aux[55][2]</span></span><br></pre></td></tr></table></figure><h2 id="标签处理"><a href="#标签处理" class="headerlink" title="标签处理"></a>标签处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/31</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line">test = input(<span class="string">"请输入想读取的文件名： "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test = 'slp14'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">        tag1.append(<span class="number">1</span>)</span><br><span class="line">        tag2.append(<span class="number">1</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">        tag1.append(<span class="number">2</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        tag1.append(<span class="number">3</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">        tag1.append(<span class="number">4</span>)</span><br><span class="line">        tag2.append(<span class="number">3</span>)</span><br><span class="line">        tag3.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tag1.append(<span class="number">5</span>)</span><br><span class="line">        tag2.append(<span class="number">4</span>)</span><br><span class="line">        tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">        tag4.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">            tag4.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label4 = pd.DataFrame(tag4, columns=[<span class="string">'AHI'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3, label4], axis=<span class="number">1</span>)</span><br><span class="line">num = int(input(<span class="string">"输入保存的文件名： "</span>))</span><br><span class="line">label.to_excel(<span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line"><span class="comment"># slp30和60有数据缺失    </span></span><br><span class="line">    <span class="comment"># if 174 &lt; i &lt; 194: # slp03</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">538</span> &lt; i &lt; <span class="number">549</span>:</span><br><span class="line">        <span class="comment"># slp60</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">                tag4.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tag4.append(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="http://pic41.nipic.com/20140528/2215192_185119636131_2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ECG信号读取&quot;&gt;&lt;a href=&quot;#ECG信号读取&quot; class=&quot;headerlink&quot; title=&quot;ECG信号读取&quot;&gt;&lt;/a&gt;ECG信号读取&lt;/h1&gt;&lt;p&gt;读取RR和st中的注释程序&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
</feed>
