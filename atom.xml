<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESY</title>
  
  <subtitle>mengxin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://esyyes.github.io/"/>
  <updated>2020-05-31T07:43:01.000Z</updated>
  <id>https://esyyes.github.io/</id>
  
  <author>
    <name>esy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sleep apnea</title>
    <link href="https://esyyes.github.io/2020/05/31/sleep%20apnea%20and%20sleep%20stage/sleep-apnea/"/>
    <id>https://esyyes.github.io/2020/05/31/sleep%20apnea%20and%20sleep%20stage/sleep-apnea/</id>
    <published>2020-05-31T07:43:01.000Z</published>
    <updated>2020-05-31T07:43:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sleep-apnea"><a href="#sleep-apnea" class="headerlink" title="sleep apnea"></a>sleep apnea</h1><p>诊断OSAS时,对有鼻炎、打鼾、张口呼吸、睡时慢性咳嗽、睡眠不安等高危症状的儿童,应给予高度重视。根据北京儿童医院睡眠中心推荐的儿童OSAS诊断标准,<strong>呼吸暂停为呼吸停止≥5秒或2个呼吸周期、暂停指数AI≥1次/小时</strong>;低通气指口鼻气流振幅较基线(气流停止或下降之前至少2分钟或3个呼吸周期的平均呼吸幅度)下降50%或持续2个呼吸周期以上,伴血氧饱和度降低3%以上或觉醒;呼吸暂停低通气指数<strong>AHI≥5次/小时可诊断为儿童OSAS,该指数5<del>10为轻度,10</del>20为中度,20以上为重度</strong>。通过病史、临床表现、放射学检查以及多导睡眠检测等方法,诊断OSAS并不困难,但要注意与原发性<a href="https://baike.baidu.com/item/鼾症" target="_blank" rel="noopener">鼾症</a>鉴别诊断,后者无频繁觉醒,也无明确梗阻性睡眠呼吸暂停或气体交换异常。</p><p>成年人的睡眠呼吸暂停判定：</p><p>AHI(次数、小时)</p><p>轻度：AHI 5-14</p><p>中度： 15-29</p><p>重度： ≥30</p><p>直接根据AHI的平均值进行判定，只考虑AHI,OS这些全部判定为AHI。即可，直接先用这个特征进行提取，然后再考虑其他心电关于呼吸暂停的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/31</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取st文件</span></span><br><span class="line">test = input(<span class="string">"请输入想读取的文件名： "</span>)</span><br><span class="line">num = int(input(<span class="string">"输入保存的文件名： "</span>))</span><br><span class="line"><span class="comment"># test = 'slp14'</span></span><br><span class="line">annotation = wfdb.rdann(<span class="string">'F:/slpdb_data/mitdata'</span> + <span class="string">'/%s'</span> % test, <span class="string">'st'</span>)</span><br><span class="line">aux = annotation.aux_note</span><br><span class="line"><span class="comment"># record = wfdb.rdrecord('F:/slpdb_data/mitdata' + '/%s' % test, sampfrom=1222500, sampto=1237500, channels=[3])</span></span><br><span class="line"><span class="comment"># ecg_signal = record.p_signal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看低通气和osa阻塞性呼吸暂停的ecg信号取别</span></span><br><span class="line"><span class="comment"># 对标签进行处理。分为2个类别,就是正常和低通气。把osa判定为低通气</span></span><br><span class="line"></span><br><span class="line">tag1 = []</span><br><span class="line">tag2 = []</span><br><span class="line">tag3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> (aux[i][<span class="number">0</span>] == <span class="string">'4'</span>) <span class="keyword">or</span> (aux[i][<span class="number">0</span>] == <span class="string">'3'</span>):</span><br><span class="line">        tag1.append(<span class="number">1</span>)</span><br><span class="line">        tag2.append(<span class="number">1</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'2'</span>:</span><br><span class="line">        tag1.append(<span class="number">2</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        tag1.append(<span class="number">3</span>)</span><br><span class="line">        tag2.append(<span class="number">2</span>)</span><br><span class="line">        tag3.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> aux[i][<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">        tag1.append(<span class="number">4</span>)</span><br><span class="line">        tag2.append(<span class="number">3</span>)</span><br><span class="line">        tag3.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tag1.append(<span class="number">5</span>)</span><br><span class="line">        tag2.append(<span class="number">4</span>)</span><br><span class="line">        tag3.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即aux[i][2]:为低通气这些的判定，如果没有则认定为正常，有就进行判定</span></span><br><span class="line">tag4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(aux)):</span><br><span class="line">    <span class="keyword">if</span> len(aux[i]) == <span class="number">1</span> <span class="keyword">or</span> len(aux[i]) == <span class="number">2</span>:</span><br><span class="line">        tag4.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(aux[i]) &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (aux[i][<span class="number">2</span>] == <span class="string">'H'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'X'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'O'</span>) <span class="keyword">or</span> (aux[i][<span class="number">2</span>] == <span class="string">'C'</span>):</span><br><span class="line">            tag4.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tag4.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">label1 = pd.DataFrame(tag1, columns=[<span class="string">'N321RW'</span>])</span><br><span class="line">label2 = pd.DataFrame(tag2, columns=[<span class="string">'DLRW'</span>])</span><br><span class="line">label3 = pd.DataFrame(tag3, columns=[<span class="string">'NRW'</span>])</span><br><span class="line">label4 = pd.DataFrame(tag4, columns=[<span class="string">'AHI'</span>])</span><br><span class="line"></span><br><span class="line">label = pd.concat([label1, label2, label3, label4], axis=<span class="number">1</span>)</span><br><span class="line">label.to_excel(<span class="string">'%d'</span> % num + <span class="string">".xlsx"</span>)</span><br></pre></td></tr></table></figure><p>首先对标签进行处理，睡眠分为3大主题。低通气和正常分为一类。</p><p><img src="http://img2.a0bi.com/upload/ttq/20150310/1425992493369.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sleep-apnea&quot;&gt;&lt;a href=&quot;#sleep-apnea&quot; class=&quot;headerlink&quot; title=&quot;sleep apnea&quot;&gt;&lt;/a&gt;sleep apnea&lt;/h1&gt;&lt;p&gt;诊断OSAS时,对有鼻炎、打鼾、张口呼吸、睡时慢性咳嗽、睡眠不安等高
      
    
    </summary>
    
    
      <category term="work" scheme="https://esyyes.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://esyyes.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>面向对象版学员管理系统</title>
    <link href="https://esyyes.github.io/2020/05/28/python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%88%E5%AD%A6%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://esyyes.github.io/2020/05/28/python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%88%E5%AD%A6%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-05-28T11:58:57.000Z</published>
    <updated>2020-05-28T11:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象版学员管理系统"><a href="#面向对象版学员管理系统" class="headerlink" title="面向对象版学员管理系统"></a>面向对象版学员管理系统</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/27</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">## 3.1 student.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 学员信息包含：姓名、性别、手机号；</span></span><br><span class="line"><span class="string">- 添加`__str__`魔法方法，方便查看学员对象信息</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">1.生成学生这个类别</span></span><br><span class="line"><span class="string">2.这个类别中的属性有 姓名、性别、手机号</span></span><br><span class="line"><span class="string">3.可以用__str__这个来进行赋值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成学生这个类别</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化对象，设定对象带的属性，用__init__设置带类的对象的属性，self就是student</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, tel)</span>:</span></span><br><span class="line">        <span class="comment"># self.name就是带的小属性，name即可定义参数</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.tel = tel</span><br><span class="line">    <span class="comment"># def __str__(self):</span></span><br><span class="line">    <span class="comment"># 当使用print输出对象的时候，默认打印对象的内存地址。</span></span><br><span class="line">    <span class="comment"># 如果类定义了`__str__`方法，那么就会打印从在这个方法中 return 的数据。</span></span><br><span class="line">    <span class="comment"># 便于直接打印出内部的文件信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回的是要打印的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"学生姓名：<span class="subst">&#123;self.name&#125;</span>, 性别：<span class="subst">&#123;self.gender&#125;</span>, 手机号：<span class="subst">&#123;self.tel&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名时不能命名为类的名字</span></span><br><span class="line"><span class="comment"># student1 = student('zc', 'man', '111')</span></span><br><span class="line"><span class="comment"># print(student1)</span></span><br></pre></td></tr></table></figure><h2 id="生成管理系统这个类别："><a href="#生成管理系统这个类别：" class="headerlink" title="生成管理系统这个类别："></a>生成管理系统这个类别：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/28</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">import</span> student</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">##  ManagerSystem.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需求：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 存储数据的位置：文件(student.csv)</span></span><br><span class="line"><span class="string">  - 加载文件数据</span></span><br><span class="line"><span class="string">  - 修改数据后保存到文件</span></span><br><span class="line"><span class="string">- 存储数据的形式：列表存储学员对象</span></span><br><span class="line"><span class="string">- 系统功能</span></span><br><span class="line"><span class="string">  - 添加学员</span></span><br><span class="line"><span class="string">  - 删除学员</span></span><br><span class="line"><span class="string">  - 修改学员</span></span><br><span class="line"><span class="string">  - 查询学员信息</span></span><br><span class="line"><span class="string">  - 显示所有学员信息</span></span><br><span class="line"><span class="string">  - 保存学员信息</span></span><br><span class="line"><span class="string">  - 退出系统</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">需求：系统功能循环使用，用户输入不同的功能序号执行不同的功能。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 步骤</span></span><br><span class="line"><span class="string">  - 定义程序入口函数</span></span><br><span class="line"><span class="string">    - 加载数据</span></span><br><span class="line"><span class="string">    - 显示功能菜单</span></span><br><span class="line"><span class="string">    - 用户输入功能序号</span></span><br><span class="line"><span class="string">    - 根据用户输入的功能序号执行不同的功能</span></span><br><span class="line"><span class="string">  - 定义系统功能函数，添加、删除学员等</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">1. 加载data文件</span></span><br><span class="line"><span class="string">需要对文件进行修改和保存</span></span><br><span class="line"><span class="string">2. 修改数据后保存到文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MangerSystem</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 列表存储学员对象</span></span><br><span class="line">        self.student_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 程序开始运行，进入界面</span></span><br><span class="line">        <span class="comment"># 加载student.data文件</span></span><br><span class="line">        self.load_student()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># while True 语句中一定要有结束该循环的break语句，否则会一直循环下去的。</span></span><br><span class="line">        <span class="comment"># 这是一个死循环，所以每次循环后输入都要去显示页面</span></span><br><span class="line">        <span class="comment"># 采用while True循环语句：</span></span><br><span class="line">        <span class="comment"># 根据输入的功能序号进行判断，然后运行功能</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 显示界面的功能</span></span><br><span class="line">            self.show_menu()</span><br><span class="line">            <span class="comment"># 利用数字筛选系统的功能，供选择系统的功能，首先要确定你输入的数字是什么</span></span><br><span class="line">            <span class="comment"># 用int转换为整数形式，将这个功能赋值给菜单，然后用菜单里的内容进行比较，输入菜单的功能</span></span><br><span class="line">            menu_num = int(input(<span class="string">'请输入你需要的功能序号：'</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> menu_num == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 1- 添加学员</span></span><br><span class="line">                self.add_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># 2- 删除学员</span></span><br><span class="line">                self.del_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">3</span>:</span><br><span class="line">                <span class="comment"># 3 - 修改学员</span></span><br><span class="line">                self.modify_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># 4 - 查询学员信息</span></span><br><span class="line">                self.search_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># 5 - 显示所有学员信息</span></span><br><span class="line">                self.show_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">6</span>:</span><br><span class="line">                <span class="comment"># 6 - 保存学员信息</span></span><br><span class="line">                self.save_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">7</span>:</span><br><span class="line">                <span class="comment"># 7 - 退出系统</span></span><br><span class="line">                <span class="comment"># 跳出循环即可</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示菜单的功能，将对应序号表现出来，以供选择，静态的</span></span><br><span class="line">    <span class="comment"># 当方法中 **既不需要使用实例对象**(如实例对象，实例属性)，**也不需要使用类对象**</span></span><br><span class="line">    <span class="comment"># (如类属性、类方法、创建实例等)时，定义为静态方法</span></span><br><span class="line">    <span class="comment"># 用@staticmethod修饰</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_menu</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">f'请选择以下功能： '</span>)</span><br><span class="line">        print(<span class="string">f'1: 添加学员'</span>)</span><br><span class="line">        print(<span class="string">f'2: 删除学员'</span>)</span><br><span class="line">        print(<span class="string">f'3: 修改学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'4: 查询学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'5: 显示所有学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'6: 保存学员信息'</span>)</span><br><span class="line">        print(<span class="string">f'7: 退出系统'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取student中的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = open(<span class="string">'student.data'</span>, <span class="string">'r'</span>)</span><br><span class="line">            print(<span class="string">f'成功打开文件'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            f = open(<span class="string">'student.data'</span>, <span class="string">'w'</span>)</span><br><span class="line">            print(<span class="string">f'没有该文件'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = f.read()</span><br><span class="line">            data_list = eval(data)</span><br><span class="line">            <span class="comment"># 将学生的数据放入学生的类别中，student.py,参数写入student的属性('name', 'gender', 'tel')，将其赋值，并保存为list形式</span></span><br><span class="line">            <span class="comment"># 需要与student.py文件结合起来,需要导入那个文件中的student模块，类别</span></span><br><span class="line">            self.student_list = [student(i[<span class="string">'name'</span>], i[<span class="string">'gender'</span>], i[<span class="string">'tel'</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> data_list]</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1-添加学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入name gender tel</span></span><br><span class="line">        name = input(<span class="string">"请输入学员的姓名："</span>)</span><br><span class="line">        gender = input(<span class="string">"请输入学员的性别： "</span>)</span><br><span class="line">        tel = input(<span class="string">"请输入学员的电话号码： "</span>)</span><br><span class="line">        <span class="comment"># 将name gender tel放入student这个类别里面，作为一个字典，然后再叠加到student_list这个列表里面</span></span><br><span class="line">        student_in = student(name, gender, tel)</span><br><span class="line"></span><br><span class="line">        self.student_list.append(student_in)</span><br><span class="line">        <span class="comment"># 查看字典和列表</span></span><br><span class="line">        print(student_in)</span><br><span class="line">        print(self.student_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2-删除学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入你想删除学员的名字</span></span><br><span class="line">        del_name = input(<span class="string">"请输入你想删除的学员的名字： "</span>)</span><br><span class="line">        <span class="comment"># 查找这个学员的名字在哪,用循环遍历出这个学员的所在</span></span><br><span class="line">        <span class="comment"># 然后删除这个学员的name gender tel，即在list中直接移除这个字典</span></span><br><span class="line">        <span class="comment"># 遍历出的每个字典都是student_in = student(name, gender, tel)，所以这个字典中的名字即可为i.name</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> del_name == i.name:</span><br><span class="line">                self.student_list.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有这个名字就输出这个</span></span><br><span class="line">            print(<span class="string">'没有这个学员'</span>)</span><br><span class="line">        <span class="comment"># 再打印出这个列表的值</span></span><br><span class="line">        print(self.student_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3- 修改学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入你想修改的学员的名字,进行查找,然后修改里面的name,gender,tel</span></span><br><span class="line">        modify_name = input(<span class="string">"请输入你想修改的学员的名字： "</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> modify_name == i.name:</span><br><span class="line">                i.name = input(<span class="string">"姓名修改："</span>)</span><br><span class="line">                i.gender = input(<span class="string">"性别修改："</span>)</span><br><span class="line">                i.tel = input(<span class="string">"电话修改为："</span>)</span><br><span class="line">                print(<span class="string">f'学员信息修改完毕。 姓名为<span class="subst">&#123;i.name&#125;</span>, 性别为：<span class="subst">&#123;i.gender&#125;</span>, 电话为：<span class="subst">&#123;i.tel&#125;</span>'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有这个名字就输出这个</span></span><br><span class="line">            print(<span class="string">'没有这个学员'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4 - 查询学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入你想查询的学员的名字,进行查找</span></span><br><span class="line">        search_name = input(<span class="string">"请输入你想查找的的学员的名字： "</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> search_name == i.name:</span><br><span class="line">                print(<span class="string">f'姓名：<span class="subst">&#123;i.name&#125;</span>, 性别：<span class="subst">&#123;i.gender&#125;</span>, 电话：<span class="subst">&#123;i.tel&#125;</span>'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有这个名字就输出这个</span></span><br><span class="line">            print(<span class="string">'没有这个学员'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5- 显示所有学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 用表格的形式展示</span></span><br><span class="line">        <span class="comment"># 打印表头</span></span><br><span class="line">        print(<span class="string">f'姓名\t性别\t电话'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="comment"># 打印出表格内容</span></span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;i.name&#125;</span>\t<span class="subst">&#123;i.gender&#125;</span>\t<span class="subst">&#123;i.tel&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6- 保存学员信息</span></span><br><span class="line">    <span class="comment"># 即将学员的信息写入student.data文件中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        f = open(<span class="string">'student.data'</span>, <span class="string">'w'</span>)</span><br><span class="line">        <span class="comment"># 将student_list中的内容更改后写入程序</span></span><br><span class="line">        <span class="comment"># 写入的内容必须是字符串</span></span><br><span class="line">        <span class="comment"># 直接写入的列表将会是一个字符串形式，但是不会进行单排的分页，所以需要将它一个一个的展开</span></span><br><span class="line">        <span class="comment"># new_list = []</span></span><br><span class="line">        <span class="comment"># for i in self.student_list:</span></span><br><span class="line">        <span class="comment">#     new_list.append(i.__dict__)</span></span><br><span class="line">        new_list = [i.__dict__ <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list]</span><br><span class="line">        f.write(str(new_list))</span><br><span class="line"></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个符号的意思</span></span><br><span class="line"><span class="comment"># __dict__?直接调用类别中的那列的字典</span></span><br><span class="line"><span class="comment"># 1. 定义类</span></span><br><span class="line"><span class="comment"># class A(object):</span></span><br><span class="line"><span class="comment">#     a = 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def __init__(self):</span></span><br><span class="line"><span class="comment">#         self.b = 1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 2. 创建对象</span></span><br><span class="line"><span class="comment"># aa = A()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 3. 调用__dict__</span></span><br><span class="line"><span class="comment"># print(A.__dict__)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(aa.__dict__)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    # 用只读的形式打开文件</span></span><br><span class="line"><span class="string">    f = open('student.data', 'r')</span></span><br><span class="line"><span class="string">    print(f'文件夹中有该文件')</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    # 如果发生了异常，则在文件夹中创建一个新的文件，用w写入文件</span></span><br><span class="line"><span class="string">    f = open('student.data', 'w')</span></span><br><span class="line"><span class="string">    print(f'创建一个新的文件')</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    # 没有异常才执行的语句，try能够运行才执行的语句</span></span><br><span class="line"><span class="string">    # f.read()读取文件夹中的参数，内容</span></span><br><span class="line"><span class="string">    data = f.read()</span></span><br><span class="line"><span class="string">    # 查看data内的参数内容</span></span><br><span class="line"><span class="string">    print(type(data))</span></span><br><span class="line"><span class="string">    # '[&#123;'name': 'aaa', 'gender': 'nan', 'tel': '11111111'&#125;]'</span></span><br><span class="line"><span class="string">    # data是字符串形式，去除[]列表外的'',使用eval，转换为list</span></span><br><span class="line"><span class="string">    data_list = eval(data)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(f'将字符串&#123;type(data)&#125;转换为列表&#123;type(data_list)&#125;:&#123;data_list&#125;')</span></span><br><span class="line"><span class="string">    print(f'字典的key:&#123;data_list[0].keys()&#125;, 字典的values: &#123;data_list[0].values()&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    name = data_list[0]['name']</span></span><br><span class="line"><span class="string">    gender = data_list[0]['gender']</span></span><br><span class="line"><span class="string">    tel = data_list[0]['tel']</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">    # 不管成功与否，关闭文件夹</span></span><br><span class="line"><span class="string">    f.close()</span></span><br><span class="line"><span class="string">for i in data_list:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">    print(1)</span></span><br><span class="line"><span class="string">    self.student_list = [Student(i['name'], i['gender'], i['tel']) for i in new_list]</span></span><br><span class="line"><span class="string">    生成一个字典i: dict, &#123;'name': 'aaa', 'gender': 'nan', 'tel': '11111111'&#125;</span></span><br><span class="line"><span class="string">    i['name'] = value</span></span><br><span class="line"><span class="string">    # 然后将其赋值到student的属性里面</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="生成一个主程序进行运行"><a href="#生成一个主程序进行运行" class="headerlink" title="生成一个主程序进行运行"></a>生成一个主程序进行运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/28</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个主程序进行运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MangerSystem <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 已经在MangerSystem进行了调用</span></span><br><span class="line"><span class="comment"># from student import *</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启动管理系统</span></span><br><span class="line"><span class="comment"># 保证是当前文件运行才启动管理系统：if --创建对象并调用run方法</span></span><br><span class="line"><span class="comment"># 每个python模块（python文件，也就是此处的 test.py 和 import_test.py）都包含内置的变量</span></span><br><span class="line"><span class="comment"># __name__，当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；</span></span><br><span class="line"><span class="comment"># 如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）。</span></span><br><span class="line"><span class="comment"># 而 “__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == 'main' 结果为真。</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    student_manager = MangerSystem()</span><br><span class="line">    student_manager.run()</span><br></pre></td></tr></table></figure><h2 id="生成的界面："><a href="#生成的界面：" class="headerlink" title="生成的界面："></a>生成的界面：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">成功打开文件</span><br><span class="line">请选择以下功能： </span><br><span class="line"><span class="number">1</span>: 添加学员</span><br><span class="line"><span class="number">2</span>: 删除学员</span><br><span class="line"><span class="number">3</span>: 修改学员信息</span><br><span class="line"><span class="number">4</span>: 查询学员信息</span><br><span class="line"><span class="number">5</span>: 显示所有学员信息 不能进行<span class="keyword">break</span>,要不然会导致添加后跳出循环，无法查找到</span><br><span class="line"><span class="number">6</span>: 保存学员信息</span><br><span class="line"><span class="number">7</span>: 退出系统</span><br><span class="line">请输入你需要的功能序号：</span><br></pre></td></tr></table></figure><p><img src="https://pic.wenwen.soso.com/p/20111224/20111224100129-971797133.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象版学员管理系统&quot;&gt;&lt;a href=&quot;#面向对象版学员管理系统&quot; class=&quot;headerlink&quot; title=&quot;面向对象版学员管理系统&quot;&gt;&lt;/a&gt;面向对象版学员管理系统&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-入门复习之模块和包</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</id>
    <published>2020-05-26T10:43:10.000Z</published>
    <updated>2020-05-26T10:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-入门复习之模块和包"><a href="#python-入门复习之模块和包" class="headerlink" title="python-入门复习之模块和包"></a>python-入门复习之模块和包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">模块</span></span><br><span class="line"><span class="string">Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">模块能定义函数，类和变量，模块里也能包含可执行的代码。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  导入模块的方式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- import 模块名</span></span><br><span class="line"><span class="string">- from 模块名 import 功能名</span></span><br><span class="line"><span class="string">- from 模块名 import *</span></span><br><span class="line"><span class="string">- import 模块名 as 别名</span></span><br><span class="line"><span class="string">- from 模块名 import 功能名 as 别名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 1. 导入模块</span></span><br><span class="line"><span class="string">import 模块名</span></span><br><span class="line"><span class="string">import 模块名1, 模块名2...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2. 调用功能</span></span><br><span class="line"><span class="string">模块名.功能名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 1.1.2.2 from..import..</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from 模块名 import 功能1, 功能2, 功能3...</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 体验</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from math import sqrt</span></span><br><span class="line"><span class="string">print(sqrt(9))</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 1.1.2.3 from .. import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from 模块名 import *</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 体验</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">from math import *</span></span><br><span class="line"><span class="string">print(sqrt(9))</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 1.1.2.4 as定义别名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string"># 模块定义别名</span></span><br><span class="line"><span class="string">import 模块名 as 别名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 功能定义别名</span></span><br><span class="line"><span class="string">from 模块名 import 功能 as 别名</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 体验</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string"># 模块别名</span></span><br><span class="line"><span class="string">import time as tt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tt.sleep(2)</span></span><br><span class="line"><span class="string">print('hello')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 功能别名</span></span><br><span class="line"><span class="string">from time import sleep as sl</span></span><br><span class="line"><span class="string">sl(2)</span></span><br><span class="line"><span class="string">print('hello')</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为`__init__.py` 文件，那么这个文件夹就称之为包。</span></span><br><span class="line"><span class="string">## 2.1 制作包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：新建包后，包内部会自动创建`__init__.py`文件，这个文件控制着包的导入行为。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import</span></span><br><span class="line"><span class="string">包名.模块名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">包名.模块名.目标</span></span><br><span class="line"><span class="string">必须在`__init__.py`文件中添加`__all__ = []`，控制允许导入的模块列表。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 导入模块方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">import 模块名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from 模块名 import 目标</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from 模块名 import *</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 导入包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">import 包名.模块名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from 包名 import *</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- `__all__ = []` ：允许导入的模块或功能列表</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="https://i01piccdn.sogoucdn.com/2d90c1f579748784" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-入门复习之模块和包&quot;&gt;&lt;a href=&quot;#python-入门复习之模块和包&quot; class=&quot;headerlink&quot; title=&quot;python-入门复习之模块和包&quot;&gt;&lt;/a&gt;python-入门复习之模块和包&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-入门复习之异常</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8/</id>
    <published>2020-05-26T10:38:15.000Z</published>
    <updated>2020-05-26T10:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-入门复习之异常"><a href="#python-入门复习之异常" class="headerlink" title="python-入门复习之异常"></a>python-入门复习之异常</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的"异常"。</span></span><br><span class="line"><span class="string">异常的写法</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    可能发生错误的代码</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    如果出现异常执行的代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">捕获指定异常</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    可能发生错误的代码</span></span><br><span class="line"><span class="string">except 异常类型:</span></span><br><span class="line"><span class="string">    如果捕获到该异常类型执行的代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(num)</span></span><br><span class="line"><span class="string">except NameError:</span></span><br><span class="line"><span class="string">    print('有错误')</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</span></span><br><span class="line"><span class="string">2. 一般try下方只放一行尝试执行的代码。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(1/0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">except (NameError, ZeroDivisionError):</span></span><br><span class="line"><span class="string">    print('有错误')</span></span><br><span class="line"><span class="string">捕获异常描述信息</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(num)</span></span><br><span class="line"><span class="string">except (NameError, ZeroDivisionError) as result:</span></span><br><span class="line"><span class="string">    print(result)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">捕获所有异常</span></span><br><span class="line"><span class="string">Exception是所有程序异常类的父类。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(num)</span></span><br><span class="line"><span class="string">except Exception as result:</span></span><br><span class="line"><span class="string">    print(result)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">else表示的是如果没有异常要执行的代码。</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    print(1)</span></span><br><span class="line"><span class="string">except Exception as result:</span></span><br><span class="line"><span class="string">    print(result)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    print('我是else，是没有异常的时候执行的代码')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">finally表示的是无论是否异常都要执行的代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异常语法</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">  可能发生异常的代码</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">  如果出现异常执行的代码</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">  没有异常执行的代码</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">  无论是否异常都要执行的代码</span></span><br><span class="line"><span class="string">捕获异常</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">except 异常类型:</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">except 异常类型 as xx:</span></span><br><span class="line"><span class="string">代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">自定义异常</span></span><br><span class="line"><span class="string"># 1. 自定义异常类</span></span><br><span class="line"><span class="string">class 异常类类名(Exception):</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 设置抛出异常的描述信息</span></span><br><span class="line"><span class="string">    def __str__(self):</span></span><br><span class="line"><span class="string">      return ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2. 抛出异常</span></span><br><span class="line"><span class="string">raise 异常类名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 捕获异常</span></span><br><span class="line"><span class="string">except Exception...</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://i2.hdslb.com/bfs/archive/471e7d5ae35e9c08d40cff62982f9d6e1da9b456.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-入门复习之异常&quot;&gt;&lt;a href=&quot;#python-入门复习之异常&quot; class=&quot;headerlink&quot; title=&quot;python-入门复习之异常&quot;&gt;&lt;/a&gt;python-入门复习之异常&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-入门复习面向对象</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-05-26T08:45:05.000Z</published>
    <updated>2020-05-26T08:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-入门复习面向对象"><a href="#python-入门复习面向对象" class="headerlink" title="python-入门复习面向对象"></a>python-入门复习面向对象</h1><p>很类似于数据库slpdb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">面向对象基础</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">==面向对象就是将编程当成是一个事物，对外界来说，事物是直接使用的，不用去管他内部的情况。而编程就是设置事物能够做什么事。==</span></span><br><span class="line"><span class="string">类和对象的关系：用类去创建一个对象。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类是对一系列具有相同==特征==和==行为==的事物的统称，是一个==抽象的概念==，不是真实存在的事物。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 特征即是属性</span></span><br><span class="line"><span class="string">- 行为即是方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象是类创建出来的真实存在的事物</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 定义类</span></span><br><span class="line"><span class="string">Python2中类分为：经典类 和 新式类</span></span><br><span class="line"><span class="string">class 类名():</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">注意：类名要满足标识符命名规则，同时遵循==大驼峰命名习惯==。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def wash(self):</span></span><br><span class="line"><span class="string">        print('我会洗衣服')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不由任意内置类型派生出的类，称之为经典类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class 类名:</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象又名实例。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 语法</span></span><br><span class="line"><span class="string">对象名 = 类名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建对象</span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="string">print(haier1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># haier对象调用实例方法</span></span><br><span class="line"><span class="string">haier1.wash()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">self指的是调用该函数的对象。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 1. 定义类</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def wash(self):</span></span><br><span class="line"><span class="string">        print('我会洗衣服')</span></span><br><span class="line"><span class="string">        # &lt;__main__.Washer object at 0x0000024BA2B34240&gt;</span></span><br><span class="line"><span class="string">        print(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2. 创建对象</span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="string">print(haier1)</span></span><br><span class="line"><span class="string"># haier1对象调用实例方法</span></span><br><span class="line"><span class="string">haier1.wash()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier2 = Washer()</span></span><br><span class="line"><span class="string"># &lt;__main__.Washer object at 0x0000022005857EF0&gt;</span></span><br><span class="line"><span class="string">print(haier2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">打印对象和self得到的结果是一致的，都是当前对象的内存中存储地址。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象名.属性名 = 值</span></span><br><span class="line"><span class="string">对象名.属性名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(f'haier1洗衣机的宽度是&#123;haier1.width&#125;')</span></span><br><span class="line"><span class="string">print(f'haier1洗衣机的高度是&#123;haier1.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">self.属性名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 定义类</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def print_info(self):</span></span><br><span class="line"><span class="string">        # 类里面获取实例属性</span></span><br><span class="line"><span class="string">        print(f'haier1洗衣机的宽度是&#123;self.width&#125;')</span></span><br><span class="line"><span class="string">        print(f'haier1洗衣机的高度是&#123;self.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建对象</span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 添加实例属性</span></span><br><span class="line"><span class="string">haier1.width = 500</span></span><br><span class="line"><span class="string">haier1.height = 800</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在Python中，`__xx__()`的函数叫做魔法方法，指的是具有特殊功能的函数。</span></span><br><span class="line"><span class="string">==`__init__()`方法的作用：初始化对象。==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 定义初始化功能的函数</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        # 添加实例属性</span></span><br><span class="line"><span class="string">        self.width = 500</span></span><br><span class="line"><span class="string">        self.height = 800</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def print_info(self):</span></span><br><span class="line"><span class="string">        # 类里面调用实例属性</span></span><br><span class="line"><span class="string">        print(f'洗衣机的宽度是&#123;self.width&#125;, 高度是&#123;self.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1 = Washer()</span></span><br><span class="line"><span class="string">haier1.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- `__init__()`方法，在创建一个对象时默认被调用，不需要手动调用</span></span><br><span class="line"><span class="string">- `__init__(self)`中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一个类可以创建多个对象，如何对不同的对象设置不同的初始化属性呢？</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def __init__(self, width, height):</span></span><br><span class="line"><span class="string">        self.width = width</span></span><br><span class="line"><span class="string">        self.height = height</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def print_info(self):</span></span><br><span class="line"><span class="string">        print(f'洗衣机的宽度是&#123;self.width&#125;')</span></span><br><span class="line"><span class="string">        print(f'洗衣机的高度是&#123;self.height&#125;')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1 = Washer(10, 20)</span></span><br><span class="line"><span class="string">haier1.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier2 = Washer(30, 40)</span></span><br><span class="line"><span class="string">haier2.print_info()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当使用print输出对象的时候，默认打印对象的内存地址。如果类定义了`__str__`方法，那么就会打印从在这个方法中 return 的数据。</span></span><br><span class="line"><span class="string">class Washer():</span></span><br><span class="line"><span class="string">    def __init__(self, width, height):</span></span><br><span class="line"><span class="string">        self.width = width</span></span><br><span class="line"><span class="string">        self.height = height</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __str__(self):</span></span><br><span class="line"><span class="string">        return '这是海尔洗衣机的说明书'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">haier1 = Washer(10, 20)</span></span><br><span class="line"><span class="string"># 这是海尔洗衣机的说明书</span></span><br><span class="line"><span class="string">print(haier1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当删除对象时，python解释器也会默认调用`__del__()`方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">#  总结</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 面向对象重要组成部分</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类</span></span><br><span class="line"><span class="string">    - 创建类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  class 类名():</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  对象名 = 类名()</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 添加对象属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类外面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  对象名.属性名 = 值</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类里面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  self.属性名 = 值</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 获取对象属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类外面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  对象名.属性名</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 类里面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  self.属性名</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 魔法方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - `__init__()`: 初始化</span></span><br><span class="line"><span class="string">  - `__str__()`:输出对象信息</span></span><br><span class="line"><span class="string">  - `__del__()`:删除对象时调用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">class 类名(object):</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 父类A</span></span><br><span class="line"><span class="string">class A(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.num = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def info_print(self):</span></span><br><span class="line"><span class="string">        print(self.num)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 子类B</span></span><br><span class="line"><span class="string">class B(A):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result = B()</span></span><br><span class="line"><span class="string">result.info_print()  # 1</span></span><br><span class="line"><span class="string">在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">单继承</span></span><br><span class="line"><span class="string"># 1. 师父类</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string"># 2. 徒弟类</span></span><br><span class="line"><span class="string">class Prentice(Master):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 3. 创建对象daqiu</span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string"># 4. 对象访问实例属性</span></span><br><span class="line"><span class="string">print(daqiu.kongfu)</span></span><br><span class="line"><span class="string"># 5. 对象调用实例方法</span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> 多继承</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建学校类</span></span><br><span class="line"><span class="string">class School(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Prentice(School, Master):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string">print(daqiu.kongfu)</span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string">注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">子类重写父类同名方法和属性</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class School(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 独创配方</span></span><br><span class="line"><span class="string">class Prentice(School, Master):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[独创煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string">print(daqiu.kongfu)</span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(Prentice.__mro__)</span></span><br><span class="line"><span class="string">子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">子类调用父类的同名方法和属性</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class School(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Prentice(School, Master):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[独创煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        # 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化</span></span><br><span class="line"><span class="string">        self.__init__()</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化</span></span><br><span class="line"><span class="string">    def make_master_cake(self):</span></span><br><span class="line"><span class="string">        Master.__init__(self)</span></span><br><span class="line"><span class="string">        Master.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_school_cake(self):</span></span><br><span class="line"><span class="string">        School.__init__(self)</span></span><br><span class="line"><span class="string">        School.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_master_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_school_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_cake()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&gt; 使用super() 可以自动查找父类。调用顺序遵循 `__mro__` 类属性的顺序。比较适合单继承使用。</span></span><br><span class="line"><span class="string">class Master(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[古法煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class School(Master):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[黑马煎饼果子配方]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法2.1</span></span><br><span class="line"><span class="string">        # super(School, self).__init__()</span></span><br><span class="line"><span class="string">        # super(School, self).make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法2.2</span></span><br><span class="line"><span class="string">        super().__init__()</span></span><br><span class="line"><span class="string">        super().make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Prentice(School):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.kongfu = '[独创煎饼果子技术]'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_cake(self):</span></span><br><span class="line"><span class="string">        self.__init__()</span></span><br><span class="line"><span class="string">        print(f'运用&#123;self.kongfu&#125;制作煎饼果子')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装</span></span><br><span class="line"><span class="string">    def make_master_cake(self):</span></span><br><span class="line"><span class="string">        Master.__init__(self)</span></span><br><span class="line"><span class="string">        Master.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def make_school_cake(self):</span></span><br><span class="line"><span class="string">        School.__init__(self)</span></span><br><span class="line"><span class="string">        School.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 一次性调用父类的同名属性和方法</span></span><br><span class="line"><span class="string">    def make_old_cake(self):</span></span><br><span class="line"><span class="string">        # 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改</span></span><br><span class="line"><span class="string">        # Master.__init__(self)</span></span><br><span class="line"><span class="string">        # Master.make_cake(self)</span></span><br><span class="line"><span class="string">        # School.__init__(self)</span></span><br><span class="line"><span class="string">        # School.make_cake(self)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法二: super()</span></span><br><span class="line"><span class="string">        # 方法2.1 super(当前类名, self).函数()</span></span><br><span class="line"><span class="string">        # super(Prentice, self).__init__()</span></span><br><span class="line"><span class="string">        # super(Prentice, self).make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 方法2.2 super().函数()</span></span><br><span class="line"><span class="string">        super().__init__()</span></span><br><span class="line"><span class="string">        super().make_cake()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Prentice()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu.make_old_cake()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 继承的特点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 子类默认拥有父类的所有属性和方法</span></span><br><span class="line"><span class="string">  - 子类重写父类同名方法和属性</span></span><br><span class="line"><span class="string">  - 子类调用父类同名方法和属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- super()方法快速调用父类方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 私有权限</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 不能继承给子类的属性和方法需要添加私有权限</span></span><br><span class="line"><span class="string">  - 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class 类名():</span></span><br><span class="line"><span class="string">  # 私有属性</span></span><br><span class="line"><span class="string">  __属性名 = 值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # 私有方法</span></span><br><span class="line"><span class="string">  def __函数名(self):</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 封装</span></span><br><span class="line"><span class="string">  - 将属性和方法书写到类的里面的操作即为封装</span></span><br><span class="line"><span class="string">  - 封装可以为属性和方法添加私有权限</span></span><br><span class="line"><span class="string">- 继承</span></span><br><span class="line"><span class="string">  - 子类默认继承父类的所有属性和方法</span></span><br><span class="line"><span class="string">  - 子类可以重写父类属性和方法</span></span><br><span class="line"><span class="string">- 多态</span></span><br><span class="line"><span class="string">  - 传入不同的对象，产生不同的结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</span></span><br><span class="line"><span class="string">- 好处：调用灵活，有了多态，更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化！</span></span><br><span class="line"><span class="string">- 实现步骤：</span></span><br><span class="line"><span class="string">  - 定义父类，并提供公共方法</span></span><br><span class="line"><span class="string">  - 定义子类，并重写父类方法</span></span><br><span class="line"><span class="string">  - 传递子类对象给调用者，可以看到不同子类执行效果不同</span></span><br><span class="line"><span class="string">class Dog(object):</span></span><br><span class="line"><span class="string">    def work(self):  # 父类提供统一的方法，哪怕是空方法</span></span><br><span class="line"><span class="string">        print('指哪打哪...')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class ArmyDog(Dog):  # 继承Dog类</span></span><br><span class="line"><span class="string">    def work(self):  # 子类重写父类同名方法</span></span><br><span class="line"><span class="string">        print('追击敌人...')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class DrugDog(Dog):</span></span><br><span class="line"><span class="string">    def work(self):</span></span><br><span class="line"><span class="string">        print('追查毒品...')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Person(object):</span></span><br><span class="line"><span class="string">    def work_with_dog(self, dog):  # 传入不同的对象，执行不同的代码，即不同的work函数</span></span><br><span class="line"><span class="string">        dog.work()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ad = ArmyDog()</span></span><br><span class="line"><span class="string">dd = DrugDog()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daqiu = Person()</span></span><br><span class="line"><span class="string">daqiu.work_with_dog(ad)</span></span><br><span class="line"><span class="string">daqiu.work_with_dog(dd)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">### 设置和访问类属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 类属性就是 **类对象** 所拥有的属性，它被 **该类的所有实例对象 所共有**。</span></span><br><span class="line"><span class="string">- 类属性可以使用 **类对象** 或 **实例对象** 访问。</span></span><br><span class="line"><span class="string">class Dog(object):</span></span><br><span class="line"><span class="string">    tooth = 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wangcai = Dog()</span></span><br><span class="line"><span class="string">xiaohei = Dog()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(Dog.tooth)  # 10</span></span><br><span class="line"><span class="string">print(wangcai.tooth)  # 10</span></span><br><span class="line"><span class="string">print(xiaohei.tooth)  # 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类属性的优点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- **记录的某项数据 始终保持一致时**，则定义类属性。</span></span><br><span class="line"><span class="string">- **实例属性** 要求 **每个对象** 为其 **单独开辟一份内存空间** 来记录数据，而 **类属性** 为全类所共有 ，**仅占用一份内存**，**更加节省内存空间**。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 需要用装饰器`@classmethod`来标识其为类方法，对于类方法，**第一个参数必须是类对象**，一般以`cls`作为第一个参数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">### 类方法使用场景</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 当方法中 **需要使用类对象** (如访问私有类属性等)时，定义类方法</span></span><br><span class="line"><span class="string">- 类方法一般和类属性配合使用</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">### 静态方法特点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 需要通过装饰器`@staticmethod`来进行修饰，**静态方法既不需要传递类对象也不需要传递实例对象（形参没有self/cls）**。</span></span><br><span class="line"><span class="string">- 静态方法 也能够通过 **实例对象** 和 **类对象** 去访问。</span></span><br><span class="line"><span class="string">静态方法使用场景</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 当方法中 **既不需要使用实例对象**(如实例对象，实例属性)，**也不需要使用类对象** (如类属性、类方法、创建实例等)时，定义静态方法</span></span><br><span class="line"><span class="string">- **取消不需要的参数传递**，有利于 **减少不必要的内存占用和性能消耗**</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">class Dog(object):</span></span><br><span class="line"><span class="string">    @staticmethod</span></span><br><span class="line"><span class="string">    def info_print():</span></span><br><span class="line"><span class="string">        print('这是一个狗类，用于创建狗实例....')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wangcai = Dog()</span></span><br><span class="line"><span class="string"># 静态方法既可以使用对象访问又可以使用类访问</span></span><br><span class="line"><span class="string">wangcai.info_print()</span></span><br><span class="line"><span class="string">Dog.info_print()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 面向对象三大特性</span></span><br><span class="line"><span class="string">  - 封装</span></span><br><span class="line"><span class="string">  - 继承</span></span><br><span class="line"><span class="string">  - 多态</span></span><br><span class="line"><span class="string">- 类属性</span></span><br><span class="line"><span class="string">  - 归属于类对象的属性，所有对象共有的属性</span></span><br><span class="line"><span class="string">- 实例属性</span></span><br><span class="line"><span class="string">- 类方法</span></span><br><span class="line"><span class="string">@classmethod</span></span><br><span class="line"><span class="string">def xx():</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">静态方法</span></span><br><span class="line"><span class="string">@staticmethod</span></span><br><span class="line"><span class="string">def xx():</span></span><br><span class="line"><span class="string">  代码</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://www.zhouyi.cc/uploads/allimg/151211/4-15121114503Q54.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-入门复习面向对象&quot;&gt;&lt;a href=&quot;#python-入门复习面向对象&quot; class=&quot;headerlink&quot; title=&quot;python-入门复习面向对象&quot;&gt;&lt;/a&gt;python-入门复习面向对象&lt;/h1&gt;&lt;p&gt;很类似于数据库slpdb&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python_入门复习之文件读取</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</id>
    <published>2020-05-26T05:55:41.000Z</published>
    <updated>2020-05-26T05:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-文件读取"><a href="#python-文件读取" class="headerlink" title="python-文件读取"></a>python-文件读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件的基本操作 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 打开</span></span><br><span class="line"><span class="string">- 读写</span></span><br><span class="line"><span class="string">- 关闭</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">打开：</span></span><br><span class="line"><span class="string">在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</span></span><br><span class="line"><span class="string">open(name, mode)</span></span><br><span class="line"><span class="string">name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">| 模式 | 描述                                                         |</span></span><br><span class="line"><span class="string">| :--: | ------------------------------------------------------------ |</span></span><br><span class="line"><span class="string">|  r   | 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 |</span></span><br><span class="line"><span class="string">|  rb  | 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。 |</span></span><br><span class="line"><span class="string">|  r+  | 打开一个文件用于读写。文件指针将会放在文件的开头。           |</span></span><br><span class="line"><span class="string">| rb+  | 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。 |</span></span><br><span class="line"><span class="string">|  w   | 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">|  wb  | 以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">|  w+  | 打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">| wb+  | 以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 |</span></span><br><span class="line"><span class="string">|  a   | 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |</span></span><br><span class="line"><span class="string">|  ab  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |</span></span><br><span class="line"><span class="string">|  a+  | 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 |</span></span><br><span class="line"><span class="string">| ab+  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。 |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f = open('test.txt', 'w')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 1. 打开文件</span></span><br><span class="line"><span class="string">f = open('test.txt', 'w')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2.文件写入</span></span><br><span class="line"><span class="string">f.write('hello world')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 3. 关闭文件</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. `w  `和`a`模式：如果文件不存在则创建该文件；如果文件存在，`w`模式先清空再写入，`a`模式直接末尾追加。</span></span><br><span class="line"><span class="string">2. `r`模式：如果文件不存在则报错。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">文件对象.read(num)</span></span><br><span class="line"><span class="string">&gt; num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f = open('test.txt')</span></span><br><span class="line"><span class="string">content = f.readlines()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ['hello world\n', 'abcdefg\n', 'aaa\n', 'bbb\n', 'ccc']</span></span><br><span class="line"><span class="string">print(content)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 关闭文件</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">readline()一次读取一行内容。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">文件对象.seek(偏移量, 起始位置)</span></span><br><span class="line"><span class="string">起始位置：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 0：文件开头</span></span><br><span class="line"><span class="string">- 1：当前位置</span></span><br><span class="line"><span class="string">- 2：文件结尾</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">关闭</span></span><br><span class="line"><span class="string">文件对象.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</span></span><br><span class="line"><span class="string">导入os模块</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string">使用`os`模块相关功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">os.函数名()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">文件重命名</span></span><br><span class="line"><span class="string">os.rename(目标文件名, 新文件名)</span></span><br><span class="line"><span class="string">删除文件</span></span><br><span class="line"><span class="string">os.remove(目标文件名)</span></span><br><span class="line"><span class="string">创建文件夹</span></span><br><span class="line"><span class="string">os.mkdir(文件夹名字)</span></span><br><span class="line"><span class="string">删除文件夹</span></span><br><span class="line"><span class="string">os.rmdir(文件夹名字)</span></span><br><span class="line"><span class="string">获取当前目录</span></span><br><span class="line"><span class="string">os.getcwd()</span></span><br><span class="line"><span class="string">改变默认目录</span></span><br><span class="line"><span class="string">os.chdir(目录)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取目录列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">os.listdir(目录)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 步骤</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 设置添加删除字符串的的标识</span></span><br><span class="line"><span class="string">2. 获取指定目录的所有文件</span></span><br><span class="line"><span class="string">3. 将原有文件名添加/删除指定字符串，构造新名字</span></span><br><span class="line"><span class="string">4. os.rename()重命名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span></span><br><span class="line"><span class="string">flag = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取指定目录</span></span><br><span class="line"><span class="string">dir_name = './'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取指定目录的文件列表</span></span><br><span class="line"><span class="string">file_list = os.listdir(dir_name)</span></span><br><span class="line"><span class="string"># print(file_list)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 遍历文件列表内的文件</span></span><br><span class="line"><span class="string">for name in file_list:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 添加指定字符</span></span><br><span class="line"><span class="string">    if flag == 1:</span></span><br><span class="line"><span class="string">        new_name = 'Python-' + name</span></span><br><span class="line"><span class="string">    # 删除指定字符</span></span><br><span class="line"><span class="string">    elif flag == 2:</span></span><br><span class="line"><span class="string">        num = len('Python-')</span></span><br><span class="line"><span class="string">        new_name = name[num:]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 打印新文件名，测试程序正确性</span></span><br><span class="line"><span class="string">    print(new_name)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # 重命名</span></span><br><span class="line"><span class="string">    os.rename(dir_name+name, dir_name+new_name)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 六. 总结</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 文件操作步骤</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 打开</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  文件对象 = open(目标文件, 访问模式)</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 读</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    文件对象.read()</span></span><br><span class="line"><span class="string">    文件对象.readlines()</span></span><br><span class="line"><span class="string">    文件对象.readline()</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 写</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    文件对象.write()</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - seek()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 关闭</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  文件对象.close()</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 主访问模式</span></span><br><span class="line"><span class="string">  - w：写，文件不存在则新建该文件</span></span><br><span class="line"><span class="string">  - r：读，文件不存在则报错</span></span><br><span class="line"><span class="string">  - a：追加</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 文件和文件夹操作</span></span><br><span class="line"><span class="string">  - 重命名：os.rename()</span></span><br><span class="line"><span class="string">  - 获取当前目录：os.getcwd()</span></span><br><span class="line"><span class="string">  - 获取目录列表：os.listdir()</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://img3.duitang.com/uploads/item/201405/02/20140502173129_G8kzT.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-文件读取&quot;&gt;&lt;a href=&quot;#python-文件读取&quot; class=&quot;headerlink&quot; title=&quot;python-文件读取&quot;&gt;&lt;/a&gt;python-文件读取&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python_入门复习之函数</title>
    <link href="https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>https://esyyes.github.io/2020/05/26/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E4%B9%8B%E5%87%BD%E6%95%B0/</id>
    <published>2020-05-26T05:50:42.000Z</published>
    <updated>2020-05-26T05:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-函数"><a href="#python-函数" class="headerlink" title="python-函数"></a>python-函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/26</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">函数复习：</span></span><br><span class="line"><span class="string">&gt; 函数在开发过程中，可以更高效的实现==代码重用==。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义函数：</span></span><br><span class="line"><span class="string">def 函数名(参数):</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2.</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用函数：</span></span><br><span class="line"><span class="string">函数名(参数)</span></span><br><span class="line"><span class="string">1. 不同的需求，参数可有可无。</span></span><br><span class="line"><span class="string">2. 在Python中，函数必须==先定义后使用==。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义函数的说明文档</span></span><br><span class="line"><span class="string">def 函数名(参数):</span></span><br><span class="line"><span class="string">    """ 说明文档的位置 """</span></span><br><span class="line"><span class="string">    代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">查看函数的说明文档</span></span><br><span class="line"><span class="string">help(函数名)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def sum_num(a, b):</span></span><br><span class="line"><span class="string">    """ 求和函数 """</span></span><br><span class="line"><span class="string">    return a + b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">help(sum_num)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 形参：函数定义时书写的参数(非真实数据)</span></span><br><span class="line"><span class="string">  - 实参：函数调用时书写的参数(真实数据)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的返回值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 作用：函数调用后，返回需要的计算结果</span></span><br><span class="line"><span class="string">  - 写法</span></span><br><span class="line"><span class="string">return 表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的说明文档</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 作用：保存函数解释说明的信息</span></span><br><span class="line"><span class="string">  - 写法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  def 函数名():</span></span><br><span class="line"><span class="string">      """ 函数说明文档 """</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数嵌套调用：一个函数内部嵌套调用另外一个函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">变量作用域</span></span><br><span class="line"><span class="string">变量作用域指的是变量生效的范围，主要分为两类：==局部变量==和==全局变量==。</span></span><br><span class="line"><span class="string">所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。</span></span><br><span class="line"><span class="string">局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 全局变量</span></span><br><span class="line"><span class="string">所谓全局变量，指的是在函数体内、外都能生效的变量。</span></span><br><span class="line"><span class="string"> # global 关键字声明a是全局变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def return_num():</span></span><br><span class="line"><span class="string">    return 1</span></span><br><span class="line"><span class="string">    return 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result = return_num()</span></span><br><span class="line"><span class="string">print(result)  # 1</span></span><br><span class="line"><span class="string">只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</span></span><br><span class="line"><span class="string">`return a, b`写法，返回多个数据的时候，默认是元组类型。</span></span><br><span class="line"><span class="string">&gt; 1. return后面可以连接列表、元组或字典，以返回多个值。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用函数时根据函数定义的参数位置来传递参数。</span></span><br><span class="line"><span class="string">传递和定义参数的顺序及个数必须一致。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。</span></span><br><span class="line"><span class="string">此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</span></span><br><span class="line"><span class="string">包裹位置传递</span></span><br><span class="line"><span class="string">def user_info(*args):</span></span><br><span class="line"><span class="string">    print(args)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ('TOM',)</span></span><br><span class="line"><span class="string">user_info('TOM')</span></span><br><span class="line"><span class="string"># ('TOM', 18)</span></span><br><span class="line"><span class="string">user_info('TOM', 18)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">包裹关键字传递</span></span><br><span class="line"><span class="string">def user_info(**kwargs):</span></span><br><span class="line"><span class="string">    print(kwargs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># &#123;'name': 'TOM', 'age': 18, 'id': 110&#125;</span></span><br><span class="line"><span class="string">user_info(name='TOM', age=18, id=110)</span></span><br><span class="line"><span class="string">无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span><span class="params">(name, age, gender)</span>:</span></span><br><span class="line">    print(<span class="string">f'您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">'Rose'</span>, age=<span class="number">20</span>, gender=<span class="string">'女'</span>)</span><br><span class="line">user_info(<span class="string">'小明'</span>, gender=<span class="string">'男'</span>, age=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆包：元组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1, num2 = return_num()</span><br><span class="line">print(num1)  <span class="comment"># 100</span></span><br><span class="line">print(num2)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆包：字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'TOM'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典进行拆包，取出来的是字典的key</span></span><br><span class="line">print(a)  <span class="comment"># name</span></span><br><span class="line">print(b)  <span class="comment"># age</span></span><br><span class="line"></span><br><span class="line">print(dict1[a])  <span class="comment"># TOM</span></span><br><span class="line">print(dict1[b])  <span class="comment"># 18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">**我们可以用`id()`来判断两个变量是否为同一个值的引用。** 我们可以将id值理解为那块内存的地址标识。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 1. int类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">print(b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">print(id(a))  <span class="comment"># 140708464157520</span></span><br><span class="line">print(id(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">print(b)  <span class="comment"># 1,说明int类型为不可变类型</span></span><br><span class="line"></span><br><span class="line">print(id(a))  <span class="comment"># 140708464157552，此时得到是的数据2的内存地址</span></span><br><span class="line">print(id(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">aa = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">bb = aa</span><br><span class="line"></span><br><span class="line">print(id(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line">print(id(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa.append(<span class="number">30</span>)</span><br><span class="line">print(bb)  <span class="comment"># [10, 20, 30], 列表为可变类型</span></span><br><span class="line"></span><br><span class="line">print(id(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line">print(id(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 可变类型</span></span><br><span class="line"><span class="string">  - 列表</span></span><br><span class="line"><span class="string">  - 字典</span></span><br><span class="line"><span class="string">  - 集合</span></span><br><span class="line"><span class="string">- 不可变类型</span></span><br><span class="line"><span class="string">  - 整型</span></span><br><span class="line"><span class="string">  - 浮点型</span></span><br><span class="line"><span class="string">  - 字符串</span></span><br><span class="line"><span class="string">  - 元组</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 变量作用域</span></span><br><span class="line"><span class="string">  - 全局：函数体内外都能生效</span></span><br><span class="line"><span class="string">  - 局部：当前函数体内部生效</span></span><br><span class="line"><span class="string">- 函数多返回值写法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">return 表达式1, 表达式2...</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 函数的参数</span></span><br><span class="line"><span class="string">  - 位置参数</span></span><br><span class="line"><span class="string">    - 形参和实参的个数和书写顺序必须一致</span></span><br><span class="line"><span class="string">  - 关键字参数</span></span><br><span class="line"><span class="string">    - 写法： `key=value`</span></span><br><span class="line"><span class="string">    - 特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</span></span><br><span class="line"><span class="string">  - 缺省参数</span></span><br><span class="line"><span class="string">    - 缺省参数就是默认参数</span></span><br><span class="line"><span class="string">    - 写法：`key=vlaue`</span></span><br><span class="line"><span class="string">  - 不定长位置参数</span></span><br><span class="line"><span class="string">    - 收集所有位置参数，返回一个元组</span></span><br><span class="line"><span class="string">  - 不定长关键字参数</span></span><br><span class="line"><span class="string">    - 收集所有关键字参数，返回一个字典</span></span><br><span class="line"><span class="string">- 引用：Python中，数据的传递都是通过引用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">`abs()`函数可以完成对数字求绝对值计算。</span></span><br><span class="line"><span class="string">`round()`函数可以完成对数字的四舍五入计算。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 递归</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 函数内部自己调用自己</span></span><br><span class="line"><span class="string">  - 必须有出口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- lambda</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 语法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ``` python</span></span><br><span class="line"><span class="string">  lambda 参数列表: 表达式</span></span><br><span class="line"><span class="string">  ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - lambda的参数形式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 无参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 一个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda 参数: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 默认参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda key=value: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 不定长位置参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda *args: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - 不定长关键字参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``` python</span></span><br><span class="line"><span class="string">    lambda **kwargs: 表达式</span></span><br><span class="line"><span class="string">    ```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 高阶函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 作用：把函数作为参数传入，化简代码</span></span><br><span class="line"><span class="string">  - 内置高阶函数</span></span><br><span class="line"><span class="string">    - map()</span></span><br><span class="line"><span class="string">    - reduce()</span></span><br><span class="line"><span class="string">    - filter()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">strip()函数</span></span><br><span class="line"><span class="string">用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rstrip()函数</span></span><br><span class="line"><span class="string">移除末尾指定字符，默认为空格</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="http://b-ssl.duitang.com/uploads/item/201608/18/20160818122757_hKY35.thumb.700_0.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-函数&quot;&gt;&lt;a href=&quot;#python-函数&quot; class=&quot;headerlink&quot; title=&quot;python-函数&quot;&gt;&lt;/a&gt;python-函数&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://esyyes.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://esyyes.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python--入门复习推导式</title>
    <link href="https://esyyes.github.io/2020/05/25/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <id>https://esyyes.github.io/2020/05/25/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%8E%A8%E5%AF%BC%E5%BC%8F/</id>
    <published>2020-05-25T12:00:32.000Z</published>
    <updated>2020-05-25T12:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/25</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">推导式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 列表推导式</span></span><br><span class="line"><span class="string">作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。</span></span><br><span class="line"><span class="string">列表推导式又叫列表生成式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 字典推导式</span></span><br><span class="line"><span class="string">字典推导式作用：快速合并列表为字典或提取字典中目标数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 集合推导式</span></span><br><span class="line"><span class="string">创建一个集合，数据为下方列表的2次方。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 推导式的作用：简化代码</span></span><br><span class="line"><span class="string">- 推导式写法</span></span><br><span class="line"><span class="string"># 列表推导式</span></span><br><span class="line"><span class="string">[xx for xx in range()]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 字典推导式</span></span><br><span class="line"><span class="string">&#123;xx1: xx2 for ... in ...&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 集合推导式</span></span><br><span class="line"><span class="string">&#123;xx for xx in ...&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">列表推导式:</span></span><br><span class="line"><span class="string">需求</span></span><br><span class="line"><span class="string">创建一个0-10的列表。</span></span><br><span class="line"><span class="string">- while循环实现</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 书写循环，依次追加数字到空列表list1中</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    list1.append(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表推导式实现</span></span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：创建0-10的偶数列表</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - 方法一：range()步长实现</span></span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if实现</span></span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">a = [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line">a = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字典：字典key是1-5数字，value是这个数字的2次方</span></span><br><span class="line">dict1 = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line">print(dict1)  <span class="comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将两个列表合并为一个字典</span></span><br><span class="line">list1 = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'gender'</span>]</span><br><span class="line">list2 = [<span class="string">'Tom'</span>, <span class="number">20</span>, <span class="string">'man'</span>]</span><br><span class="line"></span><br><span class="line">dict1 = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list1))&#125;</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取字典中目标数据</span></span><br><span class="line">counts = &#123;<span class="string">'MBP'</span>: <span class="number">268</span>, <span class="string">'HP'</span>: <span class="number">125</span>, <span class="string">'DELL'</span>: <span class="number">201</span>, <span class="string">'Lenovo'</span>: <span class="number">199</span>, <span class="string">'acer'</span>: <span class="number">99</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：提取上述电脑数量大于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br><span class="line">print(count1)  <span class="comment"># &#123;'MBP': 268, 'DELL': 201&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line"><span class="comment"># 需求：创建一个集合，数据为下方列表的2次方。</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">set1 = &#123;i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1&#125;</span><br><span class="line">print(set1)  <span class="comment"># &#123;1, 4&#125;</span></span><br><span class="line"><span class="comment"># 集合有数据去重功能。</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1590418032012&di=8f830b769f26031c8c45b68d558a566b&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2018-10-25%2F5bd1aa108893e.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——入门复习数据序列</title>
    <link href="https://esyyes.github.io/2020/05/25/python/python%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/"/>
    <id>https://esyyes.github.io/2020/05/25/python/python%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%BA%8F%E5%88%97/</id>
    <published>2020-05-25T11:57:35.000Z</published>
    <updated>2020-05-25T11:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/25</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据类型为str(字符串)</span></span><br><span class="line"><span class="string">三引号形式的字符串支持换行。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">"I'm Tom"</span></span><br><span class="line">d = <span class="string">'I\'m Tom'</span></span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">切片是指对操作的对象截取其中一部分的操作。**字符串、列表、元组**都支持切片操作。</span></span><br><span class="line"><span class="string">序列[开始位置下标:结束位置下标:步长]</span></span><br><span class="line"><span class="string">步长是选取间隔，正负整数均可，默认步长为1。</span></span><br><span class="line"><span class="string">左闭右开</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">"abcdefg"</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line">print(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line">print(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line">print(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line">print(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line">print(name[:<span class="number">-1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line">print(name[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># def</span></span><br><span class="line">print(name[::<span class="number">-1</span>])  <span class="comment"># gfedcba</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</span></span><br><span class="line"><span class="string">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">mystr = <span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line"></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(mystr.find(<span class="string">'and'</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line">print(mystr.find(<span class="string">'ands'</span>))  <span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</span></span><br><span class="line"><span class="string">开始和结束位置下标可以省略，表示在整个字符串序列中查找。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">mystr = <span class="string">"hello world and itcast and itheima and Python"</span></span><br><span class="line">print(mystr.index(<span class="string">'and'</span>))  <span class="comment"># 12</span></span><br><span class="line">print(mystr.index(<span class="string">'and'</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line">print(mystr.index(<span class="string">'ands'</span>))  <span class="comment"># 报错</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</span></span><br><span class="line"><span class="string">字符串序列.replace(旧子串, 新子串, 替换次数)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 结果：hello world he itcast he itheima he Python</span></span><br><span class="line">print(mystr.replace(<span class="string">'and'</span>, <span class="string">'he'</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 下标</span></span><br><span class="line"><span class="string">  - 计算机为数据序列中每个元素分配的从0开始的编号</span></span><br><span class="line"><span class="string">- 切片</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` python</span></span><br><span class="line"><span class="string">序列名[开始位置下标:结束位置下标:步长]</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 常用操作方法</span></span><br><span class="line"><span class="string">  - find()</span></span><br><span class="line"><span class="string">  - index()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">列表：</span></span><br><span class="line"><span class="string">[数据1, 数据2, 数据3, 数据4......]</span></span><br><span class="line"><span class="string">列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">print(name_list[<span class="number">0</span>])  <span class="comment"># Tom</span></span><br><span class="line">print(name_list[<span class="number">1</span>])  <span class="comment"># Lily</span></span><br><span class="line">print(name_list[<span class="number">2</span>])  <span class="comment"># Rose</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># index()：返回指定数据所在位置的下标 。</span></span><br><span class="line"><span class="comment"># 列表序列.index(数据, 开始位置下标, 结束位置下标)</span></span><br><span class="line">print(name_list.index(<span class="string">'Lily'</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count()：统计指定数据在当前列表中出现的次数。</span></span><br><span class="line">print(name_list.count(<span class="string">'Lily'</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="comment"># len()：访问列表长度，即列表中数据的个数。</span></span><br><span class="line">print(len(name_list))  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># append()：列表结尾追加数据。</span></span><br><span class="line">name_list.append(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming']</span></span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># 如果append()追加的数据是一个序列，则追加整个序列到列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Lily', 'Rose', 'x', 'i', 'a', 'o', 'm', 'i', 'n', 'g']</span></span><br><span class="line">print(name_list)</span><br><span class="line">name_list.extend([<span class="string">'xiaoming'</span>])</span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert()：指定位置新增数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表序列.insert(位置下标, 数据)</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">'xiaoming'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'xiaoming', 'Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="comment"># del 目标</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：报错提示：name 'name_list' is not defined</span></span><br><span class="line"><span class="keyword">del</span> name_list</span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定数据</span></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Lily', 'Rose']</span></span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</span></span><br><span class="line"><span class="comment"># 列表序列.pop(下标)</span></span><br><span class="line">name_list = [<span class="string">'Tom'</span>, <span class="string">'Lily'</span>, <span class="string">'Rose'</span>]</span><br><span class="line"></span><br><span class="line">del_name = name_list.pop(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：Lily</span></span><br><span class="line">print(del_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：['Tom', 'Rose']</span></span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表序列.sort( key=None, reverse=False)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">列表序列.sort( key=None, reverse=False)</span></span><br><span class="line"><span class="string">如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为唯一的这个数据的数据类型</span></span><br><span class="line"><span class="string">元组数据不支持修改，只支持查找</span></span><br><span class="line"><span class="string">index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同</span></span><br><span class="line"><span class="string">count()：统计某个数据在当前元组出现的次数。</span></span><br><span class="line"><span class="string">len()：统计元组中数据的个数。 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 多个数据元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个数据元组</span></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">字典特点：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 符号为==大括号==</span></span><br><span class="line"><span class="string">- 数据为==键值对==形式出现</span></span><br><span class="line"><span class="string">- 各个键值对之间用==逗号==隔开</span></span><br><span class="line"><span class="string">一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</span></span><br><span class="line"><span class="string">&gt; 字典为可变类型。</span></span><br><span class="line"><span class="string">del() / del：删除字典或删除字典中指定键值对。</span></span><br><span class="line"><span class="string">clear()：清空字典</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 有数据字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">dict3 = dict()</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">'name'</span>] = <span class="string">'Rose'</span></span><br><span class="line"><span class="comment"># 结果：&#123;'name': 'Rose', 'age': 20, 'gender': '男'&#125;</span></span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">'id'</span>] = <span class="number">110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'name': 'Rose', 'age': 20, 'gender': '男', 'id': 110&#125;</span></span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">字典序列.get(key, 默认值)</span></span><br><span class="line"><span class="string">如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">print(dict1.get(<span class="string">'name'</span>))  <span class="comment"># Tom</span></span><br><span class="line">print(dict1.get(<span class="string">'id'</span>, <span class="number">110</span>))  <span class="comment"># 110</span></span><br><span class="line">print(dict1.get(<span class="string">'id'</span>))  <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  keys()</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">print(dict1.keys())  <span class="comment"># dict_keys(['name', 'age', 'gender'])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># values()</span></span><br><span class="line">print(dict1.values())  <span class="comment"># dict_values(['Tom', 20, '男'])</span></span><br><span class="line">dict1 = &#123;<span class="string">'name'</span>: <span class="string">'Tom'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">print(dict1.items())  <span class="comment"># dict_items([('name', 'Tom'), ('age', 20), ('gender', '男')])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">创建集合使用`&#123;&#125;`或`set()`， 但是如果要创建空集合只能使用`set()`，因为`&#123;&#125;`用来创建空字典。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">s3 = set(<span class="string">'abcdefg'</span>)</span><br><span class="line">print(s3)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1. 集合可以去掉重复数据；</span></span><br><span class="line"><span class="string">2. 集合数据是无序的，故不支持下标</span></span><br><span class="line"><span class="string">增加数据add()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">s1.add(<span class="number">100</span>)</span><br><span class="line">s1.add(<span class="number">10</span>)</span><br><span class="line">print(s1)  <span class="comment"># &#123;100, 10, 20&#125;</span></span><br><span class="line"><span class="comment"># 因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</span></span><br><span class="line"><span class="comment"># update(), 追加的数据是序列。</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment"># s1.update(100)  # 报错</span></span><br><span class="line">s1.update([<span class="number">100</span>, <span class="number">200</span>])</span><br><span class="line">s1.update(<span class="string">'abc'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove()，删除集合中的指定数据，如果数据不存在则报错。</span></span><br><span class="line"><span class="comment"># discard()，删除集合中的指定数据，如果数据不存在也不会报错。</span></span><br><span class="line"><span class="comment"># pop()，随机删除集合中的某个数据，并返回这个数据。</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">del_num = s1.pop()</span><br><span class="line">print(del_num)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">常见操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 增加数据</span></span><br><span class="line"><span class="string">  - add()</span></span><br><span class="line"><span class="string">  - update()</span></span><br><span class="line"><span class="string">- 删除数据</span></span><br><span class="line"><span class="string">  - remove()</span></span><br><span class="line"><span class="string">  - discard()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">| 运算符 |      描述      |      支持的容器类型      |</span></span><br><span class="line"><span class="string">| :----: | :------------: | :----------------------: |</span></span><br><span class="line"><span class="string">|   +    |      合并      |    字符串、列表、元组    |</span></span><br><span class="line"><span class="string">|   *    |      复制      |    字符串、列表、元组    |</span></span><br><span class="line"><span class="string">|   in   |  元素是否存在  | 字符串、列表、元组、字典 |</span></span><br><span class="line"><span class="string">| not in | 元素是否不存在 | 字符串、列表、元组、字典 |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">'aa'</span></span><br><span class="line">str2 = <span class="string">'bb'</span></span><br><span class="line">str3 = str1 + str2</span><br><span class="line">print(str3)  <span class="comment"># aabb</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line">print(list3)  <span class="comment"># [1, 2, 10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t3 = t1 + t2</span><br><span class="line">print(t3)  <span class="comment"># (10, 20, 100, 200)</span></span><br><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">10</span>)  <span class="comment"># ----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">'hello'</span>]</span><br><span class="line">print(list1 * <span class="number">4</span>)  <span class="comment"># ['hello', 'hello', 'hello', 'hello']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">'world'</span>,)</span><br><span class="line">print(t1 * <span class="number">4</span>)  <span class="comment"># ('world', 'world', 'world', 'world')</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">len()计算容器中元素个数</span></span><br><span class="line"><span class="string">del 或 del()删除</span></span><br><span class="line"><span class="string">max()返回容器中元素最大值</span></span><br><span class="line"><span class="string">min()返回容器中元素最小值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">数据类型转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- tuple()</span></span><br><span class="line"><span class="string">- list()</span></span><br><span class="line"><span class="string">- set()</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1590418032013&di=fe751e385ecab479348d00385ced497d&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2Fc%2F59a52e20e45ed.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_入门复习</title>
    <link href="https://esyyes.github.io/2020/05/21/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>https://esyyes.github.io/2020/05/21/python/python-%E5%85%A5%E9%97%A8%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-05-21T08:28:34.000Z</published>
    <updated>2020-05-25T08:23:33.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python入门复习-变量—循环—条件"><a href="#python入门复习-变量—循环—条件" class="headerlink" title="python入门复习_变量—循环—条件"></a>python入门复习_变量—循环—条件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/21</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python 入门复习</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">注释文件: 多行注释：‘’‘ 。。。’‘’或者“”“。。。”“”</span></span><br><span class="line"><span class="string">         单行注释：#</span></span><br><span class="line"><span class="string">         快捷键  ：ctrl + /</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 由数字、字母、下划线组成</span></span><br><span class="line"><span class="string">- 不能数字开头</span></span><br><span class="line"><span class="string">- 不能使用内置关键字</span></span><br><span class="line"><span class="string">- 严格区分大小写</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">变量命名习惯</span></span><br><span class="line"><span class="string">- 大驼峰：即每个单词首字母都大写，例如：`MyName`。</span></span><br><span class="line"><span class="string">- 小驼峰：第二个（含）以后的单词首字母大写，例如：`myName`。</span></span><br><span class="line"><span class="string">- 下划线：例如：`my_name`。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Debug工具是PyCharm IDE中集成 用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Debug工具使用步骤：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 打断点</span></span><br><span class="line"><span class="string">2. Debug调试</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">检测数据类型的方法：`type()`</span></span><br><span class="line"><span class="string">数据类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 整型：int</span></span><br><span class="line"><span class="string">- 浮点型：float</span></span><br><span class="line"><span class="string">- 字符串：str</span></span><br><span class="line"><span class="string">- 布尔型：bool</span></span><br><span class="line"><span class="string">- 元组：tuple</span></span><br><span class="line"><span class="string">- 集合：set</span></span><br><span class="line"><span class="string">- 字典：dict</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 格式化输出</span></span><br><span class="line"><span class="string">  - 格式化符号</span></span><br><span class="line"><span class="string">  - f-字符串</span></span><br><span class="line"><span class="string">- print的结束符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">所谓的格式化输出即按照一定的格式输出内容</span></span><br><span class="line"><span class="string">| 格式符号 |          转换          </span></span><br><span class="line"><span class="string">| :------: | :--------------------: </span></span><br><span class="line"><span class="string">|  ==%s==  |         字符串         </span></span><br><span class="line"><span class="string">|  ==%d==  |   有符号的十进制整数   </span></span><br><span class="line"><span class="string">|  ==%f==  |         浮点数         </span></span><br><span class="line"><span class="string">|    %c    |          字符          </span></span><br><span class="line"><span class="string">|    %u    |    无符号十进制整数    </span></span><br><span class="line"><span class="string">|    %o    |       八进制整数       </span></span><br><span class="line"><span class="string">|    %x    | 十六进制整数（小写ox） </span></span><br><span class="line"><span class="string">|    %X    | 十六进制整数（大写OX） </span></span><br><span class="line"><span class="string">|    %e    | 科学计数法（小写'e'）  </span></span><br><span class="line"><span class="string">|    %E    | 科学计数法（大写'E'）  </span></span><br><span class="line"><span class="string">|    %g    |      %f和%e的简写      </span></span><br><span class="line"><span class="string">|    %G    |      %f和%E的简写      </span></span><br><span class="line"><span class="string">- %06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</span></span><br><span class="line"><span class="string">- %.2f，表示小数点后显示的小数位数。</span></span><br><span class="line"><span class="string">格式化字符串除了%s，还可以写为`f'&#123;表达式&#125;'`</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  print('') or print("")</span></span><br><span class="line">print(<span class="string">'hello Python'</span>)</span><br><span class="line">print(<span class="string">"hello Python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hello Python</span></span><br><span class="line"><span class="comment"># hello Python</span></span><br><span class="line"></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">'TOM'</span></span><br><span class="line">weight = <span class="number">75.5</span></span><br><span class="line">student_id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM</span></span><br><span class="line">print(<span class="string">'我的名字是%s'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的学号是0001</span></span><br><span class="line">print(<span class="string">'我的学号是%4d'</span> % student_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的体重是75.50公斤</span></span><br><span class="line">print(<span class="string">'我的体重是%.2f公斤'</span> % weight)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM，今年18岁了</span></span><br><span class="line">print(<span class="string">'我的名字是%s，今年%d岁了'</span> % (name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM，明年19岁了</span></span><br><span class="line">print(<span class="string">'我的名字是%s，明年%d岁了'</span> % (name, age + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是TOM，明年19岁了</span></span><br><span class="line">print(<span class="string">f'我的名字是<span class="subst">&#123;name&#125;</span>, 明年<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>岁了'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 转义字符</span></span><br><span class="line"><span class="string">  - \n：换行</span></span><br><span class="line"><span class="string">  - \t：制表符</span></span><br><span class="line"><span class="string">- print结束符</span></span><br><span class="line"><span class="string">print('内容', end="")</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出的 print 函数总结：</span></span><br><span class="line"><span class="string">1. 字符串和数值类型</span></span><br><span class="line"><span class="string">可以直接输出</span></span><br><span class="line"><span class="string">2.变量</span></span><br><span class="line"><span class="string">无论什么类型，数值，布尔，列表，字典...都可以直接输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(1). %字符：标记转换说明符的开始</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(2). 转换标志：-表示左对齐；+表示在转换值之前要加上正负号；“”（空白字符）表示正数之前保留空格；0表示转换值若位数不够则用0填充</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(3). 最小字段宽度：转换后的字符串至少应该具有该值指定的宽度。如果是*，则宽度会从值元组中读出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(4). 点(.)后跟精度值：如果转换的是实数，精度值就表示出现在小数点后的位数。如果转换的是字符串，那么该数字就表示最大字段宽度。如果是*，那么精度将从元组中读出</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">(5).字符串格式化转换类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    print(x, end=<span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">abs(number)，返回数字的绝对值</span></span><br><span class="line"><span class="string">cmath.sqrt(number)，返回平方根，也可以应用于负数</span></span><br><span class="line"><span class="string">float(object)，把字符串和数字转换为浮点数</span></span><br><span class="line"><span class="string">help()，提供交互式帮助</span></span><br><span class="line"><span class="string">input(prompt)，获取用户输入</span></span><br><span class="line"><span class="string">int(object)，把字符串和数字转换为整数</span></span><br><span class="line"><span class="string">math.ceil(number)，返回数的上入整数，返回值的类型为浮点数</span></span><br><span class="line"><span class="string">math.floor(number)，返回数的下舍整数，返回值的类型为浮点数</span></span><br><span class="line"><span class="string">math.sqrt(number)，返回平方根不适用于负数</span></span><br><span class="line"><span class="string">pow(x,y[.z]),返回X的y次幂（有z则对z取模）</span></span><br><span class="line"><span class="string">repr(object)，返回值的字符串标示形式</span></span><br><span class="line"><span class="string">round(number[.ndigits])，根据给定的精度对数字进行四舍五入</span></span><br><span class="line"><span class="string">str(object),把值转换为字符串</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">- 输入功能</span></span><br><span class="line"><span class="string">  - input('提示文字')</span></span><br><span class="line"><span class="string">- 输入的特点</span></span><br><span class="line"><span class="string">  - 一般将input接收的数据存储到变量</span></span><br><span class="line"><span class="string">  - input接收的任何数据默认都是字符串数据类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">k = input(<span class="string">"请输入你的账号："</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"tom的年龄:"</span>, <span class="number">15</span> + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">'我的名字是%s'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">转换数据类型常用的函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- int()</span></span><br><span class="line"><span class="string">- float()</span></span><br><span class="line"><span class="string">- str()</span></span><br><span class="line"><span class="string">- list()</span></span><br><span class="line"><span class="string">- tuple()</span></span><br><span class="line"><span class="string">- eval()</span></span><br><span class="line"><span class="string"> eval() -- 将字符串中的数据转换成Python表达式原本类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">str1 = <span class="string">'10'</span></span><br><span class="line">str2 = <span class="string">'[1, 2, 3]'</span></span><br><span class="line">str3 = <span class="string">'(1000, 2000, 3000)'</span></span><br><span class="line">print(eval(str1))</span><br><span class="line">print(eval(str2))</span><br><span class="line">print(eval(str3))</span><br><span class="line">print(type(eval(str1)))</span><br><span class="line">print(type(eval(str2)))</span><br><span class="line">print(type(eval(str3)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">[1, 2, 3]</span></span><br><span class="line"><span class="string">(1000, 2000, 3000)</span></span><br><span class="line"><span class="string">用eval将数据转换为原有形式，去除两边的''</span></span><br><span class="line"><span class="string">在数据转换中可以用到</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">算数运算符</span></span><br><span class="line"><span class="string">| 运算符 |  描述  | 实例                                                  |</span></span><br><span class="line"><span class="string">| :----: | :----: | ----------------------------------------------------|</span></span><br><span class="line"><span class="string">|   +    |   加   | 1 + 1 输出结果为 2                                    |</span></span><br><span class="line"><span class="string">|   -    |   减   | 1-1 输出结果为 0                                      |</span></span><br><span class="line"><span class="string">|   *    |   乘   | 2 * 2 输出结果为 4                                    |</span></span><br><span class="line"><span class="string">|   /    |   除   | 10 / 2 输出结果为 5                                   |</span></span><br><span class="line"><span class="string">|   //   |  整除  | 9 // 4 输出结果为2                                    |</span></span><br><span class="line"><span class="string">|   %    |  取余  | 9 % 4 输出结果为 1                                    |</span></span><br><span class="line"><span class="string">|   **   |  指数  | 2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2                 |</span></span><br><span class="line"><span class="string">|   ()   | 小括号 | 小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9     |</span></span><br><span class="line"><span class="string">混合运算优先级顺序：`()`高于 `**` 高于 `*` `/` `//` `%` 高于 `+` `-`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">复合赋值运算符 </span></span><br><span class="line"><span class="string">| 运算符 | 描述           | 实例                       |</span></span><br><span class="line"><span class="string">| ------ | -------------- | -------------------------- |</span></span><br><span class="line"><span class="string">| +=     | 加法赋值运算符 | c += a 等价于 c = c + a    |</span></span><br><span class="line"><span class="string">| -=     | 减法赋值运算符 | c -= a 等价于 c = c- a     |</span></span><br><span class="line"><span class="string">| *=     | 乘法赋值运算符 | c *= a 等价于 c = c * a    |</span></span><br><span class="line"><span class="string">| /=     | 除法赋值运算符 | c /= a 等价于 c = c / a    |</span></span><br><span class="line"><span class="string">| //=    | 整除赋值运算符 | c //= a 等价于 c = c // a  |</span></span><br><span class="line"><span class="string">| %=     | 取余赋值运算符 | c %= a 等价于 c = c % a    |</span></span><br><span class="line"><span class="string">| **=    | 幂赋值运算符   | c ** = a 等价于 c = c ** a |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">比较运算符</span></span><br><span class="line"><span class="string">| 运算符 | 描述                                                         | 实例                                            |</span></span><br><span class="line"><span class="string">| ------ | ------------------------------------------------------------ | -------------------------------------|</span></span><br><span class="line"><span class="string">| ==     | 判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False) | 如a=3,b=3，则（a == b) 为 True                              |</span></span><br><span class="line"><span class="string">| !=     | 不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False) | 如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True |</span></span><br><span class="line"><span class="string">| &gt;      | 运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假 | 如a=7,b=3，则(a &gt; b) 为 True                                |</span></span><br><span class="line"><span class="string">| &lt;      | 运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假 | 如a=7,b=3，则(a &lt; b) 为 False                               |</span></span><br><span class="line"><span class="string">| &gt;=     | 运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假 | 如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True  |</span></span><br><span class="line"><span class="string">| &lt;=     | 运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假 | 如a=3,b=3，则(a &lt;= b) 为 True                               |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">逻辑运算符</span></span><br><span class="line"><span class="string">| 运算符 | 逻辑表达式 | 描述                                                         | 实例                                     |</span></span><br><span class="line"><span class="string">| ------ | ---------- | ------------------------------------------------------------ | ------------------ |</span></span><br><span class="line"><span class="string">| and    | x and y    | 布尔"与"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。 | True and False， 返回 False。            |</span></span><br><span class="line"><span class="string">| or     | x or y     | 布尔"或"：如果 x 是 True，它返回 True，否则它返回 y 的值。   | False or True， 返回 True。              |</span></span><br><span class="line"><span class="string">| not    | not x      | 布尔"非"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 | not True 返回 False, not False 返回 True |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字之间的逻辑运算</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span></span><br><span class="line">print(a <span class="keyword">and</span> b)  <span class="comment"># 0</span></span><br><span class="line">print(b <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line">print(a <span class="keyword">and</span> c)  <span class="comment"># 0</span></span><br><span class="line">print(c <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line">print(b <span class="keyword">and</span> c)  <span class="comment"># 2</span></span><br><span class="line">print(c <span class="keyword">and</span> b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span></span><br><span class="line">print(a <span class="keyword">or</span> b)  <span class="comment"># 1</span></span><br><span class="line">print(a <span class="keyword">or</span> c)  <span class="comment"># 2</span></span><br><span class="line">print(b <span class="keyword">or</span> c)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">总结：</span></span><br><span class="line"><span class="string">- 算数运算的优先级</span></span><br><span class="line"><span class="string">  - 混合运算优先级顺序：`()`高于 `**` 高于 `*` `/` `//` `%` 高于 `+` `-`</span></span><br><span class="line"><span class="string">- 赋值运算符</span></span><br><span class="line"><span class="string">  - =</span></span><br><span class="line"><span class="string">- 复合赋值运算符</span></span><br><span class="line"><span class="string">  - +=</span></span><br><span class="line"><span class="string">  - -=</span></span><br><span class="line"><span class="string">  - 优先级</span></span><br><span class="line"><span class="string">    1. 先算复合赋值运算符右侧的表达式</span></span><br><span class="line"><span class="string">    2. 再算复合赋值运算的算数运算</span></span><br><span class="line"><span class="string">    3. 最后算赋值运算</span></span><br><span class="line"><span class="string">- 比较运算符</span></span><br><span class="line"><span class="string">  - 判断相等： == </span></span><br><span class="line"><span class="string">  - 大于等于： &gt;=</span></span><br><span class="line"><span class="string">  - 小于等于：&lt;=</span></span><br><span class="line"><span class="string">  - 不等于： !=</span></span><br><span class="line"><span class="string">- 逻辑运算符</span></span><br><span class="line"><span class="string">  - 与： and</span></span><br><span class="line"><span class="string">  - 或：or</span></span><br><span class="line"><span class="string">  - 非：not</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># round()函数，4舍5入</span></span><br><span class="line">print(<span class="string">f'round(5.3)'</span>)  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'我的名字是<span class="subst">&#123;name&#125;</span>, 明年<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>岁了'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">if 条件1:</span></span><br><span class="line"><span class="string">    条件1成立执行的代码</span></span><br><span class="line"><span class="string">elif 条件2:</span></span><br><span class="line"><span class="string">    条件2成立执行的代码</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    以上条件都不成立执行的代码</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">age = int(input(<span class="string">'请输入您的年龄：'</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">f'您的年龄是<span class="subst">&#123;age&#125;</span>,童工一枚'</span>)</span><br><span class="line"><span class="comment"># elif (age &gt;= 18) and (age &lt;= 60):</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">18</span> &lt;= age &lt;= <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">f'您的年龄是<span class="subst">&#123;age&#125;</span>,合法工龄'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">f'您的年龄是<span class="subst">&#123;age&#125;</span>,可以退休'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># age &gt;= 18 and age &lt;= 60`可以化简为`18 &lt;= age &lt;= 60`。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">随机做法：</span></span><br><span class="line"><span class="string">1. 导出random模块</span></span><br><span class="line"><span class="string">2. random.randint(开始,结束)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">三目运算符也叫三元运算符。</span></span><br><span class="line"><span class="string"># 值1 if 条件 else 值2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl + c 停止运行</span></span><br><span class="line"><span class="comment"># ctrl + d 复制上一行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">while的语法</span></span><br><span class="line"><span class="string">必须加: i += 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- break退出整个循环</span></span><br><span class="line"><span class="string">- continue退出本次循环，继续执行下一次重复执行的代码</span></span><br><span class="line"><span class="string">- else</span></span><br><span class="line"><span class="string">  - while和for都可以配合else使用</span></span><br><span class="line"><span class="string">  - else下方缩进的代码含义：当循环正常结束后执行的代码</span></span><br><span class="line"><span class="string">  - break终止循环不会执行else下方缩进的代码</span></span><br><span class="line"><span class="string">  - continue退出循环的方式执行else下方缩进的代码</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">for 临时变量 in 序列:</span></span><br><span class="line"><span class="string">    重复执行的代码1</span></span><br><span class="line"><span class="string">    重复执行的代码2</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">while 条件1:</span></span><br><span class="line"><span class="string">    条件1成立执行的代码</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">    while 条件2:</span></span><br><span class="line"><span class="string">        条件2成立执行的代码</span></span><br><span class="line"><span class="string">        ......</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出5050</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">4</span>:</span><br><span class="line">        <span class="comment"># 一行内的星星不能换行，取消print默认结束符\n</span></span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span></span><br><span class="line">    print()</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line"><span class="comment"># j表示行号</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复打印9行表达式</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 打印一行里面的表达式 a * b = a*b</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;j*i&#125;</span>'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># end='\t'制表符</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    <span class="comment"># 换行</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行</span></span><br><span class="line"><span class="comment"># &gt; 因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1590405001328&di=92dd5201407c31e2187e000321d669cb&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201803%2F15%2F20180315215629_zvfXe.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python入门复习-变量—循环—条件&quot;&gt;&lt;a href=&quot;#python入门复习-变量—循环—条件&quot; class=&quot;headerlink&quot; title=&quot;python入门复习_变量—循环—条件&quot;&gt;&lt;/a&gt;python入门复习_变量—循环—条件&lt;/h1&gt;&lt;figu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VF基础知识</title>
    <link href="https://esyyes.github.io/2020/05/18/matlab/VF/VF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://esyyes.github.io/2020/05/18/matlab/VF/VF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-05-18T07:17:42.000Z</published>
    <updated>2020-05-18T07:17:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="心室纤颤-Ventricular-Fibrillation-，VF"><a href="#心室纤颤-Ventricular-Fibrillation-，VF" class="headerlink" title="心室纤颤(Ventricular Fibrillation ，VF)"></a>心室纤颤(Ventricular Fibrillation ，VF)</h2><p>心室纤颤(Ventricular Fibrillation ，VF)特点：</p><p>QRS-T波群完全消失，代之以形态不同、大小各异间距极不匀齐的颤动波(f波)，频率为250～500次/分钟，颤动波之间无等电线。</p><p><strong>心室扑动典型的心电图特点</strong></p><p>连续而规则、宽大、畸形的QRS波，即心室扑动波。QRS波的时限长，在0.12s以上，QRS波呈向上向下的波幅似正弦样曲线与T波无法分开，QRS波之间无等电线。QRS波频率多在180～250次/分钟，有时可低达150次/分钟或高达300次/分钟。P波消失。</p><h2 id="心室纤颤的数据库："><a href="#心室纤颤的数据库：" class="headerlink" title="心室纤颤的数据库："></a>心室纤颤的数据库：</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%BF%83%E7%94%B5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200519141433962"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cvfdb%E4%BB%8B%E7%BB%8D.png" alt="image-20200519141519264"></p><h2 id="数据长短："><a href="#数据长短：" class="headerlink" title="数据长短："></a>数据长短：</h2><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E9%95%BF%E7%9F%AD.png" alt="image-20200519141626942"></p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CMITDB%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9" alt="image-20200519141744095"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>直接选择数据库为VFDB，室颤的，然后根据标签选择室颤的信号，筛选10个的样子，每个10s，然后生成excel表格，再选择正常的数据10段，最后来区分，利用利用python直接来读取数据，然后生成数据组合!再进行预处理。最后筛选出一个算法进行进行分类，并有个准确率输出。</p><h1 id="VF数据库"><a href="#VF数据库" class="headerlink" title="VF数据库"></a>VF数据库</h1><p>含有室颤的数据有：424,426,430</p><p>数据长短为：2100s，35min</p><p>采样率为：250</p><p>首先确定VF和VFIB的位置，将其生成excel文档，10s长短，即2500数据点，</p><h2 id="python-wfdb截取数据"><a href="#python-wfdb截取数据" class="headerlink" title="python-wfdb截取数据"></a>python-wfdb截取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/5/19</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wfdb <span class="keyword">as</span> wfdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签筛选出室颤信号</span></span><br><span class="line">record = wfdb.rdrecord(<span class="string">'F:/VF/VFDB/424'</span>, channels=[<span class="number">0</span>], sampfrom=<span class="number">314749</span>, sampto=<span class="number">341173</span>)</span><br><span class="line">VF = record.p_signal</span><br><span class="line"></span><br><span class="line">vf = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(record.sig_len):</span><br><span class="line">    vf.append(VF[i][<span class="number">0</span>])</span><br><span class="line">vf = vf[<span class="number">5000</span>:<span class="number">7500</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot(vf, linewidth=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">"U/mv"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.xlabel(<span class="string">"time/s"</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(vf)</span><br><span class="line">data.to_excel(<span class="string">"vf1.xlsx"</span>)</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CVF%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%AC10s%E7%9A%84%E3%80%91.png" alt="image-20200520104746150"></p><p><strong>筛选10个数据片段</strong></p><p><strong>筛选正常数据</strong></p><p>下一步就是用算法将其判断出来，写个循环看看，Ndata数据的效果，用pt算法，另外一个也试试</p><p>数据片段的筛选，重新保存筛选，先选择算法进行分析。</p><p>TCI算法：</p><p><a href="https://link.springer.com/article/10.1186/1475-925X-4-60" target="_blank" rel="noopener">https://link.springer.com/article/10.1186/1475-925X-4-60</a></p><p>随便设定一个大于250和小于250就行了</p><p> 纪念下人生第一单哈哈哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;close all</span><br><span class="line">% 读取室颤数据</span><br><span class="line">data = xlsread(&apos;F:\VF\VFdata\0.xlsx&apos;);</span><br><span class="line">% 读取正常数据</span><br><span class="line">% data = xlsread(&apos;F:\VF\Ndata\0.xlsx&apos;);</span><br><span class="line"></span><br><span class="line">% 采样频率</span><br><span class="line">fs = 250;</span><br><span class="line"></span><br><span class="line">% 想要采样的时间长度为10s，所以数据长短通通为2500</span><br><span class="line">vf = data(2:2501, 2);</span><br><span class="line"></span><br><span class="line">% 将采样点的横坐标转换为s</span><br><span class="line">N = length(vf);</span><br><span class="line">m = 0 : N-1;</span><br><span class="line">t = m / fs;</span><br><span class="line"></span><br><span class="line">% 绘制出原始数据</span><br><span class="line">subplot(2,1,1)</span><br><span class="line">plot(t,vf,&apos;b&apos;);</span><br><span class="line"></span><br><span class="line">title(&apos;原始信号&apos;);</span><br><span class="line">xlabel(&apos;time/s&apos;);</span><br><span class="line">ylabel(&apos;U/mV&apos;);</span><br><span class="line"></span><br><span class="line">% 可要可不要这一步将数据平滑一下</span><br><span class="line">subplot(2,1,2)</span><br><span class="line">df = smooth(vf,3);</span><br><span class="line">plot(t,df);</span><br><span class="line">title(&apos;平滑后的信号&apos;);</span><br><span class="line">xlabel(&apos;time/s&apos;);</span><br><span class="line">ylabel(&apos;U/mV&apos;);</span><br><span class="line"></span><br><span class="line">% 利用TCI (Threshold crossing intervals)算法对TCI值进行判断</span><br><span class="line">% verbose = 0数据直接输出8个3s窗口的平均值，verbose = 1，进入调试界面</span><br><span class="line">verbose = 1;</span><br><span class="line">tci = VF_TCI(vf,fs,10,verbose);</span><br><span class="line"></span><br><span class="line">% VF的频率为250～500次/分钟，转换为ms为120-240ms，即可判定为室颤</span><br><span class="line">if (tci &gt;= 120) &amp;&amp; (tci &lt;= 240)</span><br><span class="line">    disp(&apos;该信号为室颤信号&apos;)</span><br><span class="line">else</span><br><span class="line">    disp(&apos;该信号为正常信号&apos;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>读取单个的图</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;close all</span><br><span class="line"></span><br><span class="line"><span class="comment">% 数据标签，将VF数据判定为1，正常的判定为0</span></span><br><span class="line">tag = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">i</span> &lt;= <span class="number">18</span></span><br><span class="line">        tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 循环读取数据，将VF数据判定为1，正常的判定为0</span></span><br><span class="line">num_vf = <span class="number">0</span>;</span><br><span class="line">num_n = <span class="number">0</span>;</span><br><span class="line">all = [];</span><br><span class="line">TCI = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    data = xlsread([<span class="string">'F:\VF\all_data\', num2str(i), '</span>.xlsx']);</span><br><span class="line">    fs = <span class="number">250</span>;</span><br><span class="line">    vf = data(<span class="number">2</span>:<span class="number">2501</span>, <span class="number">2</span>);    </span><br><span class="line">    tci = VF_TCI(vf,fs,<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">    TCI(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = tci;</span><br><span class="line">    <span class="keyword">if</span> (tci &gt;= <span class="number">120</span>) &amp;&amp; (tci &lt;= <span class="number">240</span>)</span><br><span class="line">        num_vf = num_vf + <span class="number">1</span>;</span><br><span class="line">        all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num_n = num_n + <span class="number">1</span>;</span><br><span class="line">        all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 进行比较，用标签和这个你判定的数据进行比较</span></span><br><span class="line">ALL = <span class="number">32</span>;</span><br><span class="line">True = <span class="number">0</span>;</span><br><span class="line">F = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span> : <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> all(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>) == tag(<span class="built_in">i</span>+<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        True = True + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        F = F + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span>     </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 输出得到判定准确的值，差不多准确率就基本可以了，毕竟100%了，再转换为百分数</span></span><br><span class="line">ACR = True / ALL;</span><br><span class="line">accuracy = strcat(num2str(ACR * <span class="number">100</span>),<span class="string">'%'</span>);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'准确率为:'</span>,accuracy]);</span><br></pre></td></tr></table></figure><p>输出为准确率</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tci</span> = <span class="title">VF_TCI</span><span class="params">(xf,fs,wL,verbose)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">% INPUT:</span></span><br><span class="line"><span class="comment">% - xf: ecg signal (preprocessed)</span></span><br><span class="line"><span class="comment">% - fs: sampling frequency</span></span><br><span class="line"><span class="comment">% - wL: window length, in seconds </span></span><br><span class="line"><span class="comment">% - verbose: debugging variable (1: plot; 0: default, not ploting)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% OUTPUT</span></span><br><span class="line"><span class="comment">% - tci parameter</span></span><br><span class="line"></span><br><span class="line">wl = <span class="number">1</span>*fs;  <span class="comment">% 1-sec window samples</span></span><br><span class="line">wa = <span class="number">3</span>*fs;  <span class="comment">% 3-sec window samples</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = wL<span class="number">-3</span>+<span class="number">1</span>; <span class="comment">% number of 3-sec windows in wl segment </span></span><br><span class="line"></span><br><span class="line"><span class="comment">%becg = zeros(1,wa);</span></span><br><span class="line">becg1 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line">becg2 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line">becg3 = <span class="built_in">zeros</span>(<span class="number">1</span>,wl);</span><br><span class="line"></span><br><span class="line">tci6 = <span class="built_in">zeros</span>(<span class="number">1</span>,L);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">0</span>:L<span class="number">-1</span></span><br><span class="line">    wsamples1 = <span class="built_in">j</span>*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">1</span>)*wl;</span><br><span class="line">    wsamples2 = (<span class="built_in">j</span>+<span class="number">1</span>)*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">2</span>)*wl;</span><br><span class="line">    wsamples3 = (<span class="built_in">j</span>+<span class="number">2</span>)*wl+<span class="number">1</span>:(<span class="built_in">j</span>+<span class="number">3</span>)*wl;</span><br><span class="line">    </span><br><span class="line">    stage1 = xf(wsamples1)-<span class="built_in">mean</span>(xf(wsamples1)); maxv = <span class="built_in">max</span>(stage1); </span><br><span class="line">    th1 = <span class="number">0.2</span>*maxv; becg1(stage1&gt;th1) = <span class="number">1</span>;</span><br><span class="line">    stage2 = xf(wsamples2)-<span class="built_in">mean</span>(xf(wsamples2)); maxv = <span class="built_in">max</span>(stage2); </span><br><span class="line">    th2 = <span class="number">0.2</span>*maxv; becg2(stage2&gt;th2) = <span class="number">1</span>;</span><br><span class="line">    stage3 = xf(wsamples3)-<span class="built_in">mean</span>(xf(wsamples3)); maxv = <span class="built_in">max</span>(stage3); </span><br><span class="line">    th3 = <span class="number">0.2</span>*maxv; becg3(stage3&gt;th3) = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    becg = [becg1 becg2 becg3];</span><br><span class="line">    </span><br><span class="line">    aux = [<span class="number">0</span> diff(becg)];</span><br><span class="line">    </span><br><span class="line">    s1 = <span class="built_in">find</span>(aux(<span class="number">1</span>:wl)==<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(s1)</span><br><span class="line">        t1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t1 = (wl-s1(<span class="keyword">end</span>))/fs;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    index = <span class="built_in">find</span>(aux(wl+<span class="number">1</span>:<span class="number">2</span>*wl));</span><br><span class="line">    s2 = aux(wl+<span class="number">1</span>:<span class="number">2</span>*wl);</span><br><span class="line">    pulses = s2(index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pulses(<span class="number">1</span>) == <span class="number">-1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">-1</span></span><br><span class="line">        t2 = <span class="number">0</span>;</span><br><span class="line">        t3 = (wl-index(<span class="keyword">end</span>))/fs;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">1</span></span><br><span class="line">        t2 = index(<span class="number">1</span>)/fs;</span><br><span class="line">        t3 = <span class="number">0</span>;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">-1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">1</span></span><br><span class="line">        t2 = <span class="number">0</span>;</span><br><span class="line">        t3 = <span class="number">0</span>;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses)+<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elseif</span> pulses(<span class="number">1</span>) == <span class="number">1</span> &amp;&amp; pulses(<span class="keyword">end</span>) == <span class="number">-1</span></span><br><span class="line">        t2 = index(<span class="number">1</span>)/fs;</span><br><span class="line">        t3 = (wl-index(<span class="keyword">end</span>))/fs;</span><br><span class="line">        N = (<span class="built_in">length</span>(pulses))/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">'This should not be happening!'</span>)</span><br><span class="line">        keyboard; <span class="comment">%better to debug</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">       </span><br><span class="line">    s4 = <span class="built_in">find</span>(aux(<span class="number">2</span>*wl+<span class="number">1</span>:<span class="number">3</span>*wl)==<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(s4)</span><br><span class="line">        t4 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t4 = s4(<span class="number">1</span>)/fs;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">    tci6(<span class="built_in">j</span>+<span class="number">1</span>) = <span class="number">1000</span>/((N<span class="number">-1</span>)+(t2/(t1+t2))+(t3/(t3+t4)));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%Plot data</span></span><br><span class="line">    <span class="keyword">if</span> verbose</span><br><span class="line">        </span><br><span class="line">        f = <span class="built_in">figure</span>;</span><br><span class="line">        t = [wsamples1 wsamples2 wsamples3]/fs;</span><br><span class="line">        stage = [stage1' stage2' stage3'];</span><br><span class="line">        </span><br><span class="line">        subplot(<span class="number">211</span>)        </span><br><span class="line">        <span class="built_in">plot</span>(t,stage); <span class="built_in">hold</span> on;</span><br><span class="line">        <span class="built_in">plot</span>(t,[th1*<span class="built_in">ones</span>(<span class="number">1</span>,wl) th2*<span class="built_in">ones</span>(<span class="number">1</span>,wl) th3*<span class="built_in">ones</span>(<span class="number">1</span>,wl)],<span class="string">'r'</span>);</span><br><span class="line">        xlabel(<span class="string">'time/s'</span>);</span><br><span class="line">        ylabel(<span class="string">'ECG and threshold'</span>);</span><br><span class="line">        </span><br><span class="line">        subplot(<span class="number">212</span>);</span><br><span class="line">        <span class="built_in">plot</span>(t,becg,<span class="string">'k'</span>); <span class="built_in">hold</span> on; stem(t,aux,<span class="string">'r'</span>); <span class="built_in">hold</span> on;</span><br><span class="line">        line([<span class="built_in">j</span>+<span class="number">1</span> <span class="built_in">j</span>+<span class="number">1</span>],[<span class="number">-1.2</span> <span class="number">1.2</span>]);line([<span class="built_in">j</span>+<span class="number">2</span> <span class="built_in">j</span>+<span class="number">2</span>],[<span class="number">-1.2</span> <span class="number">1.2</span>]);</span><br><span class="line">        axis([t(<span class="number">1</span>) t(<span class="keyword">end</span>) <span class="number">-1.2</span> <span class="number">1.2</span>])</span><br><span class="line">        xlabel(<span class="string">'time/s'</span>);</span><br><span class="line">        ylabel(<span class="string">'pulses'</span>);</span><br><span class="line">        msg = sprintf(<span class="string">'t_1=%2.2f\t\t t_2=%2.2f\t\t t_3=%2.2f\t\t t_4=%2.2f'</span>,...</span><br><span class="line">            t1,t2,t3,t4);</span><br><span class="line">        title(msg)</span><br><span class="line">        text(<span class="built_in">j</span>+<span class="number">1.2</span>,<span class="number">-0.5</span>,[<span class="string">'TCI = '</span> num2str(tci6(<span class="built_in">j</span>+<span class="number">1</span>))])</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">hold</span> off</span><br><span class="line">        <span class="comment">% 是否进行调试，观看效果</span></span><br><span class="line">        keyboard;</span><br><span class="line">        close(f);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    becg1 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    becg2 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    becg3 = <span class="built_in">zeros</span>(<span class="number">1</span>,wa/<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tci = <span class="built_in">mean</span>(tci6);</span><br></pre></td></tr></table></figure><p>TCI算法</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CTCI%E7%AE%97%E6%B3%95%E5%BE%97%E5%88%B0%E7%9A%84%E5%9B%BE" alt="image-20200520195855735"></p><p>准确率为100%结束</p><p><img src="http://img1.cache.netease.com/96/2014/8/12/2014081209202754754.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;心室纤颤-Ventricular-Fibrillation-，VF&quot;&gt;&lt;a href=&quot;#心室纤颤-Ventricular-Fibrillation-，VF&quot; class=&quot;headerlink&quot; title=&quot;心室纤颤(Ventricular Fibrillat
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>图像识别的目标</title>
    <link href="https://esyyes.github.io/2020/05/05/opencv/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
    <id>https://esyyes.github.io/2020/05/05/opencv/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E7%9A%84%E7%9B%AE%E6%A0%87/</id>
    <published>2020-05-05T13:54:25.000Z</published>
    <updated>2020-05-05T13:54:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像识别的学习目标"><a href="#图像识别的学习目标" class="headerlink" title="图像识别的学习目标"></a>图像识别的学习目标</h2><ol><li>写一篇专利</li></ol><p>专利：利用图像识别技术，识别QRS波形的R波</p><ol><li>写一个小论文</li></ol><p>利用图像识别来对睡眠进行分类，或者区分是否是OSA和健康人群</p><ol><li>把现在这篇小论文写完，然后重新学下数据处理方向的知识，图像处理还是要先理解</li><li>5月中旬争取写完小论文</li></ol><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5C%E5%96%B5%E5%86%85.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图像识别的学习目标&quot;&gt;&lt;a href=&quot;#图像识别的学习目标&quot; class=&quot;headerlink&quot; title=&quot;图像识别的学习目标&quot;&gt;&lt;/a&gt;图像识别的学习目标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;写一篇专利&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;专利：利用图像识别技术，识别QR
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-opencv基础入门</title>
    <link href="https://esyyes.github.io/2020/05/05/opencv/python-opencv%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://esyyes.github.io/2020/05/05/opencv/python-opencv%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2020-05-05T12:47:17.000Z</published>
    <updated>2020-05-05T12:47:17.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-Matplotlib视频讲解版</title>
    <link href="https://esyyes.github.io/2020/04/12/python/python-Matplotlib%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E7%89%88/"/>
    <id>https://esyyes.github.io/2020/04/12/python/python-Matplotlib%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E7%89%88/</id>
    <published>2020-04-12T04:22:04.000Z</published>
    <updated>2020-04-12T04:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-Matplotlib视频讲解版"><a href="#python-Matplotlib视频讲解版" class="headerlink" title="python-Matplotlib视频讲解版"></a>python-Matplotlib视频讲解版</h1><p>视频连接</p><p><a href="https://www.bilibili.com/video/BV1tt411e7zF?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1tt411e7zF?p=1</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制成一条线形式</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">7</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># xy范围</span></span><br><span class="line">plt.ylim((<span class="number">80</span>,<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 设定xy的尺度大小</span></span><br><span class="line">new_ticks = np.linspace(<span class="number">80</span>, <span class="number">100</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yticks改变坐标轴的大小</span></span><br><span class="line">plt.yticks(new_ticks, fontsize=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变标签注释的大小</span></span><br><span class="line">plt.ylabel(<span class="string">'Average Accuracy/%'</span>, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改横坐标的标签和字体大小，以及转换方向</span></span><br><span class="line">plt.xticks(x,(df.keys()), fontsize=<span class="number">8</span>, rotation=<span class="number">0</span>)</span><br><span class="line">l1, = ax.plot(x,y1,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line">l2, = ax.plot(x,y2,color=<span class="string">'blue'</span>,linewidth=<span class="number">3.0</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment"># 标准图例</span></span><br><span class="line">plt.legend(handles=[l1,l2],labels=[<span class="string">'Original model'</span>,<span class="string">'Optimization model'</span>],loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment"># shift+tab可以查看图中函数的设置</span></span><br><span class="line"><span class="comment"># 改变图的边框颜色</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cimage-20200412210230713.png" alt="image-20200412210230713"></p><p><a href="https://jishuin.proginn.com/p/7056.html" target="_blank" rel="noopener">https://jishuin.proginn.com/p/7056.html</a></p><p>这个链接中描述了很多绘制</p><p>多用shift+tab加来查看函数的说明</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-Matplotlib视频讲解版&quot;&gt;&lt;a href=&quot;#python-Matplotlib视频讲解版&quot; class=&quot;headerlink&quot; title=&quot;python-Matplotlib视频讲解版&quot;&gt;&lt;/a&gt;python-Matplotlib视频讲
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_可视化之seaborn</title>
    <link href="https://esyyes.github.io/2020/03/26/python/python-%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bseaborn/"/>
    <id>https://esyyes.github.io/2020/03/26/python/python-%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8Bseaborn/</id>
    <published>2020-03-26T13:16:31.000Z</published>
    <updated>2020-03-26T13:16:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-可视化之seaborn"><a href="#python-可视化之seaborn" class="headerlink" title="python_可视化之seaborn"></a>python_可视化之seaborn</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><p>主题修改：</p><p><a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/introductory/customizing.html</a></p><p>将自己的主题设定为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.cntofu.com/book/172/docs/20.md" target="_blank" rel="noopener">https://www.cntofu.com/book/172/docs/20.md</a></p><p>后面还是参考上面网址进行学习，基本已经理清seaborn怎么绘制。</p><p>好吧还是使用这个！</p><p><a href="https://www.jb51.net/article/104924.htm" target="_blank" rel="noopener">https://www.jb51.net/article/104924.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-可视化之seaborn&quot;&gt;&lt;a href=&quot;#python-可视化之seaborn&quot; class=&quot;headerlink&quot; title=&quot;python_可视化之seaborn&quot;&gt;&lt;/a&gt;python_可视化之seaborn&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python——读取excel文件之奇葩数据</title>
    <link href="https://esyyes.github.io/2020/03/25/python/python%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E4%B9%8B%E5%A5%87%E8%91%A9%E6%95%B0%E6%8D%AE/"/>
    <id>https://esyyes.github.io/2020/03/25/python/python%E2%80%94%E2%80%94%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E4%B9%8B%E5%A5%87%E8%91%A9%E6%95%B0%E6%8D%AE/</id>
    <published>2020-03-25T14:16:10.000Z</published>
    <updated>2020-03-25T14:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python——读取excel文件"><a href="#python——读取excel文件" class="headerlink" title="python——读取excel文件"></a>python——读取excel文件</h1><h2 id="对应3-25-RFE-RF特征选择进行绘图读取程序"><a href="#对应3-25-RFE-RF特征选择进行绘图读取程序" class="headerlink" title="对应3-25 RFE-RF特征选择进行绘图读取程序"></a>对应3-25 RFE-RF特征选择进行绘图读取程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取excel表格</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = pd.read_excel(<span class="string">'E:/features/%s.xlsx'</span>%<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">data.head()</span><br><span class="line">数据如下表所示，在生成excel的时候，直接存的列表，纯属失误</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right"></th><th align="left">0</th><th align="right">1</th></tr></thead><tbody><tr><td align="right">0</td><td align="left">[0.9420289855072463, 0.9710144927536232, 0.956…</td><td align="right">[0.9710144927536232, 0.9565217391304348, 0.956…</td></tr><tr><td align="right">1</td><td align="left">[0.7523809523809524, 0.7142857142857143, 0.742…</td><td align="right">[0.6285714285714286, 0.780952380952381, 0.7523…</td></tr><tr><td align="right">2</td><td align="left">[0.6761904761904762, 0.819047619047619, 0.9047…</td><td align="right">[0.7333333333333333, 0.7714285714285715, 0.847…</td></tr><tr><td align="right">3</td><td align="left">[0.7692307692307693, 0.8717948717948718, 0.910…</td><td align="right">[0.7307692307692307, 0.8846153846153846, 0.871…</td></tr><tr><td align="right">4</td><td align="left">[0.7230046948356808, 0.7981220657276995, 0.807…</td><td align="right">[0.6619718309859155, 0.7417840375586855, 0.737…</td></tr></tbody></table><p>一个空格中有运行的25个数据。需要将18个数据组，每个数据运行两次，25个数据，分别取对应的行进行求平均值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data = np.array(data)</span><br><span class="line">train_x_list = train_data.tolist() <span class="comment">#list</span></span><br><span class="line">train_x_list[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="string">'[0.9420289855072463, 0.9710144927536232, 0.9565217391304348, 0.9710144927536232, 0.9565217391304348, 0.9565217391304348, 0.9565217391304348, 0.9710144927536232, 0.9710144927536232, 0.9710144927536232, 0.9420289855072463, 0.9565217391304348, 0.9710144927536232, 0.9710144927536232, 0.9565217391304348, 0.9565217391304348, 0.9710144927536232, 0.9565217391304348, 0.9420289855072463, 0.9565217391304348, 0.9420289855072463, 0.9565217391304348, 0.9710144927536232, 0.9565217391304348, 0.9420289855072463]'</span></span><br></pre></td></tr></table></figure><p>先转换为列表，问题1，它表达的是字符串，要先去掉’’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(train_x_list[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 转换为列表。用eval()函数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list_mean = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">    list_x = eval(train_x_list[i][<span class="number">0</span>])</span><br><span class="line">    list_y = eval(train_x_list[i][<span class="number">1</span>])</span><br><span class="line">    list_m = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list_x)):</span><br><span class="line">        list_m.append((list_x[j] + list_y[j])/<span class="number">2</span>)</span><br><span class="line">    list_mean.append(list_m)</span><br></pre></td></tr></table></figure><p>生成一个含有18个小列表，已经求了一次平均，每个小列表里面有25个数据组</p><p>参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list_f = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">25</span>):</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        s.append(list_mean[i][j])</span><br><span class="line">    c = (np.array(s)).mean()</span><br><span class="line">    list_f.append(c)</span><br></pre></td></tr></table></figure><p>均值化，只有一个25数据的列表</p><p>根据这个画图即可</p><h2 id="参考-3-19-绘制特征选择曲线-程序"><a href="#参考-3-19-绘制特征选择曲线-程序" class="headerlink" title="参考 3-19 绘制特征选择曲线 程序"></a>参考 3-19 绘制特征选择曲线 程序</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python——读取excel文件&quot;&gt;&lt;a href=&quot;#python——读取excel文件&quot; class=&quot;headerlink&quot; title=&quot;python——读取excel文件&quot;&gt;&lt;/a&gt;python——读取excel文件&lt;/h1&gt;&lt;h2 id=&quot;对应3-2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_Accuracy,Precison,Recall,F1 score</title>
    <link href="https://esyyes.github.io/2020/03/22/python/python-Accuracy-Precison-Recall-F1-score/"/>
    <id>https://esyyes.github.io/2020/03/22/python/python-Accuracy-Precison-Recall-F1-score/</id>
    <published>2020-03-22T13:31:12.000Z</published>
    <updated>2020-03-22T13:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Accuracy-Precison-Recall-F1-score"><a href="#Accuracy-Precison-Recall-F1-score" class="headerlink" title="Accuracy,Precison,Recall,F1 score"></a>Accuracy,Precison,Recall,F1 score</h1><p>主要参考这两篇博文</p><p><a href="https://blog.csdn.net/u014380165/article/details/77493978" target="_blank" rel="noopener">https://blog.csdn.net/u014380165/article/details/77493978</a></p><p><a href="https://www.cnblogs.com/laozhanghahaha/p/12374027.html" target="_blank" rel="noopener">https://www.cnblogs.com/laozhanghahaha/p/12374027.html</a></p><p>假设一个二分类问题，样本有正负两个类别。那么模型预测的结果和真实标签的组合就有4种：<strong>TP，FP，FN，TN</strong>，如下图所示。这4个分别表示：实际为正样本你预测为正样本，实际为负样本你预测为正样本，实际为正样本你预测为负样本，实际为负样本你预测为负样本。<br><img src="https://img-blog.csdnimg.cn/20181214093105758.png" alt="在这里插入图片描述"></p><p><strong>TP(True Positive)</strong> －  被正确预测的正例．表示真实值为正，同时也被正确的预测为正；</p><p><strong>TN(True Negative)</strong> －被正确预测的反例．表示真实值为反例，也被正确的预测为反例；</p><p><strong>FP(False Positive)</strong> －  表示真实值为负例，被错误的预测为正例；</p><p><strong>FN(False Negative)－</strong>表示真实值为正例，被错误的预测为反例；</p><p>那么Precision和Recall表示什么意思？一般Precision和Recall都是针对某个类而言的，比如正类别的Recall，负类别的Recall等。如果<strong>你是10分类，那么可以有1这个类别的Precision，2这个类别的Precision，3这个类别的Recall等。而没有类似全部数据集的Recall或Precision这种说法。</strong></p><p>Precison,Recall都对应的2分类，是单独一个类别的准确率</p><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Cprecison.png" alt="image-20200322213614527"></p><p><strong>Precision</strong>适用场景:当反例被错误的预测为正例（假正例）产生的代价很高的时候，适合用查准率，因为高查准率意味着低假正率/假阳性．比如在垃圾邮件检测中，假正例意味着非垃圾邮件（实际为负）被错误的预测为垃圾邮件（预测为正）．如果一个垃圾邮件监测系统的查准率不高导致很多非垃圾邮件被归到垃圾邮箱里去，那么邮箱用户可能会丢失或者漏看一些很重要的邮件．</p><p><strong>Recall</strong>使用场景:当正例被错误的预测为反例（假反例）产生很高的代价时，用查全率，因为高查全率意味着低假反率/假阴性．比如说在银行的欺诈检测或医院的病患者检测中，如果将欺诈性交易（实际为正）预测为非欺诈性交易（预测为负），则可能会给银行带来非常严重的损失。再比如以最近的新冠疫情为例，如果一个患病者（实际为正）经过试剂检测被预测为没有患病（预测为负），这样的假反例或者说假阴性产生的风险就非常大．</p><p>还有一个概念：<strong>Accuracy，表示你有多少比例的样本预测对了</strong>，公式如下，分母永远是全部样本的数量，很好理解。很容易扩展到多类别的情况，比如10分类，<strong>那么分子就是第一个类别预测对了多少个+第二个类别预测对了多少个+…+第十个类别预测对了多少个。</strong></p><p><img src="https://img-blog.csdn.net/20170823081655165?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDM4MDE2NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>所以用Accuracy来进行判断分类的准确率</p><p>F1score的计算是这样的：1/F1score = 1/2(1/recall + 1/precision)*，简单换算后就成了：F1score=2recallprecision/(recall+precision)。同样F1score也是针对某个样本而言的。一般而言F1score用来综合precision和recall作为一个评价指标。还有F1score的变形，主要是添加一个权重系数可以根据需要对recall和precision赋予不同的权重。<br><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5CF1SCORE.png" alt="image-20200322214139789"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Accuracy-Precison-Recall-F1-score&quot;&gt;&lt;a href=&quot;#Accuracy-Precison-Recall-F1-score&quot; class=&quot;headerlink&quot; title=&quot;Accuracy,Precison,Recall,F
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_随机森林参数设置</title>
    <link href="https://esyyes.github.io/2020/03/22/python/python-%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
    <id>https://esyyes.github.io/2020/03/22/python/python-%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-03-22T05:37:20.000Z</published>
    <updated>2020-03-22T05:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i0.hdslb.com/bfs/archive/f252847e6071d16bf5f9b423d759b2c8a0c6eb3d.jpg" alt=""></p><p><img src="http://i2.hdslb.com/bfs/archive/2c891439af62694315487dc640d3beb6d5709593.jpg" alt=""></p><h1 id="随机森林参数设置"><a href="#随机森林参数设置" class="headerlink" title="随机森林参数设置"></a>随机森林参数设置</h1><h2 id="随机森林介绍"><a href="#随机森林介绍" class="headerlink" title="随机森林介绍"></a>随机森林介绍</h2><h3 id="随机森林定义"><a href="#随机森林定义" class="headerlink" title="随机森林定义"></a>随机森林定义</h3><p>在<a href="https://baike.baidu.com/item/机器学习" target="_blank" rel="noopener">机器学习</a>中，<strong>随机森林是一个包含多个决策树的<a href="https://baike.baidu.com/item/分类器" target="_blank" rel="noopener">分类器</a></strong>， 并且其输出的类别是由个别树输出的类别的众数而定。 Leo Breiman和Adele Cutler发展出推论出随机森林的算法。 而 “Random Forests” 是他们的<a href="https://baike.baidu.com/item/商标" target="_blank" rel="noopener">商标</a>。 这个术语是1995年由贝尔实验室的Tin Kam Ho所提出的随机决策森林（random decision forests）而来的。这个方法则是结合 Breimans 的 “Bootstrap aggregating” 想法和 Ho 的”random subspace method”以建造<a href="https://baike.baidu.com/item/决策树" target="_blank" rel="noopener">决策树</a>的集合。</p><h3 id="随机森林参数定义"><a href="#随机森林参数定义" class="headerlink" title="随机森林参数定义"></a>随机森林参数定义</h3><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html" target="_blank" rel="noopener">https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html</a></p><p><a href="https://blog.csdn.net/Longtermevolution/article/details/100919721" target="_blank" rel="noopener">https://blog.csdn.net/Longtermevolution/article/details/100919721</a></p><p><strong>n_estimators：</strong></p><p>森林中数的个数。<br>这个属性是典型的<strong>模型表现与模型效率成反比的影响因子</strong>，即便如此，你还是应该尽可能提高这个数字，以让你的模型更准确更稳定。</p><p><strong>criterion ：</strong></p><p>度量分裂的标准。可选值：“mse”，均方差（mean squared error）；“mae”，平均绝对值误差（mean absolute error） 支持的标准是基尼杂质的“<strong>gini（基尼）</strong>”和<strong>信息增益的“entropy（熵</strong>）”。注意：此参数是特定于树的。<strong>默认是基尼</strong></p><p><strong>max_features</strong> ：</p><p>寻找<strong>最佳分裂点时考虑的特征数目</strong>。可选值，int（具体的数目），float（数目的百分比），string（“auto”， “sqrt”，“log2”）.<br>这一属性是对单个树来设置的，通常来讲，<strong>这个值越大单棵树可以考虑的属性越多，则模型的表现就越好</strong>。但是这也不是肯定的，不过有一点是肯定的，增加这个值会导致算法运行速度变慢，所以需要我们考虑去达到一个平衡。</p><p><strong>max_depth :</strong>integer或者None。树的最大深度，如果None，节点扩展直到所有叶子是纯的或者所有叶子节点包含的样例数小于min_samples_split </p><p><strong>min_samples_split</strong> ： 分裂内部节点需要的最少样例数。int(具体数目),float(数目的百分比) </p><p><strong>min_samples_leaf</strong> ：叶子节点上应有的最少样例数。int(具体数目),float(数目的百分比)。<br>更少的节点数使得模型更容易遭受noise data的影响，我通常设置这个值大于50，但是你需要寻找最适合你的数值。 </p><p><strong>min_weight_fraction_leaf ：</strong> </p><p><strong>max_leaf_nodes ：</strong>以”最优优先方式”(best-first fashion),最优节点定义为:纯度的相对减少.如果None则不限制叶子节点个数;[float]<br><strong>min_impurity_split :</strong> 树增长提前结束的阈值.对于当前节点,大于这个阈值将分裂,否则就看做叶子节点; [float]<br><strong>min_impurity_decrease ：</strong>一个阈值,表示一个节点分裂的条件是:如果这次分裂纯度的减少大于等于这这个值.<br><strong>bootstrap</strong> ：构建数是不是采用有放回样本的方式(bootstrap samples); [True/False]<br><strong>oob_score ：</strong>交叉验证相关的属性。<br><strong>n_jobs ：</strong>设定fit和predict阶段并列执行的任务个数,<strong>如果设置为-1表示并行执行的任务数等于计算级核数</strong>; [integer, optional (default=1)]<br><strong>random_state</strong> ：如果是<strong>int数值表示它就是随机数产生器的种子</strong>.如果指定RandomState实例,它就是随机产生器的种子.如果是None,随机数产生器是np.random所用的RandomState实例; [int, RandomState instance or None, optional (default=None)]<br><strong>verbose ：</strong>控制<strong>构建数过程的冗长度</strong>; [int, optional (default=0)]<br><strong>warm_start ：</strong>当设置为True,重新使用之前的结构去拟合样例并且加入更多的估计器(estimators,在这里就是随机树)到组合器中; [True/False]<br><strong>class_weight: “</strong>banlanced”模式是根据y标签值自动调整权值与输入数据的类频率成反比,计算公式是:n_samples / (n_classes np.bincount(y)).“balanced_subsample”模式的与”balanced模式相同,只<strong>不过在每一次树增长过程中权值的计算是根据有放回样本的</strong>.</p><h2 id="模型调参利器-gridSearchCV（网格搜索）"><a href="#模型调参利器-gridSearchCV（网格搜索）" class="headerlink" title="模型调参利器 gridSearchCV（网格搜索）"></a>模型调参利器 gridSearchCV（网格搜索）</h2><p>GridSearchCV，它存在的意义就是<strong>自动调参</strong>，只要把参数输进去，就能给出<strong>最优化的结果和参数</strong>。但是这个方法适合于<strong>小数据集</strong>，一旦数据的量级上去了，很难得出结果。这个时候就是需要动脑筋了。数据量比较大的时候可以使用一个快速调优的方法——坐标下降。它其实是一种<strong>贪心算法</strong>：<strong>拿当前对模型影响最大的参数调优，直到最优化；再拿下一个影响最大的参数调优</strong>，如此下去，直到所有的参数调整完毕。这个方法的缺点就是可能会调到局部最优而不是全局最优，但是省时间省力，巨大的优势面前，还是试一试吧，后续可以再拿bagging再优化。</p><h2 id="2-参数说明"><a href="#2-参数说明" class="headerlink" title="2.参数说明"></a>2.参数说明</h2><p><em>class sklearn.model_selection.<strong>GridSearchCV</strong>(estimator, param_grid, scoring=None, fit_params=None, n_jobs=1, iid=True, refit=True, cv=None, verbose=0, pre_dispatch=‘2*n_jobs’, error_score=’raise’, return_train_score=’warn’)</em></p><p><strong>（1）</strong>    <strong><em>estimator\</em></strong></p><p>选择使用的分类器，并且传入除需要确定最佳的参数之外的其他参数。每一个分类器都需要一个scoring参数，或者score方法：estimator=RandomForestClassifier(min_samples_split=100,min_samples_leaf=20,max_depth=8,max_features=’sqrt’,random_state=10),</p><p><strong>（2）</strong>    <strong><em>param_grid\</em></strong></p><p>需要最优化的参数的取值，值为字典或者列表，例如：param_grid =param_test1，param_test1 = {‘n_estimators’:range(10,71,10)}。</p><p><strong>（3）</strong>    <strong><em>scoring=None\</em></strong></p><p>模型评价标准，默认None,这时需要使用score函数；或者如scoring=’roc_auc’，根据所选模型不同，评价准则不同。字符串（函数名），或是可调用对象，需要其函数签名形如：scorer(estimator, X, y)；如果是None，则使用estimator的误差估计函数。具体值的选取看本篇第三节内容。</p><p><strong>（4）</strong>    <strong><em>fit_params=None\</em></strong></p><p><strong>（5）</strong>    <strong><em>n_jobs=1\</em></strong></p><p>n_jobs: 并行数，int：个数,-1：跟CPU核数一致, 1:默认值</p><p><strong>（6）</strong>    <strong><em>iid=True\</em></strong></p><p><strong>iid</strong>:默认True,为True时，默认为各个样本fold概率分布一致，误差估计为所有样本之和，而非各个fold的平均。</p><p><strong>（7）</strong>    <strong><em>refit=True\</em></strong></p><p>默认为True,程序将会以交叉验证训练集得到的最佳参数，重新对所有可用的训练集与开发集进行，作为最终用于性能评估的最佳模型参数。即在搜索参数结束后，用最佳参数结果再次fit一遍全部数据集。</p><p><strong>（8）</strong>    <strong><em>cv=None\</em></strong></p><p>交叉验证参数，默认None，使用三折交叉验证。指定fold数量，默认为3，也可以是yield训练/测试数据的生成器。</p><p><strong>（9）</strong>    <strong><em>verbose=0\</em>, *scoring=None*</strong></p><p><strong>verbose</strong>：日志冗长度，int：冗长度，0：不输出训练过程，1：偶尔输出，&gt;1：对每个子模型都输出。</p><p><strong>（10）</strong>  <strong><em>pre_dispatch=‘2*n_jobs’\</em></strong></p><p>指定总共分发的并行任务数。当n_jobs大于1时，数据将在每个运行点进行复制，这可能导致OOM，而设置pre_dispatch参数，则可以预先划分总共的job数量，使数据最多被复制pre_dispatch次</p><p><strong>（11）</strong>  <strong><em>error_score=’raise’\</em></strong></p><p><strong>（12）</strong>  <strong><em>return_train_score=’warn’\</em></strong></p><p>如果“False”，cv_results_属性将不包括训练分数</p><p>回到sklearn里面的GridSearchCV，GridSearchCV用于系统地遍历多种参数组合，通过交叉验证确定最佳效果参数。</p><p><strong>打算使用网格搜索对模型进行调优，然后再进行交叉验证！</strong></p><h2 id="步骤实现："><a href="#步骤实现：" class="headerlink" title="步骤实现："></a>步骤实现：</h2><ol><li>想让树的数目从10到100</li></ol><p>生成一个10,100的列表</p><p>list(range(10,100))</p><ol start="2"><li>构建循环</li><li>实现代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">rfc = RandomForestClassifier()</span><br><span class="line"></span><br><span class="line">tuned_parameter = [&#123; <span class="string">'n_estimators'</span>:list(range(<span class="number">10</span>, <span class="number">100</span>))&#125;]</span><br><span class="line">对模型进行交叉验证，<span class="comment"># 将训练/测试数据集划分10个互斥子集</span></span><br><span class="line"><span class="comment"># kflod = StratifiedKFold(n_splits=10, shuffle = True,random_state=7)</span></span><br><span class="line"><span class="comment"># 将模型进行网格搜索调优</span></span><br><span class="line">clf = GridSearchCV(estimator=rfc,param_grid=tuned_parameter, cv=kflod, n_jobs=<span class="number">1</span>)</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"><span class="comment"># 将模型进行网格搜索调优</span></span><br><span class="line">print(<span class="string">"Best: %f using %s"</span> % (clf.best_score_,clf.best_params_))</span><br><span class="line">out：</span><br><span class="line">Best: <span class="number">0.912500</span> using &#123;<span class="string">'n_estimators'</span>: <span class="number">28</span>&#125;</span><br></pre></td></tr></table></figure><p>没啥必要循环了，每次都在变，选个最高的模型越复杂越好，就选14的倍数，<strong>28</strong></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a><strong>参考博客</strong></h2><p>参考这篇对模型进行优化，还可以用下这个模型</p><p><a href="https://blog.csdn.net/weixin_41988628/article/details/83098130" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41988628/article/details/83098130</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 数据科学计算工具</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 数值计算工具</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 可视化</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns <span class="comment"># matplotlib的高级API</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold <span class="comment">#交叉验证</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV <span class="comment">#网格搜索</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="comment">#将数据集分开成训练集和测试集</span></span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier                     <span class="comment">#xgboost</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pima = pd.read_csv(<span class="string">"pima_indians-diabetes.csv"</span>)</span><br><span class="line">print(pima.head())</span><br><span class="line"></span><br><span class="line">x = pima.iloc[:,<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">y = pima.iloc[:,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">seed = <span class="number">7</span> <span class="comment">#重现随机生成的训练</span></span><br><span class="line">test_size = <span class="number">0.33</span> <span class="comment">#33%测试，67%训练</span></span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=test_size, random_state=seed</span><br><span class="line">model = XGBClassifier()               </span><br><span class="line">learning_rate = [<span class="number">0.0001</span>,<span class="number">0.001</span>,<span class="number">0.01</span>,<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>] <span class="comment">#学习率</span></span><br><span class="line">gamma = [<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">0.01</span>, <span class="number">0.001</span>]</span><br><span class="line"></span><br><span class="line">param_grid = dict(learning_rate = learning_rate,gamma = gamma)<span class="comment">#转化为字典格式，网络搜索要求</span></span><br><span class="line"></span><br><span class="line">kflod = StratifiedKFold(n_splits=<span class="number">10</span>, shuffle = <span class="literal">True</span>,random_state=<span class="number">7</span>)<span class="comment">#将训练/测试数据集划分10个互斥子集，</span></span><br><span class="line"></span><br><span class="line">grid_search = GridSearchCV(model,param_grid,scoring = <span class="string">'neg_log_loss'</span>,n_jobs = <span class="number">-1</span>,cv = kflod)</span><br><span class="line"><span class="comment">#scoring指定损失函数类型，n_jobs指定全部cpu跑，cv指定交叉验证</span></span><br><span class="line">grid_result = grid_search.fit(X_train, Y_train) <span class="comment">#运行网格搜索</span></span><br><span class="line">print(<span class="string">"Best: %f using %s"</span> % (grid_result.best_score_,grid_search.best_params_))</span><br><span class="line"><span class="comment">#grid_scores_：给出不同参数情况下的评价结果。best_params_：描述了已取得最佳结果的参数的组合</span></span><br><span class="line"><span class="comment">#best_score_：成员提供优化过程期间观察到的最好的评分</span></span><br><span class="line"><span class="comment">#具有键作为列标题和值作为列的dict，可以导入到DataFrame中。</span></span><br><span class="line"><span class="comment">#注意，“params”键用于存储所有参数候选项的参数设置列表。</span></span><br><span class="line">means = grid_result.cv_results_[<span class="string">'mean_test_score'</span>]</span><br><span class="line">params = grid_result.cv_results_[<span class="string">'params'</span>]</span><br><span class="line"><span class="keyword">for</span> mean,param <span class="keyword">in</span> zip(means,params):</span><br><span class="line">    print(<span class="string">"%f  with:   %r"</span> % (mean,param))</span><br></pre></td></tr></table></figure><h1 id="忽略警告"><a href="#忽略警告" class="headerlink" title="忽略警告"></a>忽略警告</h1><p>每次都会出现一大堆的红字，看到就不舒服，以后将这个作为第一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br></pre></td></tr></table></figure><p>在PyCharm中提示shadows name ‘xxxx’ from outer scope，当你在外部有个相同名称的变量在方法内部被重新指定了新的值，也就是说你在外部的相同名称的变量压根就没有任何作用。所以PyCharm就回提示这个信息。这个时候就需要我们去调整具体代码了。</p><p>意思就是在pycharm中，函数中的变量最好跟外部的变量不一样，要不然就会警告</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://i0.hdslb.com/bfs/archive/f252847e6071d16bf5f9b423d759b2c8a0c6eb3d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.hdslb.com/bfs/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_文件存取操作</title>
    <link href="https://esyyes.github.io/2020/03/21/python/python-%E6%96%87%E4%BB%B6%E5%AD%98%E5%8F%96%E6%93%8D%E4%BD%9C/"/>
    <id>https://esyyes.github.io/2020/03/21/python/python-%E6%96%87%E4%BB%B6%E5%AD%98%E5%8F%96%E6%93%8D%E4%BD%9C/</id>
    <published>2020-03-21T06:50:12.000Z</published>
    <updated>2020-03-21T06:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-文件存取操作"><a href="#python-文件存取操作" class="headerlink" title="python_文件存取操作"></a>python_文件存取操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取第一个数据</span></span><br><span class="line">f = open(<span class="string">r'E:/test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    result.append(list(map(str, line.split(<span class="string">','</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表中的数据从第5列后开始删除</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">    <span class="keyword">del</span> result[i][<span class="number">4</span>:]</span><br></pre></td></tr></table></figure><p><strong>删除列表后面的几列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> result[i][<span class="number">4</span>:]</span><br></pre></td></tr></table></figure><p>[‘1729162717’, ‘2169702956’, ‘57181’, ‘59445’]</p><p><strong>删除引号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time     : 2020/3/21</span></span><br><span class="line"><span class="comment"># @Author   : esy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取txt文件</span></span><br><span class="line">f = open(<span class="string">r'E:/test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    result.append(list(map(str, line.split(<span class="string">','</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">    <span class="keyword">del</span> result[i][<span class="number">-2</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">data2 = result</span><br><span class="line"><span class="comment"># # 将str数据转换为整数</span></span><br><span class="line"><span class="comment"># data2 = []</span></span><br><span class="line"><span class="comment"># for j in range(len(result)):</span></span><br><span class="line"><span class="comment">#     list2 = []</span></span><br><span class="line"><span class="comment">#     for i in range(len(result[j])):</span></span><br><span class="line"><span class="comment">#         list2.append(int(result[j][i]))</span></span><br><span class="line"><span class="comment">#     data2.append(list2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取xlsx文件，是转换为datarafme</span></span><br><span class="line">df = pd.read_excel(<span class="string">'E:/tt.xlsx'</span>)</span><br><span class="line">data = pd.get_dummies(df.iloc[<span class="number">0</span>:])</span><br><span class="line"><span class="comment"># 0插补</span></span><br><span class="line">data = data.fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其转换为数组</span></span><br><span class="line">train_data = np.array(data)</span><br><span class="line"><span class="comment"># 将其转换为列表</span></span><br><span class="line">train_x_list = train_data.tolist() <span class="comment">#list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表叠加到后面去</span></span><br><span class="line">data1 = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(train_x_list)):</span><br><span class="line">    list1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_x_list[j])):</span><br><span class="line">        list1.append(int(train_x_list[j][i]))</span><br><span class="line">    data1.append(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量保存文件</span></span><br><span class="line">now = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">90</span>):</span><br><span class="line">    shu = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data1)):</span><br><span class="line">        <span class="comment"># 指定列进行添加数据</span></span><br><span class="line">        data2[i].insert(<span class="number">7</span>, int(data1[i][j]))</span><br><span class="line">        shu.append(data2[i])</span><br><span class="line">    now.append(shu)</span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    np.savetxt(<span class="string">"E:/3211/%s.txt"</span>%j, now[j], fmt=<span class="string">'%s'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> range(len(data2)):</span><br><span class="line">        <span class="keyword">del</span> data2[s][<span class="number">-2</span>:<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">"1"</span>)</span><br></pre></td></tr></table></figure><p>其实根本没必要删除引号，再进行保存文件时，就已经删除了引号</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190120/efdb6b16121348c2bd19e0d017d7563e.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-文件存取操作&quot;&gt;&lt;a href=&quot;#python-文件存取操作&quot; class=&quot;headerlink&quot; title=&quot;python_文件存取操作&quot;&gt;&lt;/a&gt;python_文件存取操作&lt;/h1&gt;&lt;figure class=&quot;highlight pyth
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python_Matplotlib</title>
    <link href="https://esyyes.github.io/2020/03/19/python/python-Matplotlib/"/>
    <id>https://esyyes.github.io/2020/03/19/python/python-Matplotlib/</id>
    <published>2020-03-19T07:38:53.000Z</published>
    <updated>2020-03-19T07:38:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-Matplotlib"><a href="#python-Matplotlib" class="headerlink" title="python_Matplotlib"></a>python_Matplotlib</h1><p>参考这个即可</p><p><a href="https://www.jb51.net/article/168302.htm" target="_blank" rel="noopener">https://www.jb51.net/article/168302.htm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>横纵坐标的确定，以绘制特征选择曲线为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">25</span>)</span><br><span class="line">y为N123RW,DLRW,SRW</span><br></pre></td></tr></table></figure><p>绘制最简单的图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">25</span>)</span><br><span class="line">y1 = N123RW</span><br><span class="line">y2 = DLRW</span><br><span class="line">y3 = SRW</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y1) </span><br><span class="line">plt.xlabel(<span class="string">"Characteristic number"</span>) </span><br><span class="line">plt.ylabel(<span class="string">"Accuracy of RF"</span>)</span><br><span class="line">plt.title(<span class="string">"Feature elimination based on DBT and RFE"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Ctest1.png" alt="image-20200319162254065"></p><h2 id="对点进行标记"><a href="#对点进行标记" class="headerlink" title="对点进行标记"></a>对点进行标记</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y1,<span class="string">"*r"</span>)</span><br><span class="line"><span class="comment"># 只有点</span></span><br><span class="line">plt.plot(x,y1,<span class="string">"*r--"</span>)</span><br><span class="line"><span class="comment"># 带虚线的点</span></span><br></pre></td></tr></table></figure><p><img src="H:%5Cmyboke%5Cmybike%5Csource%5Cimages%5Ctest2.png" alt="image-20200319162723556"></p><table><thead><tr><th><code>&#39;-&#39;</code></th><th>实线样式</th></tr></thead><tbody><tr><td><code>&#39;--&#39;</code></td><td>短横线样式</td></tr><tr><td><code>&#39;-.&#39;</code></td><td>点划线样式</td></tr><tr><td><code>&#39;:&#39;</code></td><td>虚线样式</td></tr><tr><td><code>&#39;.&#39;</code></td><td>点标记</td></tr><tr><td><code>&#39;,&#39;</code></td><td>像素标记</td></tr><tr><td><code>&#39;o&#39;</code></td><td>圆标记</td></tr><tr><td><code>&#39;v&#39;</code></td><td>倒三角标记</td></tr><tr><td><code>&#39;^&#39;</code></td><td>正三角标记</td></tr><tr><td><code>&#39;&lt;&#39;</code></td><td>左三角标记</td></tr><tr><td><code>&#39;&gt;&#39;</code></td><td>右三角标记</td></tr><tr><td><code>&#39;1&#39;</code></td><td>下箭头标记</td></tr><tr><td><code>&#39;2&#39;</code></td><td>上箭头标记</td></tr><tr><td><code>&#39;3&#39;</code></td><td>左箭头标记</td></tr><tr><td><code>&#39;4&#39;</code></td><td>右箭头标记</td></tr><tr><td><code>&#39;s&#39;</code></td><td>正方形标记</td></tr><tr><td><code>&#39;p&#39;</code></td><td>五边形标记</td></tr><tr><td><code>&#39;*&#39;</code></td><td>星形标记</td></tr><tr><td><code>&#39;h&#39;</code></td><td>六边形标记 1</td></tr><tr><td><code>&#39;H&#39;</code></td><td>六边形标记 2</td></tr><tr><td><code>&#39;+&#39;</code></td><td>加号标记</td></tr><tr><td><code>&#39;x&#39;</code></td><td>X 标记</td></tr><tr><td><code>&#39;D&#39;</code></td><td>菱形标记</td></tr><tr><td><code>&#39;d&#39;</code></td><td>窄菱形标记</td></tr><tr><td>`’</td><td>‘`</td></tr><tr><td><code>&#39;_&#39;</code></td><td>水平线标记</td></tr></tbody></table><table><thead><tr><th align="left">字符</th><th align="left">颜色</th></tr></thead><tbody><tr><td align="left"><code>&#39;b&#39;</code></td><td align="left">蓝色</td></tr><tr><td align="left"><code>&#39;g&#39;</code></td><td align="left">绿色</td></tr><tr><td align="left"><code>&#39;r&#39;</code></td><td align="left">红色</td></tr><tr><td align="left"><code>&#39;c&#39;</code></td><td align="left">青色</td></tr><tr><td align="left"><code>&#39;m&#39;</code></td><td align="left">品红色</td></tr><tr><td align="left"><code>&#39;y&#39;</code></td><td align="left">黄色</td></tr><tr><td align="left"><code>&#39;k&#39;</code></td><td align="left">黑色</td></tr><tr><td align="left"><code>&#39;w&#39;</code></td><td align="left">白色</td></tr></tbody></table><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>图像不清晰，横坐标想用12345-25表示，字体太小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">属性                      值类型</span><br><span class="line">alpha                   浮点值</span><br><span class="line">animated                [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">antialiased <span class="keyword">or</span> aa       [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">clip_box                matplotlib.transform.Bbox 实例</span><br><span class="line">clip_on                 [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">clip_path               Path 实例， Transform，以及Patch实例</span><br><span class="line">color <span class="keyword">or</span> c              任何 matplotlib 颜色</span><br><span class="line">contains                命中测试函数</span><br><span class="line">dash_capstyle           [<span class="string">'butt'</span> / <span class="string">'round'</span> / <span class="string">'projecting'</span>]</span><br><span class="line">dash_joinstyle          [<span class="string">'miter'</span> / <span class="string">'round'</span> / <span class="string">'bevel'</span>]</span><br><span class="line">dashes                  以点为单位的连接/断开墨水序列</span><br><span class="line">data                    (np.array xdata, np.array ydata)</span><br><span class="line">figure                  matplotlib.figure.Figure 实例</span><br><span class="line">label                   任何字符串</span><br><span class="line">linestyle <span class="keyword">or</span> ls         [ <span class="string">'-'</span> / <span class="string">'--'</span> / <span class="string">'-.'</span> / <span class="string">':'</span> / <span class="string">'steps'</span> / ...]</span><br><span class="line">linewidth <span class="keyword">or</span> lw         以点为单位的浮点值</span><br><span class="line">lod                     [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">marker                  [ <span class="string">'+'</span> / <span class="string">','</span> / <span class="string">'.'</span> / <span class="string">'1'</span> / <span class="string">'2'</span> / <span class="string">'3'</span> / <span class="string">'4'</span> ]</span><br><span class="line">markeredgecolor <span class="keyword">or</span> mec  任何 matplotlib 颜色</span><br><span class="line">markeredgewidth <span class="keyword">or</span> mew  以点为单位的浮点值</span><br><span class="line">markerfacecolor <span class="keyword">or</span> mfc  任何 matplotlib 颜色</span><br><span class="line">markersize <span class="keyword">or</span> ms        浮点值</span><br><span class="line">markevery               [ <span class="literal">None</span> / 整数值 / (startind, stride) ]</span><br><span class="line">picker                  用于交互式线条选择</span><br><span class="line">pickradius              线条的拾取选择半径</span><br><span class="line">solid_capstyle          [<span class="string">'butt'</span> / <span class="string">'round'</span> / <span class="string">'projecting'</span>]</span><br><span class="line">solid_joinstyle         [<span class="string">'miter'</span> / <span class="string">'round'</span> / <span class="string">'bevel'</span>]</span><br><span class="line">transform               matplotlib.transforms.Transform 实例</span><br><span class="line">visible                 [<span class="literal">True</span> / <span class="literal">False</span>]</span><br><span class="line">xdata                   np.array</span><br><span class="line">ydata                   np.array</span><br><span class="line">zorder                  任何数值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示中文</span></span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'FangSong'</span>] <span class="comment"># 指定默认字体 </span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span> <span class="comment"># 解决保存图像是负号'-'显示为方块的问题</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>黑体</th><th>SimHei</th></tr></thead><tbody><tr><td>微软雅黑</td><td>Microsoft YaHei</td></tr><tr><td>微软正黑体</td><td>Microsoft JhengHei</td></tr><tr><td>新宋体</td><td>NSimSun</td></tr><tr><td>新细明体</td><td>PMingLiU</td></tr><tr><td>细明体</td><td>MingLiU</td></tr><tr><td>标楷体</td><td>DFKai-SB</td></tr><tr><td>仿宋</td><td>FangSong</td></tr><tr><td>楷体</td><td>KaiTi</td></tr><tr><td>仿宋_GB2312</td><td>FangSong_GB2312</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#颜色、标记和线型</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment">##linestyle设置线型，color设置颜色,marker设置设置连接点</span></span><br><span class="line">plt.plot(numpy.random.randn(<span class="number">30</span>).cumsum(),linestyle=<span class="string">'--'</span>,color=<span class="string">'g'</span>,marker=<span class="string">'o'</span>)</span><br></pre></td></tr></table></figure><p>参考这个</p><p><a href="https://www.jb51.net/article/168302.htm" target="_blank" rel="noopener">https://www.jb51.net/article/168302.htm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置标题、轴标签，刻度以及刻度标签</span></span><br><span class="line">fig = plt.figure()   <span class="comment">#创建figure对象</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)   <span class="comment">#获得Axes对象</span></span><br><span class="line">ax.plot(numpy.random.randn(<span class="number">1000</span>).cumsum()) <span class="comment">#生成随机数</span></span><br><span class="line">ax.set_xticks([<span class="number">0</span>,<span class="number">250</span>,<span class="number">500</span>,<span class="number">750</span>,<span class="number">1000</span>])   <span class="comment">#设置x轴刻度</span></span><br><span class="line">ax.set_yticks([<span class="number">-20</span>,<span class="number">-10</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>])    <span class="comment">#设置y轴刻度</span></span><br><span class="line">ax.set_title(<span class="string">'My first matplotlib plot'</span>)  <span class="comment">#设置标题</span></span><br><span class="line">ax.set_xlabel(<span class="string">'Xtages'</span>)   <span class="comment">#设置x轴标签</span></span><br><span class="line">ax.set_ylabel(<span class="string">'Ytages'</span>)   <span class="comment">#设置y轴标签</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.annotate(<span class="string">"Important value"</span>, (<span class="number">55</span>,<span class="number">20</span>), xycoords=<span class="string">'data'</span>,  <span class="comment">#添加注释的方法</span></span><br><span class="line">     xytext=(<span class="number">5</span>, <span class="number">38</span>),</span><br><span class="line">     arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调整图像的大小</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment">#解决中文显示问题</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 标记图的序号</span></span><br><span class="line"><span class="comment"># fig.suptitle('1') </span></span><br><span class="line"><span class="comment"># 改变横纵坐标</span></span><br><span class="line">plt.xticks(x)</span><br><span class="line"><span class="comment"># 绘制图像，r*--颜色，点的标记，线段模式，label标签的名字，linewidth线的宽度</span></span><br><span class="line">plt.plot(x,y1,<span class="string">"r*--"</span>, label=<span class="string">'N123RW'</span>,linewidth=<span class="number">0.25</span> )</span><br><span class="line">plt.plot(x,y2,<span class="string">"ks--"</span>, label=<span class="string">'DLRW'</span>,linewidth=<span class="number">0.25</span>)</span><br><span class="line">plt.plot(x,y3,<span class="string">"gp--"</span>, label=<span class="string">'SRW'</span>,linewidth=<span class="number">0.25</span>)</span><br><span class="line"><span class="comment"># 显示标签，默认为axis=0左上角</span></span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment"># fontsize字体大小</span></span><br><span class="line">plt.xlabel(<span class="string">"Characteristic number"</span>, fontsize = <span class="number">15</span>) </span><br><span class="line">plt.xticks(fontsize=<span class="number">10</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Accuracy of RF"</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">10</span>)</span><br><span class="line">plt.title(<span class="string">"Feature elimination based on DBT and RFE"</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br><span class="line">fig.savefig(<span class="string">'features.png'</span>,dpi = <span class="number">400</span>,bbox_inches=<span class="string">'tight'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-Matplotlib&quot;&gt;&lt;a href=&quot;#python-Matplotlib&quot; class=&quot;headerlink&quot; title=&quot;python_Matplotlib&quot;&gt;&lt;/a&gt;python_Matplotlib&lt;/h1&gt;&lt;p&gt;参考这个即可&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
